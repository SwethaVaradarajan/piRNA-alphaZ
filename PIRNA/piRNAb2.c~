/*#################################################################################################
#external_functions.h
#Author: Swetha Varadarajan, modified the automaticaly generated code from AlphaZ
#Last Update by Swetha Varadarajan: May 25, 2018
#################################################################################################*/

// This file is generated from test alphabets program by code generator in alphaz
// To compile this code, use -lm option for math library.

// Includes
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
#include <string.h>
#include <limits.h>
#include <float.h>
#include "energy.h"
#include "external_functions.h"

// Common Macros
#define max(x, y)   ((x)>(y) ? (x) : (y))
#define MAX(x, y)	((x)>(y) ? (x) : (y))
#define min(x, y)   ((x)>(y) ? (y) : (x))
#define MIN(x, y)	((x)>(y) ? (y) : (x))
#define CEILD(n,d)  (int)ceil(((double)(n))/((double)(d)))
#define ceild(n,d)  (int)ceil(((double)(n))/((double)(d)))
#define FLOORD(n,d) (int)floor(((double)(n))/((double)(d)))
#define floord(n,d) (int)floor(((double)(n))/((double)(d)))
#define CDIV(x,y)    CEILD((x),(y))
#define div(x,y)    CDIV((x),(y))
#define FDIV(x,y)    FLOORD((x),(y))
#define LB_SHIFT(b,s)  ((int)ceild(b,s) * s)
#define MOD(i,j)   ((i)%(j))
#define mallocCheck(v,s,d) if ((v) == NULL) { printf("Failed to allocate memory for %s : size=%lu\n", "sizeof(d)*(s)", sizeof(d)*(s)); exit(-1); }

// Common functions for min and max
//functions for integer max
inline int __max_int(int x, int y){
	return ((x)>(y) ? (x) : (y));
}

inline short __max_short(short x, short y){
	return ((x)>(y) ? (x) : (y));
}

inline long __max_long(long x, long y){
	return ((x)>(y) ? (x) : (y));
}

inline unsigned int __max_unsigned_int(unsigned int x, unsigned int y){
	return ((x)>(y) ? (x) : (y));
}

inline unsigned short __max_unsigned_short(unsigned short x, unsigned short y){
	return ((x)>(y) ? (x) : (y));
}

//function for float max
inline float __max_float(float x, float y){
	return ((x)>(y) ? (x) : (y));
}

//function for double max
inline double __max_double(double x, double y){
	return ((x)>(y) ? (x) : (y));
}

//function for integer min
inline int __min_int(int x, int y){
	return ((x)>(y) ? (y) : (x));
}

inline short __min_short(short x, short y){
	return ((x)>(y) ? (y) : (x));
}

inline long __min_long(long x, long y){
	return ((x)>(y) ? (y) : (x));
}

inline unsigned int __min_unsigned_int(unsigned int x, unsigned int y){
	return ((x)>(y) ? (y) : (x));
}

inline unsigned short __min_unsigned_short(unsigned short x, unsigned short y){
	return ((x)>(y) ? (y) : (x));
}

inline unsigned long __min_unsigned_long(unsigned long x, unsigned long y){
	return ((x)>(y) ? (y) : (x));
}

inline float __min_float(float x, float y){
	return ((x)>(y) ? (y) : (x));
}

inline double __min_double(double x, double y){
	return ((x)>(y) ? (y) : (x));
}


///Global Variables
extern unsigned char* seq0;
extern unsigned char* seqr;
extern unsigned char* seq1;
extern Energy *energy;
extern double RT;
static double** Qb0;
static double**** Qg0;
static double**** tempqg0;
static double**** tempqgk0;
static double**** tempqgm0;
static double** Qbr;
static double**** Qgr;
static double**** tempqgr;
static double**** tempqgkr;
static double**** tempqgmr;
static double** Qm00;
static double** Qm10;
static double** Q0r;
static double** Q1r;
static double** Qm0r;
static double** Qm1r;
static double**** Qgk1;
static double**** Qgm1;
static double** Q01;
static double** Q11;
static double** Qm01;
static double** Qm11;
static double**** Qih0;
static double**** Qih1;
static double**** Qihh00;
static double**** Qihh01;
static double**** Qihh10;
static double**** Qihh11;
static double**** Qihm00;
static double**** Qihm01;
static double**** Qihm10;
static double**** Qihm11;
static double**** Qgkr;
static double**** Qgmr;
static double**** Qgk0;
static double**** Qgm0;
static double** Q20;
static double** Qm20;
static double** Qm2r;
static double** Q2r;
static double** Q21;
static double**** tempQiy1;
static double**** tempQiy2;
static double**** tempQixm001;
static double**** tempQixm002;
static double**** tempQixm011;
static double**** tempQixm012;
static double**** tempQixm021;
static double**** tempQixm022;
static double**** tempQixm101;
static double**** tempQixm102;
static double**** tempQixm111;
static double**** tempQixm112;
static double**** tempQixm121;
static double**** tempQixm122;
static double**** tempQixk001;
static double**** tempQixk002;
static double**** tempQixk011;
static double**** tempQixk012;
static double**** tempQixk101;
static double**** tempQixk102;
static double**** tempQixk111;
static double**** tempQixk112;
static double**** tempQimm021;
static double**** tempQimm022;
static double**** tempQimm023;
static double**** tempQimm121;
static double**** tempQimm122;
static double**** tempQimm123;
static double**** tempQimm201;
static double**** tempQimm202;
static double**** tempQimm203;
static double**** tempQimm211;
static double**** tempQimm212;
static double**** tempQimm213;
static double**** tempQimm221;
static double**** tempQimm222;
static double**** tempQimm223;
static double**** tempQimk011;
static double**** tempQimk012;
static double**** tempQimk013;
static double**** tempQimk014;
static double**** tempQimk111;
static double**** tempQimk112;
static double**** tempQimk113;
static double**** tempQimk114;
static double**** tempQimk201;
static double**** tempQimk202;
static double**** tempQimk203;
static double**** tempQimk204;
static double**** tempQimk211;
static double**** tempQimk212;
static double**** tempQimk213;
static double**** tempQimk214;
static double**** tempQikm101;
static double**** tempQikm102;
static double**** tempQikm103;
static double**** tempQikm104;
static double**** tempQikm111;
static double**** tempQikm112;
static double**** tempQikm113;
static double**** tempQikm114;
static double**** tempQikm021;
static double**** tempQikm022;
static double**** tempQikm023;
static double**** tempQikm024;
static double**** tempQikm121;
static double**** tempQikm122;
static double**** tempQikm123;
static double**** tempQikm124;
static double**** tempQikk011;
static double**** tempQikk012;
static double**** tempQikk013;
static double**** tempQikk014;
static double**** tempQikk015;
static double**** tempQikk101;
static double**** tempQikk102;
static double**** tempQikk103;
static double**** tempQikk104;
static double**** tempQikk105;
static double**** tempQikk111;
static double**** tempQikk112;
static double**** tempQikk113;
static double**** tempQikk114;
static double**** tempQikk115;
static double**** tempQiann011;
static double**** tempQiann012;
static double**** tempQiann013;
static double**** tempQiann014;
static double**** tempQiann015;
static double**** tempQiann016;
static double**** tempQiann021;
static double**** tempQiann022;
static double**** tempQiann023;
static double**** tempQiann024;
static double**** tempQiann025;
static double**** tempQiann026;
static double**** tempQiann101;
static double**** tempQiann102;
static double**** tempQiann103;
static double**** tempQiann104;
static double**** tempQiann105;
static double**** tempQiann106;
static double**** tempQiann111;
static double**** tempQiann112;
static double**** tempQiann113;
static double**** tempQiann114;
static double**** tempQiann115;
static double**** tempQiann116;
static double**** tempQiann121;
static double**** tempQiann122;
static double**** tempQiann123;
static double**** tempQiann124;
static double**** tempQiann125;
static double**** tempQiann126;
static double**** tempQiann201;
static double**** tempQiann202;
static double**** tempQiann203;
static double**** tempQiann204;
static double**** tempQiann205;
static double**** tempQiann206;
static double**** tempQiann211;
static double**** tempQiann212;
static double**** tempQiann213;
static double**** tempQiann214;
static double**** tempQiann215;
static double**** tempQiann216;
static double**** tempQiann221;
static double**** tempQiann222;
static double**** tempQiann223;
static double**** tempQiann224;
static double**** tempQiann225;
static double**** tempQiann226;
static double**** tempQiand011;
static double**** tempQiand012;
static double**** tempQiand013;
static double**** tempQiand014;
static double**** tempQiand015;
static double**** tempQiand101;
static double**** tempQiand102;
static double**** tempQiand103;
static double**** tempQiand104;
static double**** tempQiand105;
static double**** tempQiand111;
static double**** tempQiand112;
static double**** tempQiand113;
static double**** tempQiand114;
static double**** tempQiand115;
static double**** tempQiand201;
static double**** tempQiand202;
static double**** tempQiand203;
static double**** tempQiand204;
static double**** tempQiand205;
static double**** tempQiand211;
static double**** tempQiand212;
static double**** tempQiand213;
static double**** tempQiand214;
static double**** tempQiand215;
static double**** tempQiadn011;
static double**** tempQiadn012;
static double**** tempQiadn013;
static double**** tempQiadn014;
static double**** tempQiadn015;
static double**** tempQiadn021;
static double**** tempQiadn022;
static double**** tempQiadn023;
static double**** tempQiadn024;
static double**** tempQiadn025;
static double**** tempQiadn101;
static double**** tempQiadn102;
static double**** tempQiadn103;
static double**** tempQiadn104;
static double**** tempQiadn105;
static double**** tempQiadn111;
static double**** tempQiadn112;
static double**** tempQiadn113;
static double**** tempQiadn114;
static double**** tempQiadn115;
static double**** tempQiadn121;
static double**** tempQiadn122;
static double**** tempQiadn123;
static double**** tempQiadn124;
static double**** tempQiadn125;
static double**** tempQiadd011;
static double**** tempQiadd012;
static double**** tempQiadd013;
static double**** tempQiadd014;
static double**** tempQiadd015;
static double**** tempQiadd101;
static double**** tempQiadd102;
static double**** tempQiadd103;
static double**** tempQiadd104;
static double**** tempQiadd105;
static double**** tempQiadd111;
static double**** tempQiadd112;
static double**** tempQiadd113;
static double**** tempQiadd114;
static double**** tempQiadd115;
static double**** tempQir011;
static double**** tempQir012;
static double**** tempQir101;
static double**** tempQir102;
static double**** tempQir111;
static double**** tempQir112;
static double**** tempQiar011;
static double**** tempQiar012;
static double**** tempQiar013;
static double**** tempQiar101;
static double**** tempQiar102;
static double**** tempQiar103;
static double**** tempQiar111;
static double**** tempQiar112;
static double**** tempQiar113;
static double**** tempQilr011;
static double**** tempQilr012;
static double**** tempQilr101;
static double**** tempQilr102;
static double**** tempQilr111;
static double**** tempQilr112;
static double**** tempQi1;
static double**** tempQi2;
static double**** tempQia1;
static double**** tempQia2;
static double**** tempQia3;
static double**** tempQia4;
static double**** tempQia5;
static double**** tempQia6;
static double**** tempQib001;
static double**** tempQib002;
static double**** tempQib011;
static double**** tempQib012;
static double**** tempQib101;
static double**** tempQib102;
static double**** tempQib111;
static double**** tempQib112;
static double**** tempQinn011;
static double**** tempQinn021;
static double**** tempQinn101;
static double**** tempQinn111;
static double**** tempQinn121;
static double**** tempQinn201;
static double**** tempQinn211;
static double**** tempQinn221;
static double**** tempQidd011;
static double**** tempQidd101;
static double**** tempQidd111;
static double**** tempQidd012;
static double**** tempQidd102;
static double**** tempQidd112;
static double** Q00;
static double** Q10;
static double**** Qi;
static double**** Qiy;
static double**** Qixm00;
static double**** Qixm01;
static double**** Qixm02;
static double**** Qixm10;
static double**** Qixm11;
static double**** Qixm12;
static double**** Qixk00;
static double**** Qixk01;
static double**** Qixk10;
static double**** Qixk11;
static double**** Qimm02;
static double**** Qimm12;
static double**** Qimm20;
static double**** Qimm21;
static double**** Qimm22;
static double**** Qimk01;
static double**** Qimk11;
static double**** Qimk20;
static double**** Qimk21;
static double**** Qikm10;
static double**** Qikm11;
static double**** Qikm02;
static double**** Qikm12;
static double**** Qikk01;
static double**** Qikk10;
static double**** Qikk11;
static double**** Qiann01;
static double**** Qiann02;
static double**** Qiann10;
static double**** Qiann11;
static double**** Qiann12;
static double**** Qiann20;
static double**** Qiann21;
static double**** Qiann22;
static double**** Qiand01;
static double**** Qiand10;
static double**** Qiand11;
static double**** Qiand20;
static double**** Qiand21;
static double**** Qiadn01;
static double**** Qiadn02;
static double**** Qiadn10;
static double**** Qiadn11;
static double**** Qiadn12;
static double**** Qiadd01;
static double**** Qiadd10;
static double**** Qiadd11;
static double**** Qiar01;
static double**** Qiar10;
static double**** Qiar11;
static double**** Qilr01;
static double**** Qilr10;
static double**** Qilr11;
static double**** Qir01;
static double**** Qir10;
static double**** Qir11;
static double**** Qia;
static double**** Qib00;
static double**** Qib01;
static double**** Qib10;
static double**** Qib11;
static double**** Qinn01;
static double**** Qinn02;
static double**** Qinn10;
static double**** Qinn11;
static double**** Qinn12;
static double**** Qinn20;
static double**** Qinn21;
static double**** Qinn22;
static double**** Qind01;
static double**** Qind10;
static double**** Qind11;
static double**** Qind20;
static double**** Qind21;
static double**** Qidn01;
static double**** Qidn02;
static double**** Qidn10;
static double**** Qidn11;
static double**** Qidn12;
static double**** Qidd01;
static double**** Qidd10;
static double**** Qidd11;
static double**** Qix00;
static double**** Qix01;
static double**** Qix10;
static double**** Qix11;
static double**** auxqiadd01;
static double**** auxqiadd10;
static double**** auxqiadd11;
static double**** auxqia01;
static double**** auxqia10;
static double**** auxqia11;
static char* _flag_seq1;
static char** _flag_Q00;
static char** _flag_Q10;
static char**** _flag_Qi;
static char**** _flag_Qiy;
static char**** _flag_Qixm00;
static char**** _flag_Qixm01;
static char**** _flag_Qixm02;
static char**** _flag_Qixm10;
static char**** _flag_Qixm11;
static char**** _flag_Qixm12;
static char**** _flag_Qixk00;
static char**** _flag_Qixk01;
static char**** _flag_Qixk10;
static char**** _flag_Qixk11;
static char**** _flag_Qimm02;
static char**** _flag_Qimm12;
static char**** _flag_Qimm20;
static char**** _flag_Qimm21;
static char**** _flag_Qimm22;
static char**** _flag_Qimk01;
static char**** _flag_Qimk11;
static char**** _flag_Qimk20;
static char**** _flag_Qimk21;
static char**** _flag_Qikm10;
static char**** _flag_Qikm11;
static char**** _flag_Qikm02;
static char**** _flag_Qikm12;
static char**** _flag_Qikk01;
static char**** _flag_Qikk10;
static char**** _flag_Qikk11;
static char**** _flag_Qiann01;
static char**** _flag_Qiann02;
static char**** _flag_Qiann10;
static char**** _flag_Qiann11;
static char**** _flag_Qiann12;
static char**** _flag_Qiann20;
static char**** _flag_Qiann21;
static char**** _flag_Qiann22;
static char**** _flag_Qiand01;
static char**** _flag_Qiand10;
static char**** _flag_Qiand11;
static char**** _flag_Qiand20;
static char**** _flag_Qiand21;
static char**** _flag_Qiadn01;
static char**** _flag_Qiadn02;
static char**** _flag_Qiadn10;
static char**** _flag_Qiadn11;
static char**** _flag_Qiadn12;
static char**** _flag_Qiadd01;
static char**** _flag_Qiadd10;
static char**** _flag_Qiadd11;
static char**** _flag_Qiar01;
static char**** _flag_Qiar10;
static char**** _flag_Qiar11;
static char**** _flag_Qilr01;
static char**** _flag_Qilr10;
static char**** _flag_Qilr11;
static char**** _flag_Qir01;
static char**** _flag_Qir10;
static char**** _flag_Qir11;
static char**** _flag_Qia;
static char**** _flag_Qib00;
static char**** _flag_Qib01;
static char**** _flag_Qib10;
static char**** _flag_Qib11;
static char**** _flag_Qinn01;
static char**** _flag_Qinn02;
static char**** _flag_Qinn10;
static char**** _flag_Qinn11;
static char**** _flag_Qinn12;
static char**** _flag_Qinn20;
static char**** _flag_Qinn21;
static char**** _flag_Qinn22;
static char**** _flag_Qind01;
static char**** _flag_Qind10;
static char**** _flag_Qind11;
static char**** _flag_Qind20;
static char**** _flag_Qind21;
static char**** _flag_Qidn01;
static char**** _flag_Qidn02;
static char**** _flag_Qidn10;
static char**** _flag_Qidn11;
static char**** _flag_Qidn12;
static char**** _flag_Qidd01;
static char**** _flag_Qidd10;
static char**** _flag_Qidd11;
static char**** _flag_Qix00;
static char**** _flag_Qix01;
static char**** _flag_Qix10;
static char**** _flag_Qix11;
static char**** _flag_auxqiadd01;
static char**** _flag_auxqiadd10;
static char**** _flag_auxqiadd11;
static char**** _flag_auxqia01;
static char**** _flag_auxqia10;
static char**** _flag_auxqia11;
static char** _flag_Qb0;
static char**** _flag_Qg0;
static char**** _flag_tempqg0;
static char**** _flag_tempqgk0;
static char**** _flag_tempqgm0;
static char** _flag_Qbr;
static char**** _flag_Qgr;
static char**** _flag_tempqgr;
static char**** _flag_tempqgkr;
static char**** _flag_tempqgmr;
static char** _flag_Qm00;
static char** _flag_Qm10;
static char** _flag_Q0r;
static char** _flag_Q1r;
static char** _flag_Qm0r;
static char** _flag_Qm1r;
static char**** _flag_Qgk1;
static char**** _flag_Qgm1;
static char** _flag_Q01;
static char** _flag_Q11;
static char** _flag_Qm01;
static char** _flag_Qm11;
static char**** _flag_Qih0;
static char**** _flag_Qih1;
static char**** _flag_Qihh00;
static char**** _flag_Qihh01;
static char**** _flag_Qihh10;
static char**** _flag_Qihh11;
static char**** _flag_Qihm00;
static char**** _flag_Qihm01;
static char**** _flag_Qihm10;
static char**** _flag_Qihm11;
static char**** _flag_Qgkr;
static char**** _flag_Qgmr;
static char**** _flag_Qgk0;
static char**** _flag_Qgm0;
static char** _flag_Q20;
static char** _flag_Qm20;
static char** _flag_Qm2r;
static char** _flag_Q2r;
static char** _flag_Q21;
static char**** _flag_tempQiy1;
static char**** _flag_tempQiy2;
static char**** _flag_tempQixm001;
static char**** _flag_tempQixm002;
static char**** _flag_tempQixm011;
static char**** _flag_tempQixm012;
static char**** _flag_tempQixm021;
static char**** _flag_tempQixm022;
static char**** _flag_tempQixm101;
static char**** _flag_tempQixm102;
static char**** _flag_tempQixm111;
static char**** _flag_tempQixm112;
static char**** _flag_tempQixm121;
static char**** _flag_tempQixm122;
static char**** _flag_tempQixk001;
static char**** _flag_tempQixk002;
static char**** _flag_tempQixk011;
static char**** _flag_tempQixk012;
static char**** _flag_tempQixk101;
static char**** _flag_tempQixk102;
static char**** _flag_tempQixk111;
static char**** _flag_tempQixk112;
static char**** _flag_tempQimm021;
static char**** _flag_tempQimm022;
static char**** _flag_tempQimm023;
static char**** _flag_tempQimm121;
static char**** _flag_tempQimm122;
static char**** _flag_tempQimm123;
static char**** _flag_tempQimm201;
static char**** _flag_tempQimm202;
static char**** _flag_tempQimm203;
static char**** _flag_tempQimm211;
static char**** _flag_tempQimm212;
static char**** _flag_tempQimm213;
static char**** _flag_tempQimm221;
static char**** _flag_tempQimm222;
static char**** _flag_tempQimm223;
static char**** _flag_tempQimk011;
static char**** _flag_tempQimk012;
static char**** _flag_tempQimk013;
static char**** _flag_tempQimk014;
static char**** _flag_tempQimk111;
static char**** _flag_tempQimk112;
static char**** _flag_tempQimk113;
static char**** _flag_tempQimk114;
static char**** _flag_tempQimk201;
static char**** _flag_tempQimk202;
static char**** _flag_tempQimk203;
static char**** _flag_tempQimk204;
static char**** _flag_tempQimk211;
static char**** _flag_tempQimk212;
static char**** _flag_tempQimk213;
static char**** _flag_tempQimk214;
static char**** _flag_tempQikm101;
static char**** _flag_tempQikm102;
static char**** _flag_tempQikm103;
static char**** _flag_tempQikm104;
static char**** _flag_tempQikm111;
static char**** _flag_tempQikm112;
static char**** _flag_tempQikm113;
static char**** _flag_tempQikm114;
static char**** _flag_tempQikm021;
static char**** _flag_tempQikm022;
static char**** _flag_tempQikm023;
static char**** _flag_tempQikm024;
static char**** _flag_tempQikm121;
static char**** _flag_tempQikm122;
static char**** _flag_tempQikm123;
static char**** _flag_tempQikm124;
static char**** _flag_tempQikk011;
static char**** _flag_tempQikk012;
static char**** _flag_tempQikk013;
static char**** _flag_tempQikk014;
static char**** _flag_tempQikk015;
static char**** _flag_tempQikk101;
static char**** _flag_tempQikk102;
static char**** _flag_tempQikk103;
static char**** _flag_tempQikk104;
static char**** _flag_tempQikk105;
static char**** _flag_tempQikk111;
static char**** _flag_tempQikk112;
static char**** _flag_tempQikk113;
static char**** _flag_tempQikk114;
static char**** _flag_tempQikk115;
static char**** _flag_tempQiann011;
static char**** _flag_tempQiann012;
static char**** _flag_tempQiann013;
static char**** _flag_tempQiann014;
static char**** _flag_tempQiann015;
static char**** _flag_tempQiann016;
static char**** _flag_tempQiann021;
static char**** _flag_tempQiann022;
static char**** _flag_tempQiann023;
static char**** _flag_tempQiann024;
static char**** _flag_tempQiann025;
static char**** _flag_tempQiann026;
static char**** _flag_tempQiann101;
static char**** _flag_tempQiann102;
static char**** _flag_tempQiann103;
static char**** _flag_tempQiann104;
static char**** _flag_tempQiann105;
static char**** _flag_tempQiann106;
static char**** _flag_tempQiann111;
static char**** _flag_tempQiann112;
static char**** _flag_tempQiann113;
static char**** _flag_tempQiann114;
static char**** _flag_tempQiann115;
static char**** _flag_tempQiann116;
static char**** _flag_tempQiann121;
static char**** _flag_tempQiann122;
static char**** _flag_tempQiann123;
static char**** _flag_tempQiann124;
static char**** _flag_tempQiann125;
static char**** _flag_tempQiann126;
static char**** _flag_tempQiann201;
static char**** _flag_tempQiann202;
static char**** _flag_tempQiann203;
static char**** _flag_tempQiann204;
static char**** _flag_tempQiann205;
static char**** _flag_tempQiann206;
static char**** _flag_tempQiann211;
static char**** _flag_tempQiann212;
static char**** _flag_tempQiann213;
static char**** _flag_tempQiann214;
static char**** _flag_tempQiann215;
static char**** _flag_tempQiann216;
static char**** _flag_tempQiann221;
static char**** _flag_tempQiann222;
static char**** _flag_tempQiann223;
static char**** _flag_tempQiann224;
static char**** _flag_tempQiann225;
static char**** _flag_tempQiann226;
static char**** _flag_tempQiand011;
static char**** _flag_tempQiand012;
static char**** _flag_tempQiand013;
static char**** _flag_tempQiand014;
static char**** _flag_tempQiand015;
static char**** _flag_tempQiand101;
static char**** _flag_tempQiand102;
static char**** _flag_tempQiand103;
static char**** _flag_tempQiand104;
static char**** _flag_tempQiand105;
static char**** _flag_tempQiand111;
static char**** _flag_tempQiand112;
static char**** _flag_tempQiand113;
static char**** _flag_tempQiand114;
static char**** _flag_tempQiand115;
static char**** _flag_tempQiand201;
static char**** _flag_tempQiand202;
static char**** _flag_tempQiand203;
static char**** _flag_tempQiand204;
static char**** _flag_tempQiand205;
static char**** _flag_tempQiand211;
static char**** _flag_tempQiand212;
static char**** _flag_tempQiand213;
static char**** _flag_tempQiand214;
static char**** _flag_tempQiand215;
static char**** _flag_tempQiadn011;
static char**** _flag_tempQiadn012;
static char**** _flag_tempQiadn013;
static char**** _flag_tempQiadn014;
static char**** _flag_tempQiadn015;
static char**** _flag_tempQiadn021;
static char**** _flag_tempQiadn022;
static char**** _flag_tempQiadn023;
static char**** _flag_tempQiadn024;
static char**** _flag_tempQiadn025;
static char**** _flag_tempQiadn101;
static char**** _flag_tempQiadn102;
static char**** _flag_tempQiadn103;
static char**** _flag_tempQiadn104;
static char**** _flag_tempQiadn105;
static char**** _flag_tempQiadn111;
static char**** _flag_tempQiadn112;
static char**** _flag_tempQiadn113;
static char**** _flag_tempQiadn114;
static char**** _flag_tempQiadn115;
static char**** _flag_tempQiadn121;
static char**** _flag_tempQiadn122;
static char**** _flag_tempQiadn123;
static char**** _flag_tempQiadn124;
static char**** _flag_tempQiadn125;
static char**** _flag_tempQiadd011;
static char**** _flag_tempQiadd012;
static char**** _flag_tempQiadd013;
static char**** _flag_tempQiadd014;
static char**** _flag_tempQiadd015;
static char**** _flag_tempQiadd101;
static char**** _flag_tempQiadd102;
static char**** _flag_tempQiadd103;
static char**** _flag_tempQiadd104;
static char**** _flag_tempQiadd105;
static char**** _flag_tempQiadd111;
static char**** _flag_tempQiadd112;
static char**** _flag_tempQiadd113;
static char**** _flag_tempQiadd114;
static char**** _flag_tempQiadd115;
static char**** _flag_tempQir011;
static char**** _flag_tempQir012;
static char**** _flag_tempQir101;
static char**** _flag_tempQir102;
static char**** _flag_tempQir111;
static char**** _flag_tempQir112;
static char**** _flag_tempQiar011;
static char**** _flag_tempQiar012;
static char**** _flag_tempQiar013;
static char**** _flag_tempQiar101;
static char**** _flag_tempQiar102;
static char**** _flag_tempQiar103;
static char**** _flag_tempQiar111;
static char**** _flag_tempQiar112;
static char**** _flag_tempQiar113;
static char**** _flag_tempQilr011;
static char**** _flag_tempQilr012;
static char**** _flag_tempQilr101;
static char**** _flag_tempQilr102;
static char**** _flag_tempQilr111;
static char**** _flag_tempQilr112;
static char**** _flag_tempQi1;
static char**** _flag_tempQi2;
static char**** _flag_tempQia1;
static char**** _flag_tempQia2;
static char**** _flag_tempQia3;
static char**** _flag_tempQia4;
static char**** _flag_tempQia5;
static char**** _flag_tempQia6;
static char**** _flag_tempQib001;
static char**** _flag_tempQib002;
static char**** _flag_tempQib011;
static char**** _flag_tempQib012;
static char**** _flag_tempQib101;
static char**** _flag_tempQib102;
static char**** _flag_tempQib111;
static char**** _flag_tempQib112;
static char**** _flag_tempQinn011;
static char**** _flag_tempQinn021;
static char**** _flag_tempQinn101;
static char**** _flag_tempQinn111;
static char**** _flag_tempQinn121;
static char**** _flag_tempQinn201;
static char**** _flag_tempQinn211;
static char**** _flag_tempQinn221;
static char**** _flag_tempQidd011;
static char**** _flag_tempQidd101;
static char**** _flag_tempQidd111;
static char**** _flag_tempQidd012;
static char**** _flag_tempQidd102;
static char**** _flag_tempQidd112;


//Local Function Declarations
double reduce_piRNAb2_Q00_1(long, long, long, int, int);
double reduce_piRNAb2_Q00_2(long, long, long, int, int);
double reduce_piRNAb2_Q00_3(long, long, long, int, int);
double eval_Q00(long, long, long, int, int);
double reduce_piRNAb2_Q10_1(long, long, long, int, int);
double reduce_piRNAb2_Q10_2(long, long, long, int, int);
double reduce_piRNAb2_Q10_3(long, long, long, int, int);
double eval_Q10(long, long, long, int, int);
double reduce_piRNAb2_Q20_1(long, long, long, int, int);
double reduce_piRNAb2_Q20_2(long, long, long, int, int);
double reduce_piRNAb2_Q20_3(long, long, long, int, int);
double eval_Q20(long, long, long, int, int);
double reduce_piRNAb2_Qm00_1(long, long, long, int, int);
double reduce_piRNAb2_Qm00_2(long, long, long, int, int);
double reduce_piRNAb2_Qm00_3(long, long, long, int, int);
double eval_Qm00(long, long, long, int, int);
double reduce_piRNAb2_Qm10_1(long, long, long, int, int);
double reduce_piRNAb2_Qm10_2(long, long, long, int, int);
double reduce_piRNAb2_Qm10_3(long, long, long, int, int);
double eval_Qm10(long, long, long, int, int);
double reduce_piRNAb2_Qm20_1(long, long, long, int, int);
double reduce_piRNAb2_Qm20_2(long, long, long, int, int);
double reduce_piRNAb2_Qm20_3(long, long, long, int, int);
double eval_Qm20(long, long, long, int, int);
double reduce_piRNAb2_Qb0_1(long, long, long, int, int);
double reduce_piRNAb2_Qb0_2(long, long, long, int, int);
double reduce_piRNAb2_Qb0_3(long, long, long, int, int);
double eval_Qb0(long, long, long, int, int);
double eval_Qg0(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqg0_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqg0_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqg0_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqg0_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqg0_5(long, long, long, int, int, int, int);
double eval_tempqg0(long, long, long, int, int, int, int);
double eval_Qgk0(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgk0_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgk0_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgk0_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgk0_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgk0_5(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgk0_6(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgk0_7(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgk0_8(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgk0_9(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgk0_10(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgk0_11(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgk0_12(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgk0_13(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgk0_14(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgk0_15(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgk0_16(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgk0_17(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgk0_18(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgk0_19(long, long, long, int, int, int, int);
double eval_tempqgk0(long, long, long, int, int, int, int);
double eval_Qgm0(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgm0_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgm0_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgm0_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgm0_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgm0_5(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgm0_6(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgm0_7(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgm0_8(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgm0_9(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgm0_10(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgm0_11(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgm0_12(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgm0_13(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgm0_14(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgm0_15(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgm0_16(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgm0_17(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgm0_18(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgm0_19(long, long, long, int, int, int, int);
double eval_tempqgm0(long, long, long, int, int, int, int);
double reduce_piRNAb2_Q0r_1(long, long, long, int, int);
double reduce_piRNAb2_Q0r_2(long, long, long, int, int);
double reduce_piRNAb2_Q0r_3(long, long, long, int, int);
double eval_Q0r(long, long, long, int, int);
double reduce_piRNAb2_Q1r_1(long, long, long, int, int);
double reduce_piRNAb2_Q1r_2(long, long, long, int, int);
double reduce_piRNAb2_Q1r_3(long, long, long, int, int);
double eval_Q1r(long, long, long, int, int);
double reduce_piRNAb2_Q2r_1(long, long, long, int, int);
double reduce_piRNAb2_Q2r_2(long, long, long, int, int);
double reduce_piRNAb2_Q2r_3(long, long, long, int, int);
double eval_Q2r(long, long, long, int, int);
double reduce_piRNAb2_Qm0r_1(long, long, long, int, int);
double reduce_piRNAb2_Qm0r_2(long, long, long, int, int);
double reduce_piRNAb2_Qm0r_3(long, long, long, int, int);
double eval_Qm0r(long, long, long, int, int);
double reduce_piRNAb2_Qm1r_1(long, long, long, int, int);
double reduce_piRNAb2_Qm1r_2(long, long, long, int, int);
double reduce_piRNAb2_Qm1r_3(long, long, long, int, int);
double eval_Qm1r(long, long, long, int, int);
double reduce_piRNAb2_Qm2r_1(long, long, long, int, int);
double reduce_piRNAb2_Qm2r_2(long, long, long, int, int);
double reduce_piRNAb2_Qm2r_3(long, long, long, int, int);
double eval_Qm2r(long, long, long, int, int);
double reduce_piRNAb2_Qbr_1(long, long, long, int, int);
double reduce_piRNAb2_Qbr_2(long, long, long, int, int);
double reduce_piRNAb2_Qbr_3(long, long, long, int, int);
double eval_Qbr(long, long, long, int, int);
double eval_Qgr(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgr_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgr_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgr_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgr_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgr_5(long, long, long, int, int, int, int);
double eval_tempqgr(long, long, long, int, int, int, int);
double eval_Qgkr(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgkr_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgkr_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgkr_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgkr_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgkr_5(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgkr_6(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgkr_7(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgkr_8(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgkr_9(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgkr_10(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgkr_11(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgkr_12(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgkr_13(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgkr_14(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgkr_15(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgkr_16(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgkr_17(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgkr_18(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgkr_19(long, long, long, int, int, int, int);
double eval_tempqgkr(long, long, long, int, int, int, int);
double eval_Qgmr(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgmr_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgmr_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgmr_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgmr_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgmr_5(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgmr_6(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgmr_7(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgmr_8(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgmr_9(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgmr_10(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgmr_11(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgmr_12(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgmr_13(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgmr_14(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgmr_15(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgmr_16(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgmr_17(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgmr_18(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempqgmr_19(long, long, long, int, int, int, int);
double eval_tempqgmr(long, long, long, int, int, int, int);
unsigned char eval_seq1(long, long, long, int);
double eval_Q01(long, long, long, int, int);
double eval_Q11(long, long, long, int, int);
double eval_Q21(long, long, long, int, int);
double eval_Qm01(long, long, long, int, int);
double eval_Qm11(long, long, long, int, int);
double eval_Qgk1(long, long, long, int, int, int, int);
double eval_Qgm1(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qih0_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qih0_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qih0_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qih0_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qih0_5(long, long, long, int, int, int, int);
double eval_Qih0(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qih1_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qih1_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qih1_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qih1_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qih1_5(long, long, long, int, int, int, int);
double eval_Qih1(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihh00_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihh00_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihh00_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihh00_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihh00_5(long, long, long, int, int, int, int);
double eval_Qihh00(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihh01_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihh01_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihh01_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihh01_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihh01_5(long, long, long, int, int, int, int);
double eval_Qihh01(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihh10_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihh10_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihh10_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihh10_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihh10_5(long, long, long, int, int, int, int);
double eval_Qihh10(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihh11_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihh11_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihh11_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihh11_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihh11_5(long, long, long, int, int, int, int);
double eval_Qihh11(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihm00_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihm00_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihm00_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihm00_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihm00_5(long, long, long, int, int, int, int);
double eval_Qihm00(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihm01_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihm01_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihm01_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihm01_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihm01_5(long, long, long, int, int, int, int);
double eval_Qihm01(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihm10_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihm10_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihm10_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihm10_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihm10_5(long, long, long, int, int, int, int);
double eval_Qihm10(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihm11_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihm11_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihm11_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihm11_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qihm11_5(long, long, long, int, int, int, int);
double eval_Qihm11(long, long, long, int, int, int, int);
double eval_Qix00(long, long, long, int, int, int, int);
double eval_Qix01(long, long, long, int, int, int, int);
double eval_Qix10(long, long, long, int, int, int, int);
double eval_Qix11(long, long, long, int, int, int, int);
double eval_auxqia01(long, long, long, int, int, int, int);
double eval_auxqia10(long, long, long, int, int, int, int);
double eval_auxqia11(long, long, long, int, int, int, int);
double eval_auxqiadd01(long, long, long, int, int, int, int);
double eval_auxqiadd10(long, long, long, int, int, int, int);
double eval_auxqiadd11(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiy1_1(long, long, long, int, int, int, int);
double eval_tempQiy1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiy2_1(long, long, long, int, int, int, int);
double eval_tempQiy2(long, long, long, int, int, int, int);
double eval_Qiy(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQixm101_1(long, long, long, int, int, int, int);
double eval_tempQixm101(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQixm102_1(long, long, long, int, int, int, int);
double eval_tempQixm102(long, long, long, int, int, int, int);
double eval_Qixm10(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQixm111_1(long, long, long, int, int, int, int);
double eval_tempQixm111(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQixm112_1(long, long, long, int, int, int, int);
double eval_tempQixm112(long, long, long, int, int, int, int);
double eval_Qixm11(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQixm121_1(long, long, long, int, int, int, int);
double eval_tempQixm121(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQixm122_1(long, long, long, int, int, int, int);
double eval_tempQixm122(long, long, long, int, int, int, int);
double eval_Qixm12(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQixk101_1(long, long, long, int, int, int, int);
double eval_tempQixk101(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQixk102_1(long, long, long, int, int, int, int);
double eval_tempQixk102(long, long, long, int, int, int, int);
double eval_Qixk10(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQixk111_1(long, long, long, int, int, int, int);
double eval_tempQixk111(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQixk112_1(long, long, long, int, int, int, int);
double eval_tempQixk112(long, long, long, int, int, int, int);
double eval_Qixk11(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQixm001_1(long, long, long, int, int, int, int);
double eval_tempQixm001(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQixm002_1(long, long, long, int, int, int, int);
double eval_tempQixm002(long, long, long, int, int, int, int);
double eval_Qixm00(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQixm011_1(long, long, long, int, int, int, int);
double eval_tempQixm011(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQixm012_1(long, long, long, int, int, int, int);
double eval_tempQixm012(long, long, long, int, int, int, int);
double eval_Qixm01(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQixm021_1(long, long, long, int, int, int, int);
double eval_tempQixm021(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQixm022_1(long, long, long, int, int, int, int);
double eval_tempQixm022(long, long, long, int, int, int, int);
double eval_Qixm02(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQixk001_1(long, long, long, int, int, int, int);
double eval_tempQixk001(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQixk002_1(long, long, long, int, int, int, int);
double eval_tempQixk002(long, long, long, int, int, int, int);
double eval_Qixk00(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQixk011_1(long, long, long, int, int, int, int);
double eval_tempQixk011(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQixk012_1(long, long, long, int, int, int, int);
double eval_tempQixk012(long, long, long, int, int, int, int);
double eval_Qixk01(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQimm021_1(long, long, long, int, int, int, int);
double eval_tempQimm021(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQimm022_1(long, long, long, int, int, int, int);
double eval_tempQimm022(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQimm023_1(long, long, long, int, int, int, int);
double eval_tempQimm023(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQimm121_1(long, long, long, int, int, int, int);
double eval_tempQimm121(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQimm122_1(long, long, long, int, int, int, int);
double eval_tempQimm122(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQimm123_1(long, long, long, int, int, int, int);
double eval_tempQimm123(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQimm201_1(long, long, long, int, int, int, int);
double eval_tempQimm201(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQimm202_1(long, long, long, int, int, int, int);
double eval_tempQimm202(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQimm203_1(long, long, long, int, int, int, int);
double eval_tempQimm203(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQimm211_1(long, long, long, int, int, int, int);
double eval_tempQimm211(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQimm212_1(long, long, long, int, int, int, int);
double eval_tempQimm212(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQimm213_1(long, long, long, int, int, int, int);
double eval_tempQimm213(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQimm221_1(long, long, long, int, int, int, int);
double eval_tempQimm221(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQimm222_1(long, long, long, int, int, int, int);
double eval_tempQimm222(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQimm223_1(long, long, long, int, int, int, int);
double eval_tempQimm223(long, long, long, int, int, int, int);
double eval_Qimm02(long, long, long, int, int, int, int);
double eval_Qimm20(long, long, long, int, int, int, int);
double eval_Qimm12(long, long, long, int, int, int, int);
double eval_Qimm21(long, long, long, int, int, int, int);
double eval_Qimm22(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQimk011_1(long, long, long, int, int, int, int);
double eval_tempQimk011(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQimk012_1(long, long, long, int, int, int, int);
double eval_tempQimk012(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQimk013_1(long, long, long, int, int, int, int);
double eval_tempQimk013(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQimk014_1(long, long, long, int, int, int, int);
double eval_tempQimk014(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQimk111_1(long, long, long, int, int, int, int);
double eval_tempQimk111(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQimk112_1(long, long, long, int, int, int, int);
double eval_tempQimk112(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQimk113_1(long, long, long, int, int, int, int);
double eval_tempQimk113(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQimk114_1(long, long, long, int, int, int, int);
double eval_tempQimk114(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQimk201_1(long, long, long, int, int, int, int);
double eval_tempQimk201(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQimk202_1(long, long, long, int, int, int, int);
double eval_tempQimk202(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQimk203_1(long, long, long, int, int, int, int);
double eval_tempQimk203(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQimk204_1(long, long, long, int, int, int, int);
double eval_tempQimk204(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQimk211_1(long, long, long, int, int, int, int);
double eval_tempQimk211(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQimk212_1(long, long, long, int, int, int, int);
double eval_tempQimk212(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQimk213_1(long, long, long, int, int, int, int);
double eval_tempQimk213(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQimk214_1(long, long, long, int, int, int, int);
double eval_tempQimk214(long, long, long, int, int, int, int);
double eval_Qimk01(long, long, long, int, int, int, int);
double eval_Qimk20(long, long, long, int, int, int, int);
double eval_Qimk11(long, long, long, int, int, int, int);
double eval_Qimk21(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQikm021_1(long, long, long, int, int, int, int);
double eval_tempQikm021(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQikm022_1(long, long, long, int, int, int, int);
double eval_tempQikm022(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQikm023_1(long, long, long, int, int, int, int);
double eval_tempQikm023(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQikm024_1(long, long, long, int, int, int, int);
double eval_tempQikm024(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQikm101_1(long, long, long, int, int, int, int);
double eval_tempQikm101(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQikm102_1(long, long, long, int, int, int, int);
double eval_tempQikm102(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQikm103_1(long, long, long, int, int, int, int);
double eval_tempQikm103(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQikm104_1(long, long, long, int, int, int, int);
double eval_tempQikm104(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQikm111_1(long, long, long, int, int, int, int);
double eval_tempQikm111(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQikm112_1(long, long, long, int, int, int, int);
double eval_tempQikm112(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQikm113_1(long, long, long, int, int, int, int);
double eval_tempQikm113(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQikm114_1(long, long, long, int, int, int, int);
double eval_tempQikm114(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQikm121_1(long, long, long, int, int, int, int);
double eval_tempQikm121(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQikm122_1(long, long, long, int, int, int, int);
double eval_tempQikm122(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQikm123_1(long, long, long, int, int, int, int);
double eval_tempQikm123(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQikm124_1(long, long, long, int, int, int, int);
double eval_tempQikm124(long, long, long, int, int, int, int);
double eval_Qikm10(long, long, long, int, int, int, int);
double eval_Qikm02(long, long, long, int, int, int, int);
double eval_Qikm11(long, long, long, int, int, int, int);
double eval_Qikm12(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQikk011_1(long, long, long, int, int, int, int);
double eval_tempQikk011(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQikk012_1(long, long, long, int, int, int, int);
double eval_tempQikk012(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQikk013_1(long, long, long, int, int, int, int);
double eval_tempQikk013(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQikk014_1(long, long, long, int, int, int, int);
double eval_tempQikk014(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQikk015_1(long, long, long, int, int, int, int);
double eval_tempQikk015(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQikk101_1(long, long, long, int, int, int, int);
double eval_tempQikk101(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQikk102_1(long, long, long, int, int, int, int);
double eval_tempQikk102(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQikk103_1(long, long, long, int, int, int, int);
double eval_tempQikk103(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQikk104_1(long, long, long, int, int, int, int);
double eval_tempQikk104(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQikk105_1(long, long, long, int, int, int, int);
double eval_tempQikk105(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQikk111_1(long, long, long, int, int, int, int);
double eval_tempQikk111(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQikk112_1(long, long, long, int, int, int, int);
double eval_tempQikk112(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQikk113_1(long, long, long, int, int, int, int);
double eval_tempQikk113(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQikk114_1(long, long, long, int, int, int, int);
double eval_tempQikk114(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQikk115_1(long, long, long, int, int, int, int);
double eval_tempQikk115(long, long, long, int, int, int, int);
double eval_Qikk01(long, long, long, int, int, int, int);
double eval_Qikk10(long, long, long, int, int, int, int);
double eval_Qikk11(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQia1_1(long, long, long, int, int, int, int);
double eval_tempQia1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQia2_1(long, long, long, int, int, int, int);
double eval_tempQia2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQia3_1(long, long, long, int, int, int, int);
double eval_tempQia3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQia4_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQia4_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQia4_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQia4_4(long, long, long, int, int, int, int);
double eval_tempQia4(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQia5_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQia5_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQia5_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQia5_4(long, long, long, int, int, int, int);
double eval_tempQia5(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQia6_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQia6_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQia6_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQia6_4(long, long, long, int, int, int, int);
double eval_tempQia6(long, long, long, int, int, int, int);
double eval_Qia(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQib001_1(long, long, long, int, int, int, int);
double eval_tempQib001(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQib002_1(long, long, long, int, int, int, int);
double eval_tempQib002(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQib011_1(long, long, long, int, int, int, int);
double eval_tempQib011(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQib012_1(long, long, long, int, int, int, int);
double eval_tempQib012(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQib101_1(long, long, long, int, int, int, int);
double eval_tempQib101(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQib102_1(long, long, long, int, int, int, int);
double eval_tempQib102(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQib111_1(long, long, long, int, int, int, int);
double eval_tempQib111(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQib112_1(long, long, long, int, int, int, int);
double eval_tempQib112(long, long, long, int, int, int, int);
double eval_Qib00(long, long, long, int, int, int, int);
double eval_Qib01(long, long, long, int, int, int, int);
double eval_Qib10(long, long, long, int, int, int, int);
double eval_Qib11(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQi1_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQi1_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQi1_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQi1_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQi1_5(long, long, long, int, int, int, int);
double eval_tempQi1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQi2_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQi2_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQi2_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQi2_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQi2_5(long, long, long, int, int, int, int);
double eval_tempQi2(long, long, long, int, int, int, int);
double eval_Qi(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn011_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn011_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn011_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn011_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn011_5(long, long, long, int, int, int, int);
double eval_tempQinn011(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn021_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn021_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn021_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn021_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn021_5(long, long, long, int, int, int, int);
double eval_tempQinn021(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn101_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn101_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn101_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn101_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn101_5(long, long, long, int, int, int, int);
double eval_tempQinn101(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn111_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn111_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn111_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn111_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn111_5(long, long, long, int, int, int, int);
double eval_tempQinn111(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn121_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn121_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn121_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn121_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn121_5(long, long, long, int, int, int, int);
double eval_tempQinn121(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn201_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn201_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn201_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn201_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn201_5(long, long, long, int, int, int, int);
double eval_tempQinn201(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn211_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn211_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn211_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn211_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn211_5(long, long, long, int, int, int, int);
double eval_tempQinn211(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn221_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn221_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn221_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn221_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQinn221_5(long, long, long, int, int, int, int);
double eval_tempQinn221(long, long, long, int, int, int, int);
double eval_Qinn01(long, long, long, int, int, int, int);
double eval_Qinn02(long, long, long, int, int, int, int);
double eval_Qinn10(long, long, long, int, int, int, int);
double eval_Qinn11(long, long, long, int, int, int, int);
double eval_Qinn12(long, long, long, int, int, int, int);
double eval_Qinn20(long, long, long, int, int, int, int);
double eval_Qinn21(long, long, long, int, int, int, int);
double eval_Qinn22(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qind01_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qind01_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qind01_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qind01_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qind01_5(long, long, long, int, int, int, int);
double eval_Qind01(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qind10_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qind10_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qind10_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qind10_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qind10_5(long, long, long, int, int, int, int);
double eval_Qind10(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qind11_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qind11_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qind11_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qind11_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qind11_5(long, long, long, int, int, int, int);
double eval_Qind11(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qind20_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qind20_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qind20_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qind20_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qind20_5(long, long, long, int, int, int, int);
double eval_Qind20(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qind21_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qind21_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qind21_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qind21_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qind21_5(long, long, long, int, int, int, int);
double eval_Qind21(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qidn01_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qidn01_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qidn01_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qidn01_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qidn01_5(long, long, long, int, int, int, int);
double eval_Qidn01(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qidn02_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qidn02_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qidn02_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qidn02_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qidn02_5(long, long, long, int, int, int, int);
double eval_Qidn02(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qidn10_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qidn10_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qidn10_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qidn10_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qidn10_5(long, long, long, int, int, int, int);
double eval_Qidn10(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qidn11_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qidn11_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qidn11_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qidn11_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qidn11_5(long, long, long, int, int, int, int);
double eval_Qidn11(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qidn12_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qidn12_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qidn12_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qidn12_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_Qidn12_5(long, long, long, int, int, int, int);
double eval_Qidn12(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQidd011_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQidd011_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQidd011_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQidd011_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQidd011_5(long, long, long, int, int, int, int);
double eval_tempQidd011(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQidd101_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQidd101_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQidd101_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQidd101_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQidd101_5(long, long, long, int, int, int, int);
double eval_tempQidd101(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQidd111_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQidd111_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQidd111_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQidd111_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQidd111_5(long, long, long, int, int, int, int);
double eval_tempQidd111(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQidd012_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQidd012_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQidd012_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQidd012_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQidd012_5(long, long, long, int, int, int, int);
double eval_tempQidd012(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQidd102_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQidd102_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQidd102_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQidd102_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQidd102_5(long, long, long, int, int, int, int);
double eval_tempQidd102(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQidd112_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQidd112_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQidd112_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQidd112_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQidd112_5(long, long, long, int, int, int, int);
double eval_tempQidd112(long, long, long, int, int, int, int);
double eval_Qidd01(long, long, long, int, int, int, int);
double eval_Qidd10(long, long, long, int, int, int, int);
double eval_Qidd11(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann014_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann014_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann014_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann014_4(long, long, long, int, int, int, int);
double eval_tempQiann014(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann015_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann015_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann015_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann015_4(long, long, long, int, int, int, int);
double eval_tempQiann015(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann016_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann016_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann016_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann016_4(long, long, long, int, int, int, int);
double eval_tempQiann016(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann024_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann024_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann024_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann024_4(long, long, long, int, int, int, int);
double eval_tempQiann024(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann025_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann025_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann025_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann025_4(long, long, long, int, int, int, int);
double eval_tempQiann025(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann026_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann026_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann026_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann026_4(long, long, long, int, int, int, int);
double eval_tempQiann026(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann104_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann104_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann104_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann104_4(long, long, long, int, int, int, int);
double eval_tempQiann104(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann105_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann105_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann105_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann105_4(long, long, long, int, int, int, int);
double eval_tempQiann105(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann106_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann106_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann106_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann106_4(long, long, long, int, int, int, int);
double eval_tempQiann106(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann114_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann114_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann114_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann114_4(long, long, long, int, int, int, int);
double eval_tempQiann114(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann115_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann115_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann115_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann115_4(long, long, long, int, int, int, int);
double eval_tempQiann115(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann116_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann116_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann116_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann116_4(long, long, long, int, int, int, int);
double eval_tempQiann116(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann124_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann124_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann124_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann124_4(long, long, long, int, int, int, int);
double eval_tempQiann124(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann125_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann125_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann125_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann125_4(long, long, long, int, int, int, int);
double eval_tempQiann125(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann126_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann126_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann126_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann126_4(long, long, long, int, int, int, int);
double eval_tempQiann126(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann204_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann204_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann204_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann204_4(long, long, long, int, int, int, int);
double eval_tempQiann204(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann205_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann205_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann205_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann205_4(long, long, long, int, int, int, int);
double eval_tempQiann205(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann206_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann206_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann206_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann206_4(long, long, long, int, int, int, int);
double eval_tempQiann206(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann214_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann214_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann214_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann214_4(long, long, long, int, int, int, int);
double eval_tempQiann214(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann215_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann215_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann215_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann215_4(long, long, long, int, int, int, int);
double eval_tempQiann215(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann216_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann216_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann216_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann216_4(long, long, long, int, int, int, int);
double eval_tempQiann216(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann224_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann224_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann224_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann224_4(long, long, long, int, int, int, int);
double eval_tempQiann224(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann225_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann225_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann225_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann225_4(long, long, long, int, int, int, int);
double eval_tempQiann225(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann226_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann226_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann226_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann226_4(long, long, long, int, int, int, int);
double eval_tempQiann226(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann011_1(long, long, long, int, int, int, int);
double eval_tempQiann011(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann012_1(long, long, long, int, int, int, int);
double eval_tempQiann012(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann013_1(long, long, long, int, int, int, int);
double eval_tempQiann013(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann021_1(long, long, long, int, int, int, int);
double eval_tempQiann021(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann022_1(long, long, long, int, int, int, int);
double eval_tempQiann022(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann023_1(long, long, long, int, int, int, int);
double eval_tempQiann023(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann101_1(long, long, long, int, int, int, int);
double eval_tempQiann101(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann102_1(long, long, long, int, int, int, int);
double eval_tempQiann102(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann103_1(long, long, long, int, int, int, int);
double eval_tempQiann103(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann111_1(long, long, long, int, int, int, int);
double eval_tempQiann111(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann112_1(long, long, long, int, int, int, int);
double eval_tempQiann112(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann113_1(long, long, long, int, int, int, int);
double eval_tempQiann113(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann121_1(long, long, long, int, int, int, int);
double eval_tempQiann121(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann122_1(long, long, long, int, int, int, int);
double eval_tempQiann122(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann123_1(long, long, long, int, int, int, int);
double eval_tempQiann123(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann201_1(long, long, long, int, int, int, int);
double eval_tempQiann201(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann202_1(long, long, long, int, int, int, int);
double eval_tempQiann202(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann203_1(long, long, long, int, int, int, int);
double eval_tempQiann203(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann211_1(long, long, long, int, int, int, int);
double eval_tempQiann211(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann212_1(long, long, long, int, int, int, int);
double eval_tempQiann212(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann213_1(long, long, long, int, int, int, int);
double eval_tempQiann213(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann221_1(long, long, long, int, int, int, int);
double eval_tempQiann221(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann222_1(long, long, long, int, int, int, int);
double eval_tempQiann222(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiann223_1(long, long, long, int, int, int, int);
double eval_tempQiann223(long, long, long, int, int, int, int);
double eval_Qiann01(long, long, long, int, int, int, int);
double eval_Qiann02(long, long, long, int, int, int, int);
double eval_Qiann10(long, long, long, int, int, int, int);
double eval_Qiann11(long, long, long, int, int, int, int);
double eval_Qiann12(long, long, long, int, int, int, int);
double eval_Qiann20(long, long, long, int, int, int, int);
double eval_Qiann21(long, long, long, int, int, int, int);
double eval_Qiann22(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn015_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn015_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn015_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn015_4(long, long, long, int, int, int, int);
double eval_tempQiadn015(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn025_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn025_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn025_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn025_4(long, long, long, int, int, int, int);
double eval_tempQiadn025(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn105_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn105_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn105_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn105_4(long, long, long, int, int, int, int);
double eval_tempQiadn105(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn115_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn115_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn115_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn115_4(long, long, long, int, int, int, int);
double eval_tempQiadn115(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn125_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn125_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn125_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn125_4(long, long, long, int, int, int, int);
double eval_tempQiadn125(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand015_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand015_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand015_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand015_4(long, long, long, int, int, int, int);
double eval_tempQiand015(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand105_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand105_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand105_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand105_4(long, long, long, int, int, int, int);
double eval_tempQiand105(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand115_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand115_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand115_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand115_4(long, long, long, int, int, int, int);
double eval_tempQiand115(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand205_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand205_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand205_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand205_4(long, long, long, int, int, int, int);
double eval_tempQiand205(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand215_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand215_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand215_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand215_4(long, long, long, int, int, int, int);
double eval_tempQiand215(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand011_1(long, long, long, int, int, int, int);
double eval_tempQiand011(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand012_1(long, long, long, int, int, int, int);
double eval_tempQiand012(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand013_1(long, long, long, int, int, int, int);
double eval_tempQiand013(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand014_1(long, long, long, int, int, int, int);
double eval_tempQiand014(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand101_1(long, long, long, int, int, int, int);
double eval_tempQiand101(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand102_1(long, long, long, int, int, int, int);
double eval_tempQiand102(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand103_1(long, long, long, int, int, int, int);
double eval_tempQiand103(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand104_1(long, long, long, int, int, int, int);
double eval_tempQiand104(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand111_1(long, long, long, int, int, int, int);
double eval_tempQiand111(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand112_1(long, long, long, int, int, int, int);
double eval_tempQiand112(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand113_1(long, long, long, int, int, int, int);
double eval_tempQiand113(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand114_1(long, long, long, int, int, int, int);
double eval_tempQiand114(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand201_1(long, long, long, int, int, int, int);
double eval_tempQiand201(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand202_1(long, long, long, int, int, int, int);
double eval_tempQiand202(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand203_1(long, long, long, int, int, int, int);
double eval_tempQiand203(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand204_1(long, long, long, int, int, int, int);
double eval_tempQiand204(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand211_1(long, long, long, int, int, int, int);
double eval_tempQiand211(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand212_1(long, long, long, int, int, int, int);
double eval_tempQiand212(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand213_1(long, long, long, int, int, int, int);
double eval_tempQiand213(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiand214_1(long, long, long, int, int, int, int);
double eval_tempQiand214(long, long, long, int, int, int, int);
double eval_Qiand01(long, long, long, int, int, int, int);
double eval_Qiand10(long, long, long, int, int, int, int);
double eval_Qiand11(long, long, long, int, int, int, int);
double eval_Qiand20(long, long, long, int, int, int, int);
double eval_Qiand21(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn011_1(long, long, long, int, int, int, int);
double eval_tempQiadn011(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn012_1(long, long, long, int, int, int, int);
double eval_tempQiadn012(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn013_1(long, long, long, int, int, int, int);
double eval_tempQiadn013(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn014_1(long, long, long, int, int, int, int);
double eval_tempQiadn014(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn021_1(long, long, long, int, int, int, int);
double eval_tempQiadn021(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn022_1(long, long, long, int, int, int, int);
double eval_tempQiadn022(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn023_1(long, long, long, int, int, int, int);
double eval_tempQiadn023(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn024_1(long, long, long, int, int, int, int);
double eval_tempQiadn024(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn101_1(long, long, long, int, int, int, int);
double eval_tempQiadn101(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn102_1(long, long, long, int, int, int, int);
double eval_tempQiadn102(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn103_1(long, long, long, int, int, int, int);
double eval_tempQiadn103(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn104_1(long, long, long, int, int, int, int);
double eval_tempQiadn104(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn111_1(long, long, long, int, int, int, int);
double eval_tempQiadn111(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn112_1(long, long, long, int, int, int, int);
double eval_tempQiadn112(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn113_1(long, long, long, int, int, int, int);
double eval_tempQiadn113(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn114_1(long, long, long, int, int, int, int);
double eval_tempQiadn114(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn121_1(long, long, long, int, int, int, int);
double eval_tempQiadn121(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn122_1(long, long, long, int, int, int, int);
double eval_tempQiadn122(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn123_1(long, long, long, int, int, int, int);
double eval_tempQiadn123(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadn124_1(long, long, long, int, int, int, int);
double eval_tempQiadn124(long, long, long, int, int, int, int);
double eval_Qiadn01(long, long, long, int, int, int, int);
double eval_Qiadn02(long, long, long, int, int, int, int);
double eval_Qiadn10(long, long, long, int, int, int, int);
double eval_Qiadn11(long, long, long, int, int, int, int);
double eval_Qiadn12(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadd011_1(long, long, long, int, int, int, int);
double eval_tempQiadd011(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadd012_1(long, long, long, int, int, int, int);
double eval_tempQiadd012(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadd013_1(long, long, long, int, int, int, int);
double eval_tempQiadd013(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadd014_1(long, long, long, int, int, int, int);
double eval_tempQiadd014(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadd015_1(long, long, long, int, int, int, int);
double eval_tempQiadd015(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadd101_1(long, long, long, int, int, int, int);
double eval_tempQiadd101(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadd102_1(long, long, long, int, int, int, int);
double eval_tempQiadd102(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadd103_1(long, long, long, int, int, int, int);
double eval_tempQiadd103(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadd104_1(long, long, long, int, int, int, int);
double eval_tempQiadd104(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadd105_1(long, long, long, int, int, int, int);
double eval_tempQiadd105(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadd111_1(long, long, long, int, int, int, int);
double eval_tempQiadd111(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadd112_1(long, long, long, int, int, int, int);
double eval_tempQiadd112(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadd113_1(long, long, long, int, int, int, int);
double eval_tempQiadd113(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadd114_1(long, long, long, int, int, int, int);
double eval_tempQiadd114(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiadd115_1(long, long, long, int, int, int, int);
double eval_tempQiadd115(long, long, long, int, int, int, int);
double eval_Qiadd01(long, long, long, int, int, int, int);
double eval_Qiadd10(long, long, long, int, int, int, int);
double eval_Qiadd11(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQir011_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQir011_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQir011_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQir011_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQir011_5(long, long, long, int, int, int, int);
double eval_tempQir011(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQir101_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQir101_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQir101_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQir101_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQir101_5(long, long, long, int, int, int, int);
double eval_tempQir101(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQir111_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQir111_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQir111_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQir111_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQir111_5(long, long, long, int, int, int, int);
double eval_tempQir111(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQir012_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQir012_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQir012_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQir012_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQir012_5(long, long, long, int, int, int, int);
double eval_tempQir012(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQir102_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQir102_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQir102_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQir102_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQir102_5(long, long, long, int, int, int, int);
double eval_tempQir102(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQir112_1(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQir112_2(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQir112_3(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQir112_4(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQir112_5(long, long, long, int, int, int, int);
double eval_tempQir112(long, long, long, int, int, int, int);
double eval_Qir01(long, long, long, int, int, int, int);
double eval_Qir10(long, long, long, int, int, int, int);
double eval_Qir11(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiar011_1(long, long, long, int, int, int, int);
double eval_tempQiar011(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiar012_1(long, long, long, int, int, int, int);
double eval_tempQiar012(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiar013_1(long, long, long, int, int, int, int);
double eval_tempQiar013(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiar101_1(long, long, long, int, int, int, int);
double eval_tempQiar101(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiar102_1(long, long, long, int, int, int, int);
double eval_tempQiar102(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiar103_1(long, long, long, int, int, int, int);
double eval_tempQiar103(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiar111_1(long, long, long, int, int, int, int);
double eval_tempQiar111(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiar112_1(long, long, long, int, int, int, int);
double eval_tempQiar112(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQiar113_1(long, long, long, int, int, int, int);
double eval_tempQiar113(long, long, long, int, int, int, int);
double eval_Qiar01(long, long, long, int, int, int, int);
double eval_Qiar10(long, long, long, int, int, int, int);
double eval_Qiar11(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQilr011_1(long, long, long, int, int, int, int);
double eval_tempQilr011(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQilr012_1(long, long, long, int, int, int, int);
double eval_tempQilr012(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQilr101_1(long, long, long, int, int, int, int);
double eval_tempQilr101(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQilr102_1(long, long, long, int, int, int, int);
double eval_tempQilr102(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQilr111_1(long, long, long, int, int, int, int);
double eval_tempQilr111(long, long, long, int, int, int, int);
double reduce_piRNAb2_tempQilr112_1(long, long, long, int, int, int, int);
double eval_tempQilr112(long, long, long, int, int, int, int);
double eval_Qilr01(long, long, long, int, int, int, int);
double eval_Qilr10(long, long, long, int, int, int, int);
double eval_Qilr11(long, long, long, int, int, int, int);

//Memory Macros
#define seq0(i) seq0[i]
#define seqr(i) seqr[i]
#define Qb0(i,j) Qb0[i][j]
#define Qg0(i,j,d,e) Qg0[i][j][d][e]
#define tempqg0(i,j,d,e) tempqg0[i][j][d][e]
#define tempqgk0(i,j,d,e) tempqgk0[i][j][d][e]
#define tempqgm0(i,j,d,e) tempqgm0[i][j][d][e]
#define Qbr(i,j) Qbr[i][j]
#define Qgr(i,j,d,e) Qgr[i][j][d][e]
#define tempqgr(i,j,d,e) tempqgr[i][j][d][e]
#define tempqgkr(i,j,d,e) tempqgkr[i][j][d][e]
#define tempqgmr(i,j,d,e) tempqgmr[i][j][d][e]
#define Qm00(i,j) Qm00[i][j]
#define Qm10(i,j) Qm10[i][j]
#define Q0r(i,j) Q0r[i][j]
#define Q1r(i,j) Q1r[i][j]
#define Qm0r(i,j) Qm0r[i][j]
#define Qm1r(i,j) Qm1r[i][j]
#define Qgk1(i,j,d,e) Qgk1[i][j][d][e]
#define Qgm1(i,j,d,e) Qgm1[i][j][d][e]
#define Q01(i,j) Q01[i][j]
#define Q11(i,j) Q11[i][j]
#define Qm01(i,j) Qm01[i][j]
#define Qm11(i,j) Qm11[i][j]
#define Qih0(i1,j1,i2,j2) Qih0[i1][j1][i2][j2]
#define Qih1(i1,j1,i2,j2) Qih1[i1][j1][i2][j2]
#define Qihh00(i1,j1,i2,j2) Qihh00[i1][j1][i2][j2]
#define Qihh01(i1,j1,i2,j2) Qihh01[i1][j1][i2][j2]
#define Qihh10(i1,j1,i2,j2) Qihh10[i1][j1][i2][j2]
#define Qihh11(i1,j1,i2,j2) Qihh11[i1][j1][i2][j2]
#define Qihm00(i1,j1,i2,j2) Qihm00[i1][j1][i2][j2]
#define Qihm01(i1,j1,i2,j2) Qihm01[i1][j1][i2][j2]
#define Qihm10(i1,j1,i2,j2) Qihm10[i1][j1][i2][j2]
#define Qihm11(i1,j1,i2,j2) Qihm11[i1][j1][i2][j2]
#define Qgkr(i,j,d,e) Qgkr[i][j][d][e]
#define Qgmr(i,j,d,e) Qgmr[i][j][d][e]
#define Qgk0(i,j,d,e) Qgk0[i][j][d][e]
#define Qgm0(i,j,d,e) Qgm0[i][j][d][e]
#define Q20(i,j) Q20[i][j]
#define Qm20(i,j) Qm20[i][j]
#define Qm2r(i,j) Qm2r[i][j]
#define Q2r(i,j) Q2r[i][j]
#define Q21(i,j) Q21[i][j]
#define tempQiy1(i1,j1,i2,j2) tempQiy1[i1][j1][i2][j2]
#define tempQiy2(i1,j1,i2,j2) tempQiy2[i1][j1][i2][j2]
#define tempQixm001(i1,j1,i2,j2) tempQixm001[i1][j1][i2][j2]
#define tempQixm002(i1,j1,i2,j2) tempQixm002[i1][j1][i2][j2]
#define tempQixm011(i1,j1,i2,j2) tempQixm011[i1][j1][i2][j2]
#define tempQixm012(i1,j1,i2,j2) tempQixm012[i1][j1][i2][j2]
#define tempQixm021(i1,j1,i2,j2) tempQixm021[i1][j1][i2][j2]
#define tempQixm022(i1,j1,i2,j2) tempQixm022[i1][j1][i2][j2]
#define tempQixm101(i1,j1,i2,j2) tempQixm101[i1][j1][i2][j2]
#define tempQixm102(i1,j1,i2,j2) tempQixm102[i1][j1][i2][j2]
#define tempQixm111(i1,j1,i2,j2) tempQixm111[i1][j1][i2][j2]
#define tempQixm112(i1,j1,i2,j2) tempQixm112[i1][j1][i2][j2]
#define tempQixm121(i1,j1,i2,j2) tempQixm121[i1][j1][i2][j2]
#define tempQixm122(i1,j1,i2,j2) tempQixm122[i1][j1][i2][j2]
#define tempQixk001(i1,j1,i2,j2) tempQixk001[i1][j1][i2][j2]
#define tempQixk002(i1,j1,i2,j2) tempQixk002[i1][j1][i2][j2]
#define tempQixk011(i1,j1,i2,j2) tempQixk011[i1][j1][i2][j2]
#define tempQixk012(i1,j1,i2,j2) tempQixk012[i1][j1][i2][j2]
#define tempQixk101(i1,j1,i2,j2) tempQixk101[i1][j1][i2][j2]
#define tempQixk102(i1,j1,i2,j2) tempQixk102[i1][j1][i2][j2]
#define tempQixk111(i1,j1,i2,j2) tempQixk111[i1][j1][i2][j2]
#define tempQixk112(i1,j1,i2,j2) tempQixk112[i1][j1][i2][j2]
#define tempQimm021(i1,j1,i2,j2) tempQimm021[i1][j1][i2][j2]
#define tempQimm022(i1,j1,i2,j2) tempQimm022[i1][j1][i2][j2]
#define tempQimm023(i1,j1,i2,j2) tempQimm023[i1][j1][i2][j2]
#define tempQimm121(i1,j1,i2,j2) tempQimm121[i1][j1][i2][j2]
#define tempQimm122(i1,j1,i2,j2) tempQimm122[i1][j1][i2][j2]
#define tempQimm123(i1,j1,i2,j2) tempQimm123[i1][j1][i2][j2]
#define tempQimm201(i1,j1,i2,j2) tempQimm201[i1][j1][i2][j2]
#define tempQimm202(i1,j1,i2,j2) tempQimm202[i1][j1][i2][j2]
#define tempQimm203(i1,j1,i2,j2) tempQimm203[i1][j1][i2][j2]
#define tempQimm211(i1,j1,i2,j2) tempQimm211[i1][j1][i2][j2]
#define tempQimm212(i1,j1,i2,j2) tempQimm212[i1][j1][i2][j2]
#define tempQimm213(i1,j1,i2,j2) tempQimm213[i1][j1][i2][j2]
#define tempQimm221(i1,j1,i2,j2) tempQimm221[i1][j1][i2][j2]
#define tempQimm222(i1,j1,i2,j2) tempQimm222[i1][j1][i2][j2]
#define tempQimm223(i1,j1,i2,j2) tempQimm223[i1][j1][i2][j2]
#define tempQimk011(i1,j1,i2,j2) tempQimk011[i1][j1][i2][j2]
#define tempQimk012(i1,j1,i2,j2) tempQimk012[i1][j1][i2][j2]
#define tempQimk013(i1,j1,i2,j2) tempQimk013[i1][j1][i2][j2]
#define tempQimk014(i1,j1,i2,j2) tempQimk014[i1][j1][i2][j2]
#define tempQimk111(i1,j1,i2,j2) tempQimk111[i1][j1][i2][j2]
#define tempQimk112(i1,j1,i2,j2) tempQimk112[i1][j1][i2][j2]
#define tempQimk113(i1,j1,i2,j2) tempQimk113[i1][j1][i2][j2]
#define tempQimk114(i1,j1,i2,j2) tempQimk114[i1][j1][i2][j2]
#define tempQimk201(i1,j1,i2,j2) tempQimk201[i1][j1][i2][j2]
#define tempQimk202(i1,j1,i2,j2) tempQimk202[i1][j1][i2][j2]
#define tempQimk203(i1,j1,i2,j2) tempQimk203[i1][j1][i2][j2]
#define tempQimk204(i1,j1,i2,j2) tempQimk204[i1][j1][i2][j2]
#define tempQimk211(i1,j1,i2,j2) tempQimk211[i1][j1][i2][j2]
#define tempQimk212(i1,j1,i2,j2) tempQimk212[i1][j1][i2][j2]
#define tempQimk213(i1,j1,i2,j2) tempQimk213[i1][j1][i2][j2]
#define tempQimk214(i1,j1,i2,j2) tempQimk214[i1][j1][i2][j2]
#define tempQikm101(i1,j1,i2,j2) tempQikm101[i1][j1][i2][j2]
#define tempQikm102(i1,j1,i2,j2) tempQikm102[i1][j1][i2][j2]
#define tempQikm103(i1,j1,i2,j2) tempQikm103[i1][j1][i2][j2]
#define tempQikm104(i1,j1,i2,j2) tempQikm104[i1][j1][i2][j2]
#define tempQikm111(i1,j1,i2,j2) tempQikm111[i1][j1][i2][j2]
#define tempQikm112(i1,j1,i2,j2) tempQikm112[i1][j1][i2][j2]
#define tempQikm113(i1,j1,i2,j2) tempQikm113[i1][j1][i2][j2]
#define tempQikm114(i1,j1,i2,j2) tempQikm114[i1][j1][i2][j2]
#define tempQikm021(i1,j1,i2,j2) tempQikm021[i1][j1][i2][j2]
#define tempQikm022(i1,j1,i2,j2) tempQikm022[i1][j1][i2][j2]
#define tempQikm023(i1,j1,i2,j2) tempQikm023[i1][j1][i2][j2]
#define tempQikm024(i1,j1,i2,j2) tempQikm024[i1][j1][i2][j2]
#define tempQikm121(i1,j1,i2,j2) tempQikm121[i1][j1][i2][j2]
#define tempQikm122(i1,j1,i2,j2) tempQikm122[i1][j1][i2][j2]
#define tempQikm123(i1,j1,i2,j2) tempQikm123[i1][j1][i2][j2]
#define tempQikm124(i1,j1,i2,j2) tempQikm124[i1][j1][i2][j2]
#define tempQikk011(i1,j1,i2,j2) tempQikk011[i1][j1][i2][j2]
#define tempQikk012(i1,j1,i2,j2) tempQikk012[i1][j1][i2][j2]
#define tempQikk013(i1,j1,i2,j2) tempQikk013[i1][j1][i2][j2]
#define tempQikk014(i1,j1,i2,j2) tempQikk014[i1][j1][i2][j2]
#define tempQikk015(i1,j1,i2,j2) tempQikk015[i1][j1][i2][j2]
#define tempQikk101(i1,j1,i2,j2) tempQikk101[i1][j1][i2][j2]
#define tempQikk102(i1,j1,i2,j2) tempQikk102[i1][j1][i2][j2]
#define tempQikk103(i1,j1,i2,j2) tempQikk103[i1][j1][i2][j2]
#define tempQikk104(i1,j1,i2,j2) tempQikk104[i1][j1][i2][j2]
#define tempQikk105(i1,j1,i2,j2) tempQikk105[i1][j1][i2][j2]
#define tempQikk111(i1,j1,i2,j2) tempQikk111[i1][j1][i2][j2]
#define tempQikk112(i1,j1,i2,j2) tempQikk112[i1][j1][i2][j2]
#define tempQikk113(i1,j1,i2,j2) tempQikk113[i1][j1][i2][j2]
#define tempQikk114(i1,j1,i2,j2) tempQikk114[i1][j1][i2][j2]
#define tempQikk115(i1,j1,i2,j2) tempQikk115[i1][j1][i2][j2]
#define tempQiann011(i1,j1,i2,j2) tempQiann011[i1][j1][i2][j2]
#define tempQiann012(i1,j1,i2,j2) tempQiann012[i1][j1][i2][j2]
#define tempQiann013(i1,j1,i2,j2) tempQiann013[i1][j1][i2][j2]
#define tempQiann014(i1,j1,i2,j2) tempQiann014[i1][j1][i2][j2]
#define tempQiann015(i1,j1,i2,j2) tempQiann015[i1][j1][i2][j2]
#define tempQiann016(i1,j1,i2,j2) tempQiann016[i1][j1][i2][j2]
#define tempQiann021(i1,j1,i2,j2) tempQiann021[i1][j1][i2][j2]
#define tempQiann022(i1,j1,i2,j2) tempQiann022[i1][j1][i2][j2]
#define tempQiann023(i1,j1,i2,j2) tempQiann023[i1][j1][i2][j2]
#define tempQiann024(i1,j1,i2,j2) tempQiann024[i1][j1][i2][j2]
#define tempQiann025(i1,j1,i2,j2) tempQiann025[i1][j1][i2][j2]
#define tempQiann026(i1,j1,i2,j2) tempQiann026[i1][j1][i2][j2]
#define tempQiann101(i1,j1,i2,j2) tempQiann101[i1][j1][i2][j2]
#define tempQiann102(i1,j1,i2,j2) tempQiann102[i1][j1][i2][j2]
#define tempQiann103(i1,j1,i2,j2) tempQiann103[i1][j1][i2][j2]
#define tempQiann104(i1,j1,i2,j2) tempQiann104[i1][j1][i2][j2]
#define tempQiann105(i1,j1,i2,j2) tempQiann105[i1][j1][i2][j2]
#define tempQiann106(i1,j1,i2,j2) tempQiann106[i1][j1][i2][j2]
#define tempQiann111(i1,j1,i2,j2) tempQiann111[i1][j1][i2][j2]
#define tempQiann112(i1,j1,i2,j2) tempQiann112[i1][j1][i2][j2]
#define tempQiann113(i1,j1,i2,j2) tempQiann113[i1][j1][i2][j2]
#define tempQiann114(i1,j1,i2,j2) tempQiann114[i1][j1][i2][j2]
#define tempQiann115(i1,j1,i2,j2) tempQiann115[i1][j1][i2][j2]
#define tempQiann116(i1,j1,i2,j2) tempQiann116[i1][j1][i2][j2]
#define tempQiann121(i1,j1,i2,j2) tempQiann121[i1][j1][i2][j2]
#define tempQiann122(i1,j1,i2,j2) tempQiann122[i1][j1][i2][j2]
#define tempQiann123(i1,j1,i2,j2) tempQiann123[i1][j1][i2][j2]
#define tempQiann124(i1,j1,i2,j2) tempQiann124[i1][j1][i2][j2]
#define tempQiann125(i1,j1,i2,j2) tempQiann125[i1][j1][i2][j2]
#define tempQiann126(i1,j1,i2,j2) tempQiann126[i1][j1][i2][j2]
#define tempQiann201(i1,j1,i2,j2) tempQiann201[i1][j1][i2][j2]
#define tempQiann202(i1,j1,i2,j2) tempQiann202[i1][j1][i2][j2]
#define tempQiann203(i1,j1,i2,j2) tempQiann203[i1][j1][i2][j2]
#define tempQiann204(i1,j1,i2,j2) tempQiann204[i1][j1][i2][j2]
#define tempQiann205(i1,j1,i2,j2) tempQiann205[i1][j1][i2][j2]
#define tempQiann206(i1,j1,i2,j2) tempQiann206[i1][j1][i2][j2]
#define tempQiann211(i1,j1,i2,j2) tempQiann211[i1][j1][i2][j2]
#define tempQiann212(i1,j1,i2,j2) tempQiann212[i1][j1][i2][j2]
#define tempQiann213(i1,j1,i2,j2) tempQiann213[i1][j1][i2][j2]
#define tempQiann214(i1,j1,i2,j2) tempQiann214[i1][j1][i2][j2]
#define tempQiann215(i1,j1,i2,j2) tempQiann215[i1][j1][i2][j2]
#define tempQiann216(i1,j1,i2,j2) tempQiann216[i1][j1][i2][j2]
#define tempQiann221(i1,j1,i2,j2) tempQiann221[i1][j1][i2][j2]
#define tempQiann222(i1,j1,i2,j2) tempQiann222[i1][j1][i2][j2]
#define tempQiann223(i1,j1,i2,j2) tempQiann223[i1][j1][i2][j2]
#define tempQiann224(i1,j1,i2,j2) tempQiann224[i1][j1][i2][j2]
#define tempQiann225(i1,j1,i2,j2) tempQiann225[i1][j1][i2][j2]
#define tempQiann226(i1,j1,i2,j2) tempQiann226[i1][j1][i2][j2]
#define tempQiand011(i1,j1,i2,j2) tempQiand011[i1][j1][i2][j2]
#define tempQiand012(i1,j1,i2,j2) tempQiand012[i1][j1][i2][j2]
#define tempQiand013(i1,j1,i2,j2) tempQiand013[i1][j1][i2][j2]
#define tempQiand014(i1,j1,i2,j2) tempQiand014[i1][j1][i2][j2]
#define tempQiand015(i1,j1,i2,j2) tempQiand015[i1][j1][i2][j2]
#define tempQiand101(i1,j1,i2,j2) tempQiand101[i1][j1][i2][j2]
#define tempQiand102(i1,j1,i2,j2) tempQiand102[i1][j1][i2][j2]
#define tempQiand103(i1,j1,i2,j2) tempQiand103[i1][j1][i2][j2]
#define tempQiand104(i1,j1,i2,j2) tempQiand104[i1][j1][i2][j2]
#define tempQiand105(i1,j1,i2,j2) tempQiand105[i1][j1][i2][j2]
#define tempQiand111(i1,j1,i2,j2) tempQiand111[i1][j1][i2][j2]
#define tempQiand112(i1,j1,i2,j2) tempQiand112[i1][j1][i2][j2]
#define tempQiand113(i1,j1,i2,j2) tempQiand113[i1][j1][i2][j2]
#define tempQiand114(i1,j1,i2,j2) tempQiand114[i1][j1][i2][j2]
#define tempQiand115(i1,j1,i2,j2) tempQiand115[i1][j1][i2][j2]
#define tempQiand201(i1,j1,i2,j2) tempQiand201[i1][j1][i2][j2]
#define tempQiand202(i1,j1,i2,j2) tempQiand202[i1][j1][i2][j2]
#define tempQiand203(i1,j1,i2,j2) tempQiand203[i1][j1][i2][j2]
#define tempQiand204(i1,j1,i2,j2) tempQiand204[i1][j1][i2][j2]
#define tempQiand205(i1,j1,i2,j2) tempQiand205[i1][j1][i2][j2]
#define tempQiand211(i1,j1,i2,j2) tempQiand211[i1][j1][i2][j2]
#define tempQiand212(i1,j1,i2,j2) tempQiand212[i1][j1][i2][j2]
#define tempQiand213(i1,j1,i2,j2) tempQiand213[i1][j1][i2][j2]
#define tempQiand214(i1,j1,i2,j2) tempQiand214[i1][j1][i2][j2]
#define tempQiand215(i1,j1,i2,j2) tempQiand215[i1][j1][i2][j2]
#define tempQiadn011(i1,j1,i2,j2) tempQiadn011[i1][j1][i2][j2]
#define tempQiadn012(i1,j1,i2,j2) tempQiadn012[i1][j1][i2][j2]
#define tempQiadn013(i1,j1,i2,j2) tempQiadn013[i1][j1][i2][j2]
#define tempQiadn014(i1,j1,i2,j2) tempQiadn014[i1][j1][i2][j2]
#define tempQiadn015(i1,j1,i2,j2) tempQiadn015[i1][j1][i2][j2]
#define tempQiadn021(i1,j1,i2,j2) tempQiadn021[i1][j1][i2][j2]
#define tempQiadn022(i1,j1,i2,j2) tempQiadn022[i1][j1][i2][j2]
#define tempQiadn023(i1,j1,i2,j2) tempQiadn023[i1][j1][i2][j2]
#define tempQiadn024(i1,j1,i2,j2) tempQiadn024[i1][j1][i2][j2]
#define tempQiadn025(i1,j1,i2,j2) tempQiadn025[i1][j1][i2][j2]
#define tempQiadn101(i1,j1,i2,j2) tempQiadn101[i1][j1][i2][j2]
#define tempQiadn102(i1,j1,i2,j2) tempQiadn102[i1][j1][i2][j2]
#define tempQiadn103(i1,j1,i2,j2) tempQiadn103[i1][j1][i2][j2]
#define tempQiadn104(i1,j1,i2,j2) tempQiadn104[i1][j1][i2][j2]
#define tempQiadn105(i1,j1,i2,j2) tempQiadn105[i1][j1][i2][j2]
#define tempQiadn111(i1,j1,i2,j2) tempQiadn111[i1][j1][i2][j2]
#define tempQiadn112(i1,j1,i2,j2) tempQiadn112[i1][j1][i2][j2]
#define tempQiadn113(i1,j1,i2,j2) tempQiadn113[i1][j1][i2][j2]
#define tempQiadn114(i1,j1,i2,j2) tempQiadn114[i1][j1][i2][j2]
#define tempQiadn115(i1,j1,i2,j2) tempQiadn115[i1][j1][i2][j2]
#define tempQiadn121(i1,j1,i2,j2) tempQiadn121[i1][j1][i2][j2]
#define tempQiadn122(i1,j1,i2,j2) tempQiadn122[i1][j1][i2][j2]
#define tempQiadn123(i1,j1,i2,j2) tempQiadn123[i1][j1][i2][j2]
#define tempQiadn124(i1,j1,i2,j2) tempQiadn124[i1][j1][i2][j2]
#define tempQiadn125(i1,j1,i2,j2) tempQiadn125[i1][j1][i2][j2]
#define tempQiadd011(i1,j1,i2,j2) tempQiadd011[i1][j1][i2][j2]
#define tempQiadd012(i1,j1,i2,j2) tempQiadd012[i1][j1][i2][j2]
#define tempQiadd013(i1,j1,i2,j2) tempQiadd013[i1][j1][i2][j2]
#define tempQiadd014(i1,j1,i2,j2) tempQiadd014[i1][j1][i2][j2]
#define tempQiadd015(i1,j1,i2,j2) tempQiadd015[i1][j1][i2][j2]
#define tempQiadd101(i1,j1,i2,j2) tempQiadd101[i1][j1][i2][j2]
#define tempQiadd102(i1,j1,i2,j2) tempQiadd102[i1][j1][i2][j2]
#define tempQiadd103(i1,j1,i2,j2) tempQiadd103[i1][j1][i2][j2]
#define tempQiadd104(i1,j1,i2,j2) tempQiadd104[i1][j1][i2][j2]
#define tempQiadd105(i1,j1,i2,j2) tempQiadd105[i1][j1][i2][j2]
#define tempQiadd111(i1,j1,i2,j2) tempQiadd111[i1][j1][i2][j2]
#define tempQiadd112(i1,j1,i2,j2) tempQiadd112[i1][j1][i2][j2]
#define tempQiadd113(i1,j1,i2,j2) tempQiadd113[i1][j1][i2][j2]
#define tempQiadd114(i1,j1,i2,j2) tempQiadd114[i1][j1][i2][j2]
#define tempQiadd115(i1,j1,i2,j2) tempQiadd115[i1][j1][i2][j2]
#define tempQir011(i1,j1,i2,j2) tempQir011[i1][j1][i2][j2]
#define tempQir012(i1,j1,i2,j2) tempQir012[i1][j1][i2][j2]
#define tempQir101(i1,j1,i2,j2) tempQir101[i1][j1][i2][j2]
#define tempQir102(i1,j1,i2,j2) tempQir102[i1][j1][i2][j2]
#define tempQir111(i1,j1,i2,j2) tempQir111[i1][j1][i2][j2]
#define tempQir112(i1,j1,i2,j2) tempQir112[i1][j1][i2][j2]
#define tempQiar011(i1,j1,i2,j2) tempQiar011[i1][j1][i2][j2]
#define tempQiar012(i1,j1,i2,j2) tempQiar012[i1][j1][i2][j2]
#define tempQiar013(i1,j1,i2,j2) tempQiar013[i1][j1][i2][j2]
#define tempQiar101(i1,j1,i2,j2) tempQiar101[i1][j1][i2][j2]
#define tempQiar102(i1,j1,i2,j2) tempQiar102[i1][j1][i2][j2]
#define tempQiar103(i1,j1,i2,j2) tempQiar103[i1][j1][i2][j2]
#define tempQiar111(i1,j1,i2,j2) tempQiar111[i1][j1][i2][j2]
#define tempQiar112(i1,j1,i2,j2) tempQiar112[i1][j1][i2][j2]
#define tempQiar113(i1,j1,i2,j2) tempQiar113[i1][j1][i2][j2]
#define tempQilr011(i1,j1,i2,j2) tempQilr011[i1][j1][i2][j2]
#define tempQilr012(i1,j1,i2,j2) tempQilr012[i1][j1][i2][j2]
#define tempQilr101(i1,j1,i2,j2) tempQilr101[i1][j1][i2][j2]
#define tempQilr102(i1,j1,i2,j2) tempQilr102[i1][j1][i2][j2]
#define tempQilr111(i1,j1,i2,j2) tempQilr111[i1][j1][i2][j2]
#define tempQilr112(i1,j1,i2,j2) tempQilr112[i1][j1][i2][j2]
#define tempQi1(i1,j1,i2,j2) tempQi1[i1][j1][i2][j2]
#define tempQi2(i1,j1,i2,j2) tempQi2[i1][j1][i2][j2]
#define tempQia1(i1,j1,i2,j2) tempQia1[i1][j1][i2][j2]
#define tempQia2(i1,j1,i2,j2) tempQia2[i1][j1][i2][j2]
#define tempQia3(i1,j1,i2,j2) tempQia3[i1][j1][i2][j2]
#define tempQia4(i1,j1,i2,j2) tempQia4[i1][j1][i2][j2]
#define tempQia5(i1,j1,i2,j2) tempQia5[i1][j1][i2][j2]
#define tempQia6(i1,j1,i2,j2) tempQia6[i1][j1][i2][j2]
#define tempQib001(i1,j1,i2,j2) tempQib001[i1][j1][i2][j2]
#define tempQib002(i1,j1,i2,j2) tempQib002[i1][j1][i2][j2]
#define tempQib011(i1,j1,i2,j2) tempQib011[i1][j1][i2][j2]
#define tempQib012(i1,j1,i2,j2) tempQib012[i1][j1][i2][j2]
#define tempQib101(i1,j1,i2,j2) tempQib101[i1][j1][i2][j2]
#define tempQib102(i1,j1,i2,j2) tempQib102[i1][j1][i2][j2]
#define tempQib111(i1,j1,i2,j2) tempQib111[i1][j1][i2][j2]
#define tempQib112(i1,j1,i2,j2) tempQib112[i1][j1][i2][j2]
#define tempQinn011(i1,j1,i2,j2) tempQinn011[i1][j1][i2][j2]
#define tempQinn021(i1,j1,i2,j2) tempQinn021[i1][j1][i2][j2]
#define tempQinn101(i1,j1,i2,j2) tempQinn101[i1][j1][i2][j2]
#define tempQinn111(i1,j1,i2,j2) tempQinn111[i1][j1][i2][j2]
#define tempQinn121(i1,j1,i2,j2) tempQinn121[i1][j1][i2][j2]
#define tempQinn201(i1,j1,i2,j2) tempQinn201[i1][j1][i2][j2]
#define tempQinn211(i1,j1,i2,j2) tempQinn211[i1][j1][i2][j2]
#define tempQinn221(i1,j1,i2,j2) tempQinn221[i1][j1][i2][j2]
#define tempQidd011(i1,j1,i2,j2) tempQidd011[i1][j1][i2][j2]
#define tempQidd101(i1,j1,i2,j2) tempQidd101[i1][j1][i2][j2]
#define tempQidd111(i1,j1,i2,j2) tempQidd111[i1][j1][i2][j2]
#define tempQidd012(i1,j1,i2,j2) tempQidd012[i1][j1][i2][j2]
#define tempQidd102(i1,j1,i2,j2) tempQidd102[i1][j1][i2][j2]
#define tempQidd112(i1,j1,i2,j2) tempQidd112[i1][j1][i2][j2]
#define seq1(i) seq1[i]
#define Q00(i,j) Q00[i][j]
#define Q10(i,j) Q10[i][j]
#define Qi(i1,j1,i2,j2) Qi[i1][j1][i2][j2]
#define Qiy(i1,j1,i2,j2) Qiy[i1][j1][i2][j2]
#define Qixm00(i1,j1,i2,j2) Qixm00[i1][j1][i2][j2]
#define Qixm01(i1,j1,i2,j2) Qixm01[i1][j1][i2][j2]
#define Qixm02(i1,j1,i2,j2) Qixm02[i1][j1][i2][j2]
#define Qixm10(i1,j1,i2,j2) Qixm10[i1][j1][i2][j2]
#define Qixm11(i1,j1,i2,j2) Qixm11[i1][j1][i2][j2]
#define Qixm12(i1,j1,i2,j2) Qixm12[i1][j1][i2][j2]
#define Qixk00(i1,j1,i2,j2) Qixk00[i1][j1][i2][j2]
#define Qixk01(i1,j1,i2,j2) Qixk01[i1][j1][i2][j2]
#define Qixk10(i1,j1,i2,j2) Qixk10[i1][j1][i2][j2]
#define Qixk11(i1,j1,i2,j2) Qixk11[i1][j1][i2][j2]
#define Qimm02(i1,j1,i2,j2) Qimm02[i1][j1][i2][j2]
#define Qimm12(i1,j1,i2,j2) Qimm12[i1][j1][i2][j2]
#define Qimm20(i1,j1,i2,j2) Qimm20[i1][j1][i2][j2]
#define Qimm21(i1,j1,i2,j2) Qimm21[i1][j1][i2][j2]
#define Qimm22(i1,j1,i2,j2) Qimm22[i1][j1][i2][j2]
#define Qimk01(i1,j1,i2,j2) Qimk01[i1][j1][i2][j2]
#define Qimk11(i1,j1,i2,j2) Qimk11[i1][j1][i2][j2]
#define Qimk20(i1,j1,i2,j2) Qimk20[i1][j1][i2][j2]
#define Qimk21(i1,j1,i2,j2) Qimk21[i1][j1][i2][j2]
#define Qikm10(i1,j1,i2,j2) Qikm10[i1][j1][i2][j2]
#define Qikm11(i1,j1,i2,j2) Qikm11[i1][j1][i2][j2]
#define Qikm02(i1,j1,i2,j2) Qikm02[i1][j1][i2][j2]
#define Qikm12(i1,j1,i2,j2) Qikm12[i1][j1][i2][j2]
#define Qikk01(i1,j1,i2,j2) Qikk01[i1][j1][i2][j2]
#define Qikk10(i1,j1,i2,j2) Qikk10[i1][j1][i2][j2]
#define Qikk11(i1,j1,i2,j2) Qikk11[i1][j1][i2][j2]
#define Qiann01(i1,j1,i2,j2) Qiann01[i1][j1][i2][j2]
#define Qiann02(i1,j1,i2,j2) Qiann02[i1][j1][i2][j2]
#define Qiann10(i1,j1,i2,j2) Qiann10[i1][j1][i2][j2]
#define Qiann11(i1,j1,i2,j2) Qiann11[i1][j1][i2][j2]
#define Qiann12(i1,j1,i2,j2) Qiann12[i1][j1][i2][j2]
#define Qiann20(i1,j1,i2,j2) Qiann20[i1][j1][i2][j2]
#define Qiann21(i1,j1,i2,j2) Qiann21[i1][j1][i2][j2]
#define Qiann22(i1,j1,i2,j2) Qiann22[i1][j1][i2][j2]
#define Qiand01(i1,j1,i2,j2) Qiand01[i1][j1][i2][j2]
#define Qiand10(i1,j1,i2,j2) Qiand10[i1][j1][i2][j2]
#define Qiand11(i1,j1,i2,j2) Qiand11[i1][j1][i2][j2]
#define Qiand20(i1,j1,i2,j2) Qiand20[i1][j1][i2][j2]
#define Qiand21(i1,j1,i2,j2) Qiand21[i1][j1][i2][j2]
#define Qiadn01(i1,j1,i2,j2) Qiadn01[i1][j1][i2][j2]
#define Qiadn02(i1,j1,i2,j2) Qiadn02[i1][j1][i2][j2]
#define Qiadn10(i1,j1,i2,j2) Qiadn10[i1][j1][i2][j2]
#define Qiadn11(i1,j1,i2,j2) Qiadn11[i1][j1][i2][j2]
#define Qiadn12(i1,j1,i2,j2) Qiadn12[i1][j1][i2][j2]
#define Qiadd01(i1,j1,i2,j2) Qiadd01[i1][j1][i2][j2]
#define Qiadd10(i1,j1,i2,j2) Qiadd10[i1][j1][i2][j2]
#define Qiadd11(i1,j1,i2,j2) Qiadd11[i1][j1][i2][j2]
#define Qiar01(i1,j1,i2,j2) Qiar01[i1][j1][i2][j2]
#define Qiar10(i1,j1,i2,j2) Qiar10[i1][j1][i2][j2]
#define Qiar11(i1,j1,i2,j2) Qiar11[i1][j1][i2][j2]
#define Qilr01(i1,j1,i2,j2) Qilr01[i1][j1][i2][j2]
#define Qilr10(i1,j1,i2,j2) Qilr10[i1][j1][i2][j2]
#define Qilr11(i1,j1,i2,j2) Qilr11[i1][j1][i2][j2]
#define Qir01(i1,j1,i2,j2) Qir01[i1][j1][i2][j2]
#define Qir10(i1,j1,i2,j2) Qir10[i1][j1][i2][j2]
#define Qir11(i1,j1,i2,j2) Qir11[i1][j1][i2][j2]
#define Qia(i1,j1,i2,j2) Qia[i1][j1][i2][j2]
#define Qib00(i1,j1,i2,j2) Qib00[i1][j1][i2][j2]
#define Qib01(i1,j1,i2,j2) Qib01[i1][j1][i2][j2]
#define Qib10(i1,j1,i2,j2) Qib10[i1][j1][i2][j2]
#define Qib11(i1,j1,i2,j2) Qib11[i1][j1][i2][j2]
#define Qinn01(i1,j1,i2,j2) Qinn01[i1][j1][i2][j2]
#define Qinn02(i1,j1,i2,j2) Qinn02[i1][j1][i2][j2]
#define Qinn10(i1,j1,i2,j2) Qinn10[i1][j1][i2][j2]
#define Qinn11(i1,j1,i2,j2) Qinn11[i1][j1][i2][j2]
#define Qinn12(i1,j1,i2,j2) Qinn12[i1][j1][i2][j2]
#define Qinn20(i1,j1,i2,j2) Qinn20[i1][j1][i2][j2]
#define Qinn21(i1,j1,i2,j2) Qinn21[i1][j1][i2][j2]
#define Qinn22(i1,j1,i2,j2) Qinn22[i1][j1][i2][j2]
#define Qind01(i1,j1,i2,j2) Qind01[i1][j1][i2][j2]
#define Qind10(i1,j1,i2,j2) Qind10[i1][j1][i2][j2]
#define Qind11(i1,j1,i2,j2) Qind11[i1][j1][i2][j2]
#define Qind20(i1,j1,i2,j2) Qind20[i1][j1][i2][j2]
#define Qind21(i1,j1,i2,j2) Qind21[i1][j1][i2][j2]
#define Qidn01(i1,j1,i2,j2) Qidn01[i1][j1][i2][j2]
#define Qidn02(i1,j1,i2,j2) Qidn02[i1][j1][i2][j2]
#define Qidn10(i1,j1,i2,j2) Qidn10[i1][j1][i2][j2]
#define Qidn11(i1,j1,i2,j2) Qidn11[i1][j1][i2][j2]
#define Qidn12(i1,j1,i2,j2) Qidn12[i1][j1][i2][j2]
#define Qidd01(i1,j1,i2,j2) Qidd01[i1][j1][i2][j2]
#define Qidd10(i1,j1,i2,j2) Qidd10[i1][j1][i2][j2]
#define Qidd11(i1,j1,i2,j2) Qidd11[i1][j1][i2][j2]
#define Qix00(i1,j1,i2,j2) Qix00[i1][j1][i2][j2]
#define Qix01(i1,j1,i2,j2) Qix01[i1][j1][i2][j2]
#define Qix10(i1,j1,i2,j2) Qix10[i1][j1][i2][j2]
#define Qix11(i1,j1,i2,j2) Qix11[i1][j1][i2][j2]
#define auxqiadd01(i1,j1,i2,j2) auxqiadd01[i1][j1][i2][j2]
#define auxqiadd10(i1,j1,i2,j2) auxqiadd10[i1][j1][i2][j2]
#define auxqiadd11(i1,j1,i2,j2) auxqiadd11[i1][j1][i2][j2]
#define auxqia01(i1,j1,i2,j2) auxqia01[i1][j1][i2][j2]
#define auxqia10(i1,j1,i2,j2) auxqia10[i1][j1][i2][j2]
#define auxqia11(i1,j1,i2,j2) auxqia11[i1][j1][i2][j2]
#define _flag_seq1(i) _flag_seq1[i]
#define _flag_Q00(i,j) _flag_Q00[i][j]
#define _flag_Q10(i,j) _flag_Q10[i][j]
#define _flag_Qi(i1,j1,i2,j2) _flag_Qi[i1][j1][i2][j2]
#define _flag_Qiy(i1,j1,i2,j2) _flag_Qiy[i1][j1][i2][j2]
#define _flag_Qixm00(i1,j1,i2,j2) _flag_Qixm00[i1][j1][i2][j2]
#define _flag_Qixm01(i1,j1,i2,j2) _flag_Qixm01[i1][j1][i2][j2]
#define _flag_Qixm02(i1,j1,i2,j2) _flag_Qixm02[i1][j1][i2][j2]
#define _flag_Qixm10(i1,j1,i2,j2) _flag_Qixm10[i1][j1][i2][j2]
#define _flag_Qixm11(i1,j1,i2,j2) _flag_Qixm11[i1][j1][i2][j2]
#define _flag_Qixm12(i1,j1,i2,j2) _flag_Qixm12[i1][j1][i2][j2]
#define _flag_Qixk00(i1,j1,i2,j2) _flag_Qixk00[i1][j1][i2][j2]
#define _flag_Qixk01(i1,j1,i2,j2) _flag_Qixk01[i1][j1][i2][j2]
#define _flag_Qixk10(i1,j1,i2,j2) _flag_Qixk10[i1][j1][i2][j2]
#define _flag_Qixk11(i1,j1,i2,j2) _flag_Qixk11[i1][j1][i2][j2]
#define _flag_Qimm02(i1,j1,i2,j2) _flag_Qimm02[i1][j1][i2][j2]
#define _flag_Qimm12(i1,j1,i2,j2) _flag_Qimm12[i1][j1][i2][j2]
#define _flag_Qimm20(i1,j1,i2,j2) _flag_Qimm20[i1][j1][i2][j2]
#define _flag_Qimm21(i1,j1,i2,j2) _flag_Qimm21[i1][j1][i2][j2]
#define _flag_Qimm22(i1,j1,i2,j2) _flag_Qimm22[i1][j1][i2][j2]
#define _flag_Qimk01(i1,j1,i2,j2) _flag_Qimk01[i1][j1][i2][j2]
#define _flag_Qimk11(i1,j1,i2,j2) _flag_Qimk11[i1][j1][i2][j2]
#define _flag_Qimk20(i1,j1,i2,j2) _flag_Qimk20[i1][j1][i2][j2]
#define _flag_Qimk21(i1,j1,i2,j2) _flag_Qimk21[i1][j1][i2][j2]
#define _flag_Qikm10(i1,j1,i2,j2) _flag_Qikm10[i1][j1][i2][j2]
#define _flag_Qikm11(i1,j1,i2,j2) _flag_Qikm11[i1][j1][i2][j2]
#define _flag_Qikm02(i1,j1,i2,j2) _flag_Qikm02[i1][j1][i2][j2]
#define _flag_Qikm12(i1,j1,i2,j2) _flag_Qikm12[i1][j1][i2][j2]
#define _flag_Qikk01(i1,j1,i2,j2) _flag_Qikk01[i1][j1][i2][j2]
#define _flag_Qikk10(i1,j1,i2,j2) _flag_Qikk10[i1][j1][i2][j2]
#define _flag_Qikk11(i1,j1,i2,j2) _flag_Qikk11[i1][j1][i2][j2]
#define _flag_Qiann01(i1,j1,i2,j2) _flag_Qiann01[i1][j1][i2][j2]
#define _flag_Qiann02(i1,j1,i2,j2) _flag_Qiann02[i1][j1][i2][j2]
#define _flag_Qiann10(i1,j1,i2,j2) _flag_Qiann10[i1][j1][i2][j2]
#define _flag_Qiann11(i1,j1,i2,j2) _flag_Qiann11[i1][j1][i2][j2]
#define _flag_Qiann12(i1,j1,i2,j2) _flag_Qiann12[i1][j1][i2][j2]
#define _flag_Qiann20(i1,j1,i2,j2) _flag_Qiann20[i1][j1][i2][j2]
#define _flag_Qiann21(i1,j1,i2,j2) _flag_Qiann21[i1][j1][i2][j2]
#define _flag_Qiann22(i1,j1,i2,j2) _flag_Qiann22[i1][j1][i2][j2]
#define _flag_Qiand01(i1,j1,i2,j2) _flag_Qiand01[i1][j1][i2][j2]
#define _flag_Qiand10(i1,j1,i2,j2) _flag_Qiand10[i1][j1][i2][j2]
#define _flag_Qiand11(i1,j1,i2,j2) _flag_Qiand11[i1][j1][i2][j2]
#define _flag_Qiand20(i1,j1,i2,j2) _flag_Qiand20[i1][j1][i2][j2]
#define _flag_Qiand21(i1,j1,i2,j2) _flag_Qiand21[i1][j1][i2][j2]
#define _flag_Qiadn01(i1,j1,i2,j2) _flag_Qiadn01[i1][j1][i2][j2]
#define _flag_Qiadn02(i1,j1,i2,j2) _flag_Qiadn02[i1][j1][i2][j2]
#define _flag_Qiadn10(i1,j1,i2,j2) _flag_Qiadn10[i1][j1][i2][j2]
#define _flag_Qiadn11(i1,j1,i2,j2) _flag_Qiadn11[i1][j1][i2][j2]
#define _flag_Qiadn12(i1,j1,i2,j2) _flag_Qiadn12[i1][j1][i2][j2]
#define _flag_Qiadd01(i1,j1,i2,j2) _flag_Qiadd01[i1][j1][i2][j2]
#define _flag_Qiadd10(i1,j1,i2,j2) _flag_Qiadd10[i1][j1][i2][j2]
#define _flag_Qiadd11(i1,j1,i2,j2) _flag_Qiadd11[i1][j1][i2][j2]
#define _flag_Qiar01(i1,j1,i2,j2) _flag_Qiar01[i1][j1][i2][j2]
#define _flag_Qiar10(i1,j1,i2,j2) _flag_Qiar10[i1][j1][i2][j2]
#define _flag_Qiar11(i1,j1,i2,j2) _flag_Qiar11[i1][j1][i2][j2]
#define _flag_Qilr01(i1,j1,i2,j2) _flag_Qilr01[i1][j1][i2][j2]
#define _flag_Qilr10(i1,j1,i2,j2) _flag_Qilr10[i1][j1][i2][j2]
#define _flag_Qilr11(i1,j1,i2,j2) _flag_Qilr11[i1][j1][i2][j2]
#define _flag_Qir01(i1,j1,i2,j2) _flag_Qir01[i1][j1][i2][j2]
#define _flag_Qir10(i1,j1,i2,j2) _flag_Qir10[i1][j1][i2][j2]
#define _flag_Qir11(i1,j1,i2,j2) _flag_Qir11[i1][j1][i2][j2]
#define _flag_Qia(i1,j1,i2,j2) _flag_Qia[i1][j1][i2][j2]
#define _flag_Qib00(i1,j1,i2,j2) _flag_Qib00[i1][j1][i2][j2]
#define _flag_Qib01(i1,j1,i2,j2) _flag_Qib01[i1][j1][i2][j2]
#define _flag_Qib10(i1,j1,i2,j2) _flag_Qib10[i1][j1][i2][j2]
#define _flag_Qib11(i1,j1,i2,j2) _flag_Qib11[i1][j1][i2][j2]
#define _flag_Qinn01(i1,j1,i2,j2) _flag_Qinn01[i1][j1][i2][j2]
#define _flag_Qinn02(i1,j1,i2,j2) _flag_Qinn02[i1][j1][i2][j2]
#define _flag_Qinn10(i1,j1,i2,j2) _flag_Qinn10[i1][j1][i2][j2]
#define _flag_Qinn11(i1,j1,i2,j2) _flag_Qinn11[i1][j1][i2][j2]
#define _flag_Qinn12(i1,j1,i2,j2) _flag_Qinn12[i1][j1][i2][j2]
#define _flag_Qinn20(i1,j1,i2,j2) _flag_Qinn20[i1][j1][i2][j2]
#define _flag_Qinn21(i1,j1,i2,j2) _flag_Qinn21[i1][j1][i2][j2]
#define _flag_Qinn22(i1,j1,i2,j2) _flag_Qinn22[i1][j1][i2][j2]
#define _flag_Qind01(i1,j1,i2,j2) _flag_Qind01[i1][j1][i2][j2]
#define _flag_Qind10(i1,j1,i2,j2) _flag_Qind10[i1][j1][i2][j2]
#define _flag_Qind11(i1,j1,i2,j2) _flag_Qind11[i1][j1][i2][j2]
#define _flag_Qind20(i1,j1,i2,j2) _flag_Qind20[i1][j1][i2][j2]
#define _flag_Qind21(i1,j1,i2,j2) _flag_Qind21[i1][j1][i2][j2]
#define _flag_Qidn01(i1,j1,i2,j2) _flag_Qidn01[i1][j1][i2][j2]
#define _flag_Qidn02(i1,j1,i2,j2) _flag_Qidn02[i1][j1][i2][j2]
#define _flag_Qidn10(i1,j1,i2,j2) _flag_Qidn10[i1][j1][i2][j2]
#define _flag_Qidn11(i1,j1,i2,j2) _flag_Qidn11[i1][j1][i2][j2]
#define _flag_Qidn12(i1,j1,i2,j2) _flag_Qidn12[i1][j1][i2][j2]
#define _flag_Qidd01(i1,j1,i2,j2) _flag_Qidd01[i1][j1][i2][j2]
#define _flag_Qidd10(i1,j1,i2,j2) _flag_Qidd10[i1][j1][i2][j2]
#define _flag_Qidd11(i1,j1,i2,j2) _flag_Qidd11[i1][j1][i2][j2]
#define _flag_Qix00(i1,j1,i2,j2) _flag_Qix00[i1][j1][i2][j2]
#define _flag_Qix01(i1,j1,i2,j2) _flag_Qix01[i1][j1][i2][j2]
#define _flag_Qix10(i1,j1,i2,j2) _flag_Qix10[i1][j1][i2][j2]
#define _flag_Qix11(i1,j1,i2,j2) _flag_Qix11[i1][j1][i2][j2]
#define _flag_auxqiadd01(i1,j1,i2,j2) _flag_auxqiadd01[i1][j1][i2][j2]
#define _flag_auxqiadd10(i1,j1,i2,j2) _flag_auxqiadd10[i1][j1][i2][j2]
#define _flag_auxqiadd11(i1,j1,i2,j2) _flag_auxqiadd11[i1][j1][i2][j2]
#define _flag_auxqia01(i1,j1,i2,j2) _flag_auxqia01[i1][j1][i2][j2]
#define _flag_auxqia10(i1,j1,i2,j2) _flag_auxqia10[i1][j1][i2][j2]
#define _flag_auxqia11(i1,j1,i2,j2) _flag_auxqia11[i1][j1][i2][j2]
#define _flag_Qb0(i,j) _flag_Qb0[i][j]
#define _flag_Qg0(i,j,d,e) _flag_Qg0[i][j][d][e]
#define _flag_tempqg0(i,j,d,e) _flag_tempqg0[i][j][d][e]
#define _flag_tempqgk0(i,j,d,e) _flag_tempqgk0[i][j][d][e]
#define _flag_tempqgm0(i,j,d,e) _flag_tempqgm0[i][j][d][e]
#define _flag_Qbr(i,j) _flag_Qbr[i][j]
#define _flag_Qgr(i,j,d,e) _flag_Qgr[i][j][d][e]
#define _flag_tempqgr(i,j,d,e) _flag_tempqgr[i][j][d][e]
#define _flag_tempqgkr(i,j,d,e) _flag_tempqgkr[i][j][d][e]
#define _flag_tempqgmr(i,j,d,e) _flag_tempqgmr[i][j][d][e]
#define _flag_Qm00(i,j) _flag_Qm00[i][j]
#define _flag_Qm10(i,j) _flag_Qm10[i][j]
#define _flag_Q0r(i,j) _flag_Q0r[i][j]
#define _flag_Q1r(i,j) _flag_Q1r[i][j]
#define _flag_Qm0r(i,j) _flag_Qm0r[i][j]
#define _flag_Qm1r(i,j) _flag_Qm1r[i][j]
#define _flag_Qgk1(i,j,d,e) _flag_Qgk1[i][j][d][e]
#define _flag_Qgm1(i,j,d,e) _flag_Qgm1[i][j][d][e]
#define _flag_Q01(i,j) _flag_Q01[i][j]
#define _flag_Q11(i,j) _flag_Q11[i][j]
#define _flag_Qm01(i,j) _flag_Qm01[i][j]
#define _flag_Qm11(i,j) _flag_Qm11[i][j]
#define _flag_Qih0(i1,j1,i2,j2) _flag_Qih0[i1][j1][i2][j2]
#define _flag_Qih1(i1,j1,i2,j2) _flag_Qih1[i1][j1][i2][j2]
#define _flag_Qihh00(i1,j1,i2,j2) _flag_Qihh00[i1][j1][i2][j2]
#define _flag_Qihh01(i1,j1,i2,j2) _flag_Qihh01[i1][j1][i2][j2]
#define _flag_Qihh10(i1,j1,i2,j2) _flag_Qihh10[i1][j1][i2][j2]
#define _flag_Qihh11(i1,j1,i2,j2) _flag_Qihh11[i1][j1][i2][j2]
#define _flag_Qihm00(i1,j1,i2,j2) _flag_Qihm00[i1][j1][i2][j2]
#define _flag_Qihm01(i1,j1,i2,j2) _flag_Qihm01[i1][j1][i2][j2]
#define _flag_Qihm10(i1,j1,i2,j2) _flag_Qihm10[i1][j1][i2][j2]
#define _flag_Qihm11(i1,j1,i2,j2) _flag_Qihm11[i1][j1][i2][j2]
#define _flag_Qgkr(i,j,d,e) _flag_Qgkr[i][j][d][e]
#define _flag_Qgmr(i,j,d,e) _flag_Qgmr[i][j][d][e]
#define _flag_Qgk0(i,j,d,e) _flag_Qgk0[i][j][d][e]
#define _flag_Qgm0(i,j,d,e) _flag_Qgm0[i][j][d][e]
#define _flag_Q20(i,j) _flag_Q20[i][j]
#define _flag_Qm20(i,j) _flag_Qm20[i][j]
#define _flag_Qm2r(i,j) _flag_Qm2r[i][j]
#define _flag_Q2r(i,j) _flag_Q2r[i][j]
#define _flag_Q21(i,j) _flag_Q21[i][j]
#define _flag_tempQiy1(i1,j1,i2,j2) _flag_tempQiy1[i1][j1][i2][j2]
#define _flag_tempQiy2(i1,j1,i2,j2) _flag_tempQiy2[i1][j1][i2][j2]
#define _flag_tempQixm001(i1,j1,i2,j2) _flag_tempQixm001[i1][j1][i2][j2]
#define _flag_tempQixm002(i1,j1,i2,j2) _flag_tempQixm002[i1][j1][i2][j2]
#define _flag_tempQixm011(i1,j1,i2,j2) _flag_tempQixm011[i1][j1][i2][j2]
#define _flag_tempQixm012(i1,j1,i2,j2) _flag_tempQixm012[i1][j1][i2][j2]
#define _flag_tempQixm021(i1,j1,i2,j2) _flag_tempQixm021[i1][j1][i2][j2]
#define _flag_tempQixm022(i1,j1,i2,j2) _flag_tempQixm022[i1][j1][i2][j2]
#define _flag_tempQixm101(i1,j1,i2,j2) _flag_tempQixm101[i1][j1][i2][j2]
#define _flag_tempQixm102(i1,j1,i2,j2) _flag_tempQixm102[i1][j1][i2][j2]
#define _flag_tempQixm111(i1,j1,i2,j2) _flag_tempQixm111[i1][j1][i2][j2]
#define _flag_tempQixm112(i1,j1,i2,j2) _flag_tempQixm112[i1][j1][i2][j2]
#define _flag_tempQixm121(i1,j1,i2,j2) _flag_tempQixm121[i1][j1][i2][j2]
#define _flag_tempQixm122(i1,j1,i2,j2) _flag_tempQixm122[i1][j1][i2][j2]
#define _flag_tempQixk001(i1,j1,i2,j2) _flag_tempQixk001[i1][j1][i2][j2]
#define _flag_tempQixk002(i1,j1,i2,j2) _flag_tempQixk002[i1][j1][i2][j2]
#define _flag_tempQixk011(i1,j1,i2,j2) _flag_tempQixk011[i1][j1][i2][j2]
#define _flag_tempQixk012(i1,j1,i2,j2) _flag_tempQixk012[i1][j1][i2][j2]
#define _flag_tempQixk101(i1,j1,i2,j2) _flag_tempQixk101[i1][j1][i2][j2]
#define _flag_tempQixk102(i1,j1,i2,j2) _flag_tempQixk102[i1][j1][i2][j2]
#define _flag_tempQixk111(i1,j1,i2,j2) _flag_tempQixk111[i1][j1][i2][j2]
#define _flag_tempQixk112(i1,j1,i2,j2) _flag_tempQixk112[i1][j1][i2][j2]
#define _flag_tempQimm021(i1,j1,i2,j2) _flag_tempQimm021[i1][j1][i2][j2]
#define _flag_tempQimm022(i1,j1,i2,j2) _flag_tempQimm022[i1][j1][i2][j2]
#define _flag_tempQimm023(i1,j1,i2,j2) _flag_tempQimm023[i1][j1][i2][j2]
#define _flag_tempQimm121(i1,j1,i2,j2) _flag_tempQimm121[i1][j1][i2][j2]
#define _flag_tempQimm122(i1,j1,i2,j2) _flag_tempQimm122[i1][j1][i2][j2]
#define _flag_tempQimm123(i1,j1,i2,j2) _flag_tempQimm123[i1][j1][i2][j2]
#define _flag_tempQimm201(i1,j1,i2,j2) _flag_tempQimm201[i1][j1][i2][j2]
#define _flag_tempQimm202(i1,j1,i2,j2) _flag_tempQimm202[i1][j1][i2][j2]
#define _flag_tempQimm203(i1,j1,i2,j2) _flag_tempQimm203[i1][j1][i2][j2]
#define _flag_tempQimm211(i1,j1,i2,j2) _flag_tempQimm211[i1][j1][i2][j2]
#define _flag_tempQimm212(i1,j1,i2,j2) _flag_tempQimm212[i1][j1][i2][j2]
#define _flag_tempQimm213(i1,j1,i2,j2) _flag_tempQimm213[i1][j1][i2][j2]
#define _flag_tempQimm221(i1,j1,i2,j2) _flag_tempQimm221[i1][j1][i2][j2]
#define _flag_tempQimm222(i1,j1,i2,j2) _flag_tempQimm222[i1][j1][i2][j2]
#define _flag_tempQimm223(i1,j1,i2,j2) _flag_tempQimm223[i1][j1][i2][j2]
#define _flag_tempQimk011(i1,j1,i2,j2) _flag_tempQimk011[i1][j1][i2][j2]
#define _flag_tempQimk012(i1,j1,i2,j2) _flag_tempQimk012[i1][j1][i2][j2]
#define _flag_tempQimk013(i1,j1,i2,j2) _flag_tempQimk013[i1][j1][i2][j2]
#define _flag_tempQimk014(i1,j1,i2,j2) _flag_tempQimk014[i1][j1][i2][j2]
#define _flag_tempQimk111(i1,j1,i2,j2) _flag_tempQimk111[i1][j1][i2][j2]
#define _flag_tempQimk112(i1,j1,i2,j2) _flag_tempQimk112[i1][j1][i2][j2]
#define _flag_tempQimk113(i1,j1,i2,j2) _flag_tempQimk113[i1][j1][i2][j2]
#define _flag_tempQimk114(i1,j1,i2,j2) _flag_tempQimk114[i1][j1][i2][j2]
#define _flag_tempQimk201(i1,j1,i2,j2) _flag_tempQimk201[i1][j1][i2][j2]
#define _flag_tempQimk202(i1,j1,i2,j2) _flag_tempQimk202[i1][j1][i2][j2]
#define _flag_tempQimk203(i1,j1,i2,j2) _flag_tempQimk203[i1][j1][i2][j2]
#define _flag_tempQimk204(i1,j1,i2,j2) _flag_tempQimk204[i1][j1][i2][j2]
#define _flag_tempQimk211(i1,j1,i2,j2) _flag_tempQimk211[i1][j1][i2][j2]
#define _flag_tempQimk212(i1,j1,i2,j2) _flag_tempQimk212[i1][j1][i2][j2]
#define _flag_tempQimk213(i1,j1,i2,j2) _flag_tempQimk213[i1][j1][i2][j2]
#define _flag_tempQimk214(i1,j1,i2,j2) _flag_tempQimk214[i1][j1][i2][j2]
#define _flag_tempQikm101(i1,j1,i2,j2) _flag_tempQikm101[i1][j1][i2][j2]
#define _flag_tempQikm102(i1,j1,i2,j2) _flag_tempQikm102[i1][j1][i2][j2]
#define _flag_tempQikm103(i1,j1,i2,j2) _flag_tempQikm103[i1][j1][i2][j2]
#define _flag_tempQikm104(i1,j1,i2,j2) _flag_tempQikm104[i1][j1][i2][j2]
#define _flag_tempQikm111(i1,j1,i2,j2) _flag_tempQikm111[i1][j1][i2][j2]
#define _flag_tempQikm112(i1,j1,i2,j2) _flag_tempQikm112[i1][j1][i2][j2]
#define _flag_tempQikm113(i1,j1,i2,j2) _flag_tempQikm113[i1][j1][i2][j2]
#define _flag_tempQikm114(i1,j1,i2,j2) _flag_tempQikm114[i1][j1][i2][j2]
#define _flag_tempQikm021(i1,j1,i2,j2) _flag_tempQikm021[i1][j1][i2][j2]
#define _flag_tempQikm022(i1,j1,i2,j2) _flag_tempQikm022[i1][j1][i2][j2]
#define _flag_tempQikm023(i1,j1,i2,j2) _flag_tempQikm023[i1][j1][i2][j2]
#define _flag_tempQikm024(i1,j1,i2,j2) _flag_tempQikm024[i1][j1][i2][j2]
#define _flag_tempQikm121(i1,j1,i2,j2) _flag_tempQikm121[i1][j1][i2][j2]
#define _flag_tempQikm122(i1,j1,i2,j2) _flag_tempQikm122[i1][j1][i2][j2]
#define _flag_tempQikm123(i1,j1,i2,j2) _flag_tempQikm123[i1][j1][i2][j2]
#define _flag_tempQikm124(i1,j1,i2,j2) _flag_tempQikm124[i1][j1][i2][j2]
#define _flag_tempQikk011(i1,j1,i2,j2) _flag_tempQikk011[i1][j1][i2][j2]
#define _flag_tempQikk012(i1,j1,i2,j2) _flag_tempQikk012[i1][j1][i2][j2]
#define _flag_tempQikk013(i1,j1,i2,j2) _flag_tempQikk013[i1][j1][i2][j2]
#define _flag_tempQikk014(i1,j1,i2,j2) _flag_tempQikk014[i1][j1][i2][j2]
#define _flag_tempQikk015(i1,j1,i2,j2) _flag_tempQikk015[i1][j1][i2][j2]
#define _flag_tempQikk101(i1,j1,i2,j2) _flag_tempQikk101[i1][j1][i2][j2]
#define _flag_tempQikk102(i1,j1,i2,j2) _flag_tempQikk102[i1][j1][i2][j2]
#define _flag_tempQikk103(i1,j1,i2,j2) _flag_tempQikk103[i1][j1][i2][j2]
#define _flag_tempQikk104(i1,j1,i2,j2) _flag_tempQikk104[i1][j1][i2][j2]
#define _flag_tempQikk105(i1,j1,i2,j2) _flag_tempQikk105[i1][j1][i2][j2]
#define _flag_tempQikk111(i1,j1,i2,j2) _flag_tempQikk111[i1][j1][i2][j2]
#define _flag_tempQikk112(i1,j1,i2,j2) _flag_tempQikk112[i1][j1][i2][j2]
#define _flag_tempQikk113(i1,j1,i2,j2) _flag_tempQikk113[i1][j1][i2][j2]
#define _flag_tempQikk114(i1,j1,i2,j2) _flag_tempQikk114[i1][j1][i2][j2]
#define _flag_tempQikk115(i1,j1,i2,j2) _flag_tempQikk115[i1][j1][i2][j2]
#define _flag_tempQiann011(i1,j1,i2,j2) _flag_tempQiann011[i1][j1][i2][j2]
#define _flag_tempQiann012(i1,j1,i2,j2) _flag_tempQiann012[i1][j1][i2][j2]
#define _flag_tempQiann013(i1,j1,i2,j2) _flag_tempQiann013[i1][j1][i2][j2]
#define _flag_tempQiann014(i1,j1,i2,j2) _flag_tempQiann014[i1][j1][i2][j2]
#define _flag_tempQiann015(i1,j1,i2,j2) _flag_tempQiann015[i1][j1][i2][j2]
#define _flag_tempQiann016(i1,j1,i2,j2) _flag_tempQiann016[i1][j1][i2][j2]
#define _flag_tempQiann021(i1,j1,i2,j2) _flag_tempQiann021[i1][j1][i2][j2]
#define _flag_tempQiann022(i1,j1,i2,j2) _flag_tempQiann022[i1][j1][i2][j2]
#define _flag_tempQiann023(i1,j1,i2,j2) _flag_tempQiann023[i1][j1][i2][j2]
#define _flag_tempQiann024(i1,j1,i2,j2) _flag_tempQiann024[i1][j1][i2][j2]
#define _flag_tempQiann025(i1,j1,i2,j2) _flag_tempQiann025[i1][j1][i2][j2]
#define _flag_tempQiann026(i1,j1,i2,j2) _flag_tempQiann026[i1][j1][i2][j2]
#define _flag_tempQiann101(i1,j1,i2,j2) _flag_tempQiann101[i1][j1][i2][j2]
#define _flag_tempQiann102(i1,j1,i2,j2) _flag_tempQiann102[i1][j1][i2][j2]
#define _flag_tempQiann103(i1,j1,i2,j2) _flag_tempQiann103[i1][j1][i2][j2]
#define _flag_tempQiann104(i1,j1,i2,j2) _flag_tempQiann104[i1][j1][i2][j2]
#define _flag_tempQiann105(i1,j1,i2,j2) _flag_tempQiann105[i1][j1][i2][j2]
#define _flag_tempQiann106(i1,j1,i2,j2) _flag_tempQiann106[i1][j1][i2][j2]
#define _flag_tempQiann111(i1,j1,i2,j2) _flag_tempQiann111[i1][j1][i2][j2]
#define _flag_tempQiann112(i1,j1,i2,j2) _flag_tempQiann112[i1][j1][i2][j2]
#define _flag_tempQiann113(i1,j1,i2,j2) _flag_tempQiann113[i1][j1][i2][j2]
#define _flag_tempQiann114(i1,j1,i2,j2) _flag_tempQiann114[i1][j1][i2][j2]
#define _flag_tempQiann115(i1,j1,i2,j2) _flag_tempQiann115[i1][j1][i2][j2]
#define _flag_tempQiann116(i1,j1,i2,j2) _flag_tempQiann116[i1][j1][i2][j2]
#define _flag_tempQiann121(i1,j1,i2,j2) _flag_tempQiann121[i1][j1][i2][j2]
#define _flag_tempQiann122(i1,j1,i2,j2) _flag_tempQiann122[i1][j1][i2][j2]
#define _flag_tempQiann123(i1,j1,i2,j2) _flag_tempQiann123[i1][j1][i2][j2]
#define _flag_tempQiann124(i1,j1,i2,j2) _flag_tempQiann124[i1][j1][i2][j2]
#define _flag_tempQiann125(i1,j1,i2,j2) _flag_tempQiann125[i1][j1][i2][j2]
#define _flag_tempQiann126(i1,j1,i2,j2) _flag_tempQiann126[i1][j1][i2][j2]
#define _flag_tempQiann201(i1,j1,i2,j2) _flag_tempQiann201[i1][j1][i2][j2]
#define _flag_tempQiann202(i1,j1,i2,j2) _flag_tempQiann202[i1][j1][i2][j2]
#define _flag_tempQiann203(i1,j1,i2,j2) _flag_tempQiann203[i1][j1][i2][j2]
#define _flag_tempQiann204(i1,j1,i2,j2) _flag_tempQiann204[i1][j1][i2][j2]
#define _flag_tempQiann205(i1,j1,i2,j2) _flag_tempQiann205[i1][j1][i2][j2]
#define _flag_tempQiann206(i1,j1,i2,j2) _flag_tempQiann206[i1][j1][i2][j2]
#define _flag_tempQiann211(i1,j1,i2,j2) _flag_tempQiann211[i1][j1][i2][j2]
#define _flag_tempQiann212(i1,j1,i2,j2) _flag_tempQiann212[i1][j1][i2][j2]
#define _flag_tempQiann213(i1,j1,i2,j2) _flag_tempQiann213[i1][j1][i2][j2]
#define _flag_tempQiann214(i1,j1,i2,j2) _flag_tempQiann214[i1][j1][i2][j2]
#define _flag_tempQiann215(i1,j1,i2,j2) _flag_tempQiann215[i1][j1][i2][j2]
#define _flag_tempQiann216(i1,j1,i2,j2) _flag_tempQiann216[i1][j1][i2][j2]
#define _flag_tempQiann221(i1,j1,i2,j2) _flag_tempQiann221[i1][j1][i2][j2]
#define _flag_tempQiann222(i1,j1,i2,j2) _flag_tempQiann222[i1][j1][i2][j2]
#define _flag_tempQiann223(i1,j1,i2,j2) _flag_tempQiann223[i1][j1][i2][j2]
#define _flag_tempQiann224(i1,j1,i2,j2) _flag_tempQiann224[i1][j1][i2][j2]
#define _flag_tempQiann225(i1,j1,i2,j2) _flag_tempQiann225[i1][j1][i2][j2]
#define _flag_tempQiann226(i1,j1,i2,j2) _flag_tempQiann226[i1][j1][i2][j2]
#define _flag_tempQiand011(i1,j1,i2,j2) _flag_tempQiand011[i1][j1][i2][j2]
#define _flag_tempQiand012(i1,j1,i2,j2) _flag_tempQiand012[i1][j1][i2][j2]
#define _flag_tempQiand013(i1,j1,i2,j2) _flag_tempQiand013[i1][j1][i2][j2]
#define _flag_tempQiand014(i1,j1,i2,j2) _flag_tempQiand014[i1][j1][i2][j2]
#define _flag_tempQiand015(i1,j1,i2,j2) _flag_tempQiand015[i1][j1][i2][j2]
#define _flag_tempQiand101(i1,j1,i2,j2) _flag_tempQiand101[i1][j1][i2][j2]
#define _flag_tempQiand102(i1,j1,i2,j2) _flag_tempQiand102[i1][j1][i2][j2]
#define _flag_tempQiand103(i1,j1,i2,j2) _flag_tempQiand103[i1][j1][i2][j2]
#define _flag_tempQiand104(i1,j1,i2,j2) _flag_tempQiand104[i1][j1][i2][j2]
#define _flag_tempQiand105(i1,j1,i2,j2) _flag_tempQiand105[i1][j1][i2][j2]
#define _flag_tempQiand111(i1,j1,i2,j2) _flag_tempQiand111[i1][j1][i2][j2]
#define _flag_tempQiand112(i1,j1,i2,j2) _flag_tempQiand112[i1][j1][i2][j2]
#define _flag_tempQiand113(i1,j1,i2,j2) _flag_tempQiand113[i1][j1][i2][j2]
#define _flag_tempQiand114(i1,j1,i2,j2) _flag_tempQiand114[i1][j1][i2][j2]
#define _flag_tempQiand115(i1,j1,i2,j2) _flag_tempQiand115[i1][j1][i2][j2]
#define _flag_tempQiand201(i1,j1,i2,j2) _flag_tempQiand201[i1][j1][i2][j2]
#define _flag_tempQiand202(i1,j1,i2,j2) _flag_tempQiand202[i1][j1][i2][j2]
#define _flag_tempQiand203(i1,j1,i2,j2) _flag_tempQiand203[i1][j1][i2][j2]
#define _flag_tempQiand204(i1,j1,i2,j2) _flag_tempQiand204[i1][j1][i2][j2]
#define _flag_tempQiand205(i1,j1,i2,j2) _flag_tempQiand205[i1][j1][i2][j2]
#define _flag_tempQiand211(i1,j1,i2,j2) _flag_tempQiand211[i1][j1][i2][j2]
#define _flag_tempQiand212(i1,j1,i2,j2) _flag_tempQiand212[i1][j1][i2][j2]
#define _flag_tempQiand213(i1,j1,i2,j2) _flag_tempQiand213[i1][j1][i2][j2]
#define _flag_tempQiand214(i1,j1,i2,j2) _flag_tempQiand214[i1][j1][i2][j2]
#define _flag_tempQiand215(i1,j1,i2,j2) _flag_tempQiand215[i1][j1][i2][j2]
#define _flag_tempQiadn011(i1,j1,i2,j2) _flag_tempQiadn011[i1][j1][i2][j2]
#define _flag_tempQiadn012(i1,j1,i2,j2) _flag_tempQiadn012[i1][j1][i2][j2]
#define _flag_tempQiadn013(i1,j1,i2,j2) _flag_tempQiadn013[i1][j1][i2][j2]
#define _flag_tempQiadn014(i1,j1,i2,j2) _flag_tempQiadn014[i1][j1][i2][j2]
#define _flag_tempQiadn015(i1,j1,i2,j2) _flag_tempQiadn015[i1][j1][i2][j2]
#define _flag_tempQiadn021(i1,j1,i2,j2) _flag_tempQiadn021[i1][j1][i2][j2]
#define _flag_tempQiadn022(i1,j1,i2,j2) _flag_tempQiadn022[i1][j1][i2][j2]
#define _flag_tempQiadn023(i1,j1,i2,j2) _flag_tempQiadn023[i1][j1][i2][j2]
#define _flag_tempQiadn024(i1,j1,i2,j2) _flag_tempQiadn024[i1][j1][i2][j2]
#define _flag_tempQiadn025(i1,j1,i2,j2) _flag_tempQiadn025[i1][j1][i2][j2]
#define _flag_tempQiadn101(i1,j1,i2,j2) _flag_tempQiadn101[i1][j1][i2][j2]
#define _flag_tempQiadn102(i1,j1,i2,j2) _flag_tempQiadn102[i1][j1][i2][j2]
#define _flag_tempQiadn103(i1,j1,i2,j2) _flag_tempQiadn103[i1][j1][i2][j2]
#define _flag_tempQiadn104(i1,j1,i2,j2) _flag_tempQiadn104[i1][j1][i2][j2]
#define _flag_tempQiadn105(i1,j1,i2,j2) _flag_tempQiadn105[i1][j1][i2][j2]
#define _flag_tempQiadn111(i1,j1,i2,j2) _flag_tempQiadn111[i1][j1][i2][j2]
#define _flag_tempQiadn112(i1,j1,i2,j2) _flag_tempQiadn112[i1][j1][i2][j2]
#define _flag_tempQiadn113(i1,j1,i2,j2) _flag_tempQiadn113[i1][j1][i2][j2]
#define _flag_tempQiadn114(i1,j1,i2,j2) _flag_tempQiadn114[i1][j1][i2][j2]
#define _flag_tempQiadn115(i1,j1,i2,j2) _flag_tempQiadn115[i1][j1][i2][j2]
#define _flag_tempQiadn121(i1,j1,i2,j2) _flag_tempQiadn121[i1][j1][i2][j2]
#define _flag_tempQiadn122(i1,j1,i2,j2) _flag_tempQiadn122[i1][j1][i2][j2]
#define _flag_tempQiadn123(i1,j1,i2,j2) _flag_tempQiadn123[i1][j1][i2][j2]
#define _flag_tempQiadn124(i1,j1,i2,j2) _flag_tempQiadn124[i1][j1][i2][j2]
#define _flag_tempQiadn125(i1,j1,i2,j2) _flag_tempQiadn125[i1][j1][i2][j2]
#define _flag_tempQiadd011(i1,j1,i2,j2) _flag_tempQiadd011[i1][j1][i2][j2]
#define _flag_tempQiadd012(i1,j1,i2,j2) _flag_tempQiadd012[i1][j1][i2][j2]
#define _flag_tempQiadd013(i1,j1,i2,j2) _flag_tempQiadd013[i1][j1][i2][j2]
#define _flag_tempQiadd014(i1,j1,i2,j2) _flag_tempQiadd014[i1][j1][i2][j2]
#define _flag_tempQiadd015(i1,j1,i2,j2) _flag_tempQiadd015[i1][j1][i2][j2]
#define _flag_tempQiadd101(i1,j1,i2,j2) _flag_tempQiadd101[i1][j1][i2][j2]
#define _flag_tempQiadd102(i1,j1,i2,j2) _flag_tempQiadd102[i1][j1][i2][j2]
#define _flag_tempQiadd103(i1,j1,i2,j2) _flag_tempQiadd103[i1][j1][i2][j2]
#define _flag_tempQiadd104(i1,j1,i2,j2) _flag_tempQiadd104[i1][j1][i2][j2]
#define _flag_tempQiadd105(i1,j1,i2,j2) _flag_tempQiadd105[i1][j1][i2][j2]
#define _flag_tempQiadd111(i1,j1,i2,j2) _flag_tempQiadd111[i1][j1][i2][j2]
#define _flag_tempQiadd112(i1,j1,i2,j2) _flag_tempQiadd112[i1][j1][i2][j2]
#define _flag_tempQiadd113(i1,j1,i2,j2) _flag_tempQiadd113[i1][j1][i2][j2]
#define _flag_tempQiadd114(i1,j1,i2,j2) _flag_tempQiadd114[i1][j1][i2][j2]
#define _flag_tempQiadd115(i1,j1,i2,j2) _flag_tempQiadd115[i1][j1][i2][j2]
#define _flag_tempQir011(i1,j1,i2,j2) _flag_tempQir011[i1][j1][i2][j2]
#define _flag_tempQir012(i1,j1,i2,j2) _flag_tempQir012[i1][j1][i2][j2]
#define _flag_tempQir101(i1,j1,i2,j2) _flag_tempQir101[i1][j1][i2][j2]
#define _flag_tempQir102(i1,j1,i2,j2) _flag_tempQir102[i1][j1][i2][j2]
#define _flag_tempQir111(i1,j1,i2,j2) _flag_tempQir111[i1][j1][i2][j2]
#define _flag_tempQir112(i1,j1,i2,j2) _flag_tempQir112[i1][j1][i2][j2]
#define _flag_tempQiar011(i1,j1,i2,j2) _flag_tempQiar011[i1][j1][i2][j2]
#define _flag_tempQiar012(i1,j1,i2,j2) _flag_tempQiar012[i1][j1][i2][j2]
#define _flag_tempQiar013(i1,j1,i2,j2) _flag_tempQiar013[i1][j1][i2][j2]
#define _flag_tempQiar101(i1,j1,i2,j2) _flag_tempQiar101[i1][j1][i2][j2]
#define _flag_tempQiar102(i1,j1,i2,j2) _flag_tempQiar102[i1][j1][i2][j2]
#define _flag_tempQiar103(i1,j1,i2,j2) _flag_tempQiar103[i1][j1][i2][j2]
#define _flag_tempQiar111(i1,j1,i2,j2) _flag_tempQiar111[i1][j1][i2][j2]
#define _flag_tempQiar112(i1,j1,i2,j2) _flag_tempQiar112[i1][j1][i2][j2]
#define _flag_tempQiar113(i1,j1,i2,j2) _flag_tempQiar113[i1][j1][i2][j2]
#define _flag_tempQilr011(i1,j1,i2,j2) _flag_tempQilr011[i1][j1][i2][j2]
#define _flag_tempQilr012(i1,j1,i2,j2) _flag_tempQilr012[i1][j1][i2][j2]
#define _flag_tempQilr101(i1,j1,i2,j2) _flag_tempQilr101[i1][j1][i2][j2]
#define _flag_tempQilr102(i1,j1,i2,j2) _flag_tempQilr102[i1][j1][i2][j2]
#define _flag_tempQilr111(i1,j1,i2,j2) _flag_tempQilr111[i1][j1][i2][j2]
#define _flag_tempQilr112(i1,j1,i2,j2) _flag_tempQilr112[i1][j1][i2][j2]
#define _flag_tempQi1(i1,j1,i2,j2) _flag_tempQi1[i1][j1][i2][j2]
#define _flag_tempQi2(i1,j1,i2,j2) _flag_tempQi2[i1][j1][i2][j2]
#define _flag_tempQia1(i1,j1,i2,j2) _flag_tempQia1[i1][j1][i2][j2]
#define _flag_tempQia2(i1,j1,i2,j2) _flag_tempQia2[i1][j1][i2][j2]
#define _flag_tempQia3(i1,j1,i2,j2) _flag_tempQia3[i1][j1][i2][j2]
#define _flag_tempQia4(i1,j1,i2,j2) _flag_tempQia4[i1][j1][i2][j2]
#define _flag_tempQia5(i1,j1,i2,j2) _flag_tempQia5[i1][j1][i2][j2]
#define _flag_tempQia6(i1,j1,i2,j2) _flag_tempQia6[i1][j1][i2][j2]
#define _flag_tempQib001(i1,j1,i2,j2) _flag_tempQib001[i1][j1][i2][j2]
#define _flag_tempQib002(i1,j1,i2,j2) _flag_tempQib002[i1][j1][i2][j2]
#define _flag_tempQib011(i1,j1,i2,j2) _flag_tempQib011[i1][j1][i2][j2]
#define _flag_tempQib012(i1,j1,i2,j2) _flag_tempQib012[i1][j1][i2][j2]
#define _flag_tempQib101(i1,j1,i2,j2) _flag_tempQib101[i1][j1][i2][j2]
#define _flag_tempQib102(i1,j1,i2,j2) _flag_tempQib102[i1][j1][i2][j2]
#define _flag_tempQib111(i1,j1,i2,j2) _flag_tempQib111[i1][j1][i2][j2]
#define _flag_tempQib112(i1,j1,i2,j2) _flag_tempQib112[i1][j1][i2][j2]
#define _flag_tempQinn011(i1,j1,i2,j2) _flag_tempQinn011[i1][j1][i2][j2]
#define _flag_tempQinn021(i1,j1,i2,j2) _flag_tempQinn021[i1][j1][i2][j2]
#define _flag_tempQinn101(i1,j1,i2,j2) _flag_tempQinn101[i1][j1][i2][j2]
#define _flag_tempQinn111(i1,j1,i2,j2) _flag_tempQinn111[i1][j1][i2][j2]
#define _flag_tempQinn121(i1,j1,i2,j2) _flag_tempQinn121[i1][j1][i2][j2]
#define _flag_tempQinn201(i1,j1,i2,j2) _flag_tempQinn201[i1][j1][i2][j2]
#define _flag_tempQinn211(i1,j1,i2,j2) _flag_tempQinn211[i1][j1][i2][j2]
#define _flag_tempQinn221(i1,j1,i2,j2) _flag_tempQinn221[i1][j1][i2][j2]
#define _flag_tempQidd011(i1,j1,i2,j2) _flag_tempQidd011[i1][j1][i2][j2]
#define _flag_tempQidd101(i1,j1,i2,j2) _flag_tempQidd101[i1][j1][i2][j2]
#define _flag_tempQidd111(i1,j1,i2,j2) _flag_tempQidd111[i1][j1][i2][j2]
#define _flag_tempQidd012(i1,j1,i2,j2) _flag_tempQidd012[i1][j1][i2][j2]
#define _flag_tempQidd102(i1,j1,i2,j2) _flag_tempQidd102[i1][j1][i2][j2]
#define _flag_tempQidd112(i1,j1,i2,j2) _flag_tempQidd112[i1][j1][i2][j2]

void piRNAb2(Energy *en,long N, long M, long MHL,unsigned char* _local_seq0,unsigned char* _local_seqr,unsigned char* _local_seq1, double** _local_Q00, double** _local_Q10, double**** _local_Qi, double**** _local_Qiy, double**** _local_Qixm00, double**** _local_Qixm01, double**** _local_Qixm02, double**** _local_Qixm10, double**** _local_Qixm11, double**** _local_Qixm12, double**** _local_Qixk00, double**** _local_Qixk01, double**** _local_Qixk10, double**** _local_Qixk11, double**** _local_Qimm02, double**** _local_Qimm12, double**** _local_Qimm20, double**** _local_Qimm21, double**** _local_Qimm22, double**** _local_Qimk01, double**** _local_Qimk11, double**** _local_Qimk20, double**** _local_Qimk21, double**** _local_Qikm10, double**** _local_Qikm11, double**** _local_Qikm02, double**** _local_Qikm12, double**** _local_Qikk01, double**** _local_Qikk10, double**** _local_Qikk11, double**** _local_Qiann01, double**** _local_Qiann02, double**** _local_Qiann10, double**** _local_Qiann11, double**** _local_Qiann12, double**** _local_Qiann20, double**** _local_Qiann21, double**** _local_Qiann22, double**** _local_Qiand01, double**** _local_Qiand10, double**** _local_Qiand11, double**** _local_Qiand20, double**** _local_Qiand21, double**** _local_Qiadn01, double**** _local_Qiadn02, double**** _local_Qiadn10, double**** _local_Qiadn11, double**** _local_Qiadn12, double**** _local_Qiadd01, double**** _local_Qiadd10, double**** _local_Qiadd11, double**** _local_Qiar01, double**** _local_Qiar10, double**** _local_Qiar11, double**** _local_Qilr01, double**** _local_Qilr10, double**** _local_Qilr11, double**** _local_Qir01, double**** _local_Qir10, double**** _local_Qir11, double**** _local_Qia, double**** _local_Qib00, double**** _local_Qib01, double**** _local_Qib10, double**** _local_Qib11, double**** _local_Qinn01, double**** _local_Qinn02, double**** _local_Qinn10, double**** _local_Qinn11, double**** _local_Qinn12, double**** _local_Qinn20, double**** _local_Qinn21, double**** _local_Qinn22, double**** _local_Qind01, double**** _local_Qind10, double**** _local_Qind11, double**** _local_Qind20, double**** _local_Qind21, double**** _local_Qidn01, double**** _local_Qidn02, double**** _local_Qidn10, double**** _local_Qidn11, double**** _local_Qidn12, double**** _local_Qidd01, double**** _local_Qidd10, double**** _local_Qidd11, double**** _local_Qix00, double**** _local_Qix01, double**** _local_Qix10, double**** _local_Qix11, double**** _local_auxqiadd01, double**** _local_auxqiadd10, double**** _local_auxqiadd11, double**** _local_auxqia01, double**** _local_auxqia10, double**** _local_auxqia11){
	///Parameter checking
	if (!((N >= 9 && M >= 9 && MHL >= 11))) {
		printf("The value of parameters are not valid.\n");
		exit(-1);
	}
	//Copy to global
	energy=en;
	RT = energy->getRT();
	seq0 = _local_seq0;
	seqr = _local_seqr;
	seq1 = _local_seq1;
	Q00 = _local_Q00;
	Q10 = _local_Q10;
	Qi = _local_Qi;
	Qiy = _local_Qiy;
	Qixm00 = _local_Qixm00;
	Qixm01 = _local_Qixm01;
	Qixm02 = _local_Qixm02;
	Qixm10 = _local_Qixm10;
	Qixm11 = _local_Qixm11;
	Qixm12 = _local_Qixm12;
	Qixk00 = _local_Qixk00;
	Qixk01 = _local_Qixk01;
	Qixk10 = _local_Qixk10;
	Qixk11 = _local_Qixk11;
	Qimm02 = _local_Qimm02;
	Qimm12 = _local_Qimm12;
	Qimm20 = _local_Qimm20;
	Qimm21 = _local_Qimm21;
	Qimm22 = _local_Qimm22;
	Qimk01 = _local_Qimk01;
	Qimk11 = _local_Qimk11;
	Qimk20 = _local_Qimk20;
	Qimk21 = _local_Qimk21;
	Qikm10 = _local_Qikm10;
	Qikm11 = _local_Qikm11;
	Qikm02 = _local_Qikm02;
	Qikm12 = _local_Qikm12;
	Qikk01 = _local_Qikk01;
	Qikk10 = _local_Qikk10;
	Qikk11 = _local_Qikk11;
	Qiann01 = _local_Qiann01;
	Qiann02 = _local_Qiann02;
	Qiann10 = _local_Qiann10;
	Qiann11 = _local_Qiann11;
	Qiann12 = _local_Qiann12;
	Qiann20 = _local_Qiann20;
	Qiann21 = _local_Qiann21;
	Qiann22 = _local_Qiann22;
	Qiand01 = _local_Qiand01;
	Qiand10 = _local_Qiand10;
	Qiand11 = _local_Qiand11;
	Qiand20 = _local_Qiand20;
	Qiand21 = _local_Qiand21;
	Qiadn01 = _local_Qiadn01;
	Qiadn02 = _local_Qiadn02;
	Qiadn10 = _local_Qiadn10;
	Qiadn11 = _local_Qiadn11;
	Qiadn12 = _local_Qiadn12;
	Qiadd01 = _local_Qiadd01;
	Qiadd10 = _local_Qiadd10;
	Qiadd11 = _local_Qiadd11;
	Qiar01 = _local_Qiar01;
	Qiar10 = _local_Qiar10;
	Qiar11 = _local_Qiar11;
	Qilr01 = _local_Qilr01;
	Qilr10 = _local_Qilr10;
	Qilr11 = _local_Qilr11;
	Qir01 = _local_Qir01;
	Qir10 = _local_Qir10;
	Qir11 = _local_Qir11;
	Qia = _local_Qia;
	Qib00 = _local_Qib00;
	Qib01 = _local_Qib01;
	Qib10 = _local_Qib10;
	Qib11 = _local_Qib11;
	Qinn01 = _local_Qinn01;
	Qinn02 = _local_Qinn02;
	Qinn10 = _local_Qinn10;
	Qinn11 = _local_Qinn11;
	Qinn12 = _local_Qinn12;
	Qinn20 = _local_Qinn20;
	Qinn21 = _local_Qinn21;
	Qinn22 = _local_Qinn22;
	Qind01 = _local_Qind01;
	Qind10 = _local_Qind10;
	Qind11 = _local_Qind11;
	Qind20 = _local_Qind20;
	Qind21 = _local_Qind21;
	Qidn01 = _local_Qidn01;
	Qidn02 = _local_Qidn02;
	Qidn10 = _local_Qidn10;
	Qidn11 = _local_Qidn11;
	Qidn12 = _local_Qidn12;
	Qidd01 = _local_Qidd01;
	Qidd10 = _local_Qidd10;
	Qidd11 = _local_Qidd11;
	Qix00 = _local_Qix00;
	Qix01 = _local_Qix01;
	Qix10 = _local_Qix10;
	Qix11 = _local_Qix11;
	auxqiadd01 = _local_auxqiadd01;
	auxqiadd10 = _local_auxqiadd10;
	auxqiadd11 = _local_auxqiadd11;
	auxqia01 = _local_auxqia01;
	auxqia10 = _local_auxqia10;
	auxqia11 = _local_auxqia11;
	
	//Memory Allocation
	int mz1, mz2, mz3, mz4;
	
	double* _lin_Qb0 = (double*)malloc(sizeof(double)*((N) * (N)));
	mallocCheck(_lin_Qb0, ((N) * (N)), double);
	Qb0 = (double**)malloc(sizeof(double*)*(N));
	mallocCheck(Qb0, (N), double*);
	for (mz1=0;mz1 < N; mz1++) {
		Qb0[mz1] = &_lin_Qb0[(mz1*(N))];
	}
	
	double* _lin_Qg0 = (double*)malloc(sizeof(double)*((N-6) * (N) * (N-5) * (N-1)));
	mallocCheck(_lin_Qg0, ((N-6) * (N) * (N-5) * (N-1)), double);
	Qg0 = (double****)malloc(sizeof(double***)*(N-6));
	mallocCheck(Qg0, (N-6), double***);
	for (mz1=0;mz1 < N-6; mz1++) {
		Qg0[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(Qg0[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			Qg0[mz1][mz2] = (double**)malloc(sizeof(double*)*(N-5));
			mallocCheck(Qg0[mz1][mz2], (N-5), double*);
			for (mz3=0;mz3 < N-5; mz3++) {
				Qg0[mz1][mz2][mz3] = &_lin_Qg0[(mz1*((N) * (N-5) * (N-1))) + (mz2*((N-5) * (N-1))) + (mz3*(N-1))];
			}
		}
	}
	
	double* _lin_tempqg0 = (double*)malloc(sizeof(double)*((N-8) * (N) * (N-6) * (N-2)));
	mallocCheck(_lin_tempqg0, ((N-8) * (N) * (N-6) * (N-2)), double);
	tempqg0 = (double****)malloc(sizeof(double***)*(N-8));
	mallocCheck(tempqg0, (N-8), double***);
	for (mz1=0;mz1 < N-8; mz1++) {
		tempqg0[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempqg0[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempqg0[mz1][mz2] = (double**)malloc(sizeof(double*)*(N-6));
			mallocCheck(tempqg0[mz1][mz2], (N-6), double*);
			for (mz3=0;mz3 < N-6; mz3++) {
				tempqg0[mz1][mz2][mz3] = &_lin_tempqg0[(mz1*((N) * (N-6) * (N-2))) + (mz2*((N-6) * (N-2))) + (mz3*(N-2))];
			}
		}
	}
	
	double* _lin_tempqgk0 = (double*)malloc(sizeof(double)*((N-4) * (N) * (N-3) * (N-1)));
	mallocCheck(_lin_tempqgk0, ((N-4) * (N) * (N-3) * (N-1)), double);
	tempqgk0 = (double****)malloc(sizeof(double***)*(N-4));
	mallocCheck(tempqgk0, (N-4), double***);
	for (mz1=0;mz1 < N-4; mz1++) {
		tempqgk0[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempqgk0[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempqgk0[mz1][mz2] = (double**)malloc(sizeof(double*)*(N-3));
			mallocCheck(tempqgk0[mz1][mz2], (N-3), double*);
			for (mz3=0;mz3 < N-3; mz3++) {
				tempqgk0[mz1][mz2][mz3] = &_lin_tempqgk0[(mz1*((N) * (N-3) * (N-1))) + (mz2*((N-3) * (N-1))) + (mz3*(N-1))];
			}
		}
	}
	
	double* _lin_tempqgm0 = (double*)malloc(sizeof(double)*((N-4) * (N) * (N-3) * (N-1)));
	mallocCheck(_lin_tempqgm0, ((N-4) * (N) * (N-3) * (N-1)), double);
	tempqgm0 = (double****)malloc(sizeof(double***)*(N-4));
	mallocCheck(tempqgm0, (N-4), double***);
	for (mz1=0;mz1 < N-4; mz1++) {
		tempqgm0[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempqgm0[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempqgm0[mz1][mz2] = (double**)malloc(sizeof(double*)*(N-3));
			mallocCheck(tempqgm0[mz1][mz2], (N-3), double*);
			for (mz3=0;mz3 < N-3; mz3++) {
				tempqgm0[mz1][mz2][mz3] = &_lin_tempqgm0[(mz1*((N) * (N-3) * (N-1))) + (mz2*((N-3) * (N-1))) + (mz3*(N-1))];
			}
		}
	}
	
	double* _lin_Qbr = (double*)malloc(sizeof(double)*((M) * (M)));
	mallocCheck(_lin_Qbr, ((M) * (M)), double);
	Qbr = (double**)malloc(sizeof(double*)*(M));
	mallocCheck(Qbr, (M), double*);
	for (mz1=0;mz1 < M; mz1++) {
		Qbr[mz1] = &_lin_Qbr[(mz1*(M))];
	}
	
	double* _lin_Qgr = (double*)malloc(sizeof(double)*((M-6) * (M) * (M-5) * (M-1)));
	mallocCheck(_lin_Qgr, ((M-6) * (M) * (M-5) * (M-1)), double);
	Qgr = (double****)malloc(sizeof(double***)*(M-6));
	mallocCheck(Qgr, (M-6), double***);
	for (mz1=0;mz1 < M-6; mz1++) {
		Qgr[mz1] = (double***)malloc(sizeof(double**)*(M));
		mallocCheck(Qgr[mz1], (M), double**);
		for (mz2=0;mz2 < M; mz2++) {
			Qgr[mz1][mz2] = (double**)malloc(sizeof(double*)*(M-5));
			mallocCheck(Qgr[mz1][mz2], (M-5), double*);
			for (mz3=0;mz3 < M-5; mz3++) {
				Qgr[mz1][mz2][mz3] = &_lin_Qgr[(mz1*((M) * (M-5) * (M-1))) + (mz2*((M-5) * (M-1))) + (mz3*(M-1))];
			}
		}
	}
	
	double* _lin_tempqgr = (double*)malloc(sizeof(double)*((M-8) * (M) * (M-6) * (M-2)));
	mallocCheck(_lin_tempqgr, ((M-8) * (M) * (M-6) * (M-2)), double);
	tempqgr = (double****)malloc(sizeof(double***)*(M-8));
	mallocCheck(tempqgr, (M-8), double***);
	for (mz1=0;mz1 < M-8; mz1++) {
		tempqgr[mz1] = (double***)malloc(sizeof(double**)*(M));
		mallocCheck(tempqgr[mz1], (M), double**);
		for (mz2=0;mz2 < M; mz2++) {
			tempqgr[mz1][mz2] = (double**)malloc(sizeof(double*)*(M-6));
			mallocCheck(tempqgr[mz1][mz2], (M-6), double*);
			for (mz3=0;mz3 < M-6; mz3++) {
				tempqgr[mz1][mz2][mz3] = &_lin_tempqgr[(mz1*((M) * (M-6) * (M-2))) + (mz2*((M-6) * (M-2))) + (mz3*(M-2))];
			}
		}
	}
	
	double* _lin_tempqgkr = (double*)malloc(sizeof(double)*((M-4) * (M) * (M-3) * (M-1)));
	mallocCheck(_lin_tempqgkr, ((M-4) * (M) * (M-3) * (M-1)), double);
	tempqgkr = (double****)malloc(sizeof(double***)*(M-4));
	mallocCheck(tempqgkr, (M-4), double***);
	for (mz1=0;mz1 < M-4; mz1++) {
		tempqgkr[mz1] = (double***)malloc(sizeof(double**)*(M));
		mallocCheck(tempqgkr[mz1], (M), double**);
		for (mz2=0;mz2 < M; mz2++) {
			tempqgkr[mz1][mz2] = (double**)malloc(sizeof(double*)*(M-3));
			mallocCheck(tempqgkr[mz1][mz2], (M-3), double*);
			for (mz3=0;mz3 < M-3; mz3++) {
				tempqgkr[mz1][mz2][mz3] = &_lin_tempqgkr[(mz1*((M) * (M-3) * (M-1))) + (mz2*((M-3) * (M-1))) + (mz3*(M-1))];
			}
		}
	}
	
	double* _lin_tempqgmr = (double*)malloc(sizeof(double)*((M-4) * (M) * (M-3) * (M-1)));
	mallocCheck(_lin_tempqgmr, ((M-4) * (M) * (M-3) * (M-1)), double);
	tempqgmr = (double****)malloc(sizeof(double***)*(M-4));
	mallocCheck(tempqgmr, (M-4), double***);
	for (mz1=0;mz1 < M-4; mz1++) {
		tempqgmr[mz1] = (double***)malloc(sizeof(double**)*(M));
		mallocCheck(tempqgmr[mz1], (M), double**);
		for (mz2=0;mz2 < M; mz2++) {
			tempqgmr[mz1][mz2] = (double**)malloc(sizeof(double*)*(M-3));
			mallocCheck(tempqgmr[mz1][mz2], (M-3), double*);
			for (mz3=0;mz3 < M-3; mz3++) {
				tempqgmr[mz1][mz2][mz3] = &_lin_tempqgmr[(mz1*((M) * (M-3) * (M-1))) + (mz2*((M-3) * (M-1))) + (mz3*(M-1))];
			}
		}
	}
	
	double* _lin_Qm00 = (double*)malloc(sizeof(double)*((N) * (N)));
	mallocCheck(_lin_Qm00, ((N) * (N)), double);
	Qm00 = (double**)malloc(sizeof(double*)*(N));
	mallocCheck(Qm00, (N), double*);
	for (mz1=0;mz1 < N; mz1++) {
		Qm00[mz1] = &_lin_Qm00[(mz1*(N))];
	}
	
	double* _lin_Qm10 = (double*)malloc(sizeof(double)*((N) * (N)));
	mallocCheck(_lin_Qm10, ((N) * (N)), double);
	Qm10 = (double**)malloc(sizeof(double*)*(N));
	mallocCheck(Qm10, (N), double*);
	for (mz1=0;mz1 < N; mz1++) {
		Qm10[mz1] = &_lin_Qm10[(mz1*(N))];
	}
	
	double* _lin_Q0r = (double*)malloc(sizeof(double)*((M) * (M)));
	mallocCheck(_lin_Q0r, ((M) * (M)), double);
	Q0r = (double**)malloc(sizeof(double*)*(M));
	mallocCheck(Q0r, (M), double*);
	for (mz1=0;mz1 < M; mz1++) {
		Q0r[mz1] = &_lin_Q0r[(mz1*(M))];
	}
	
	double* _lin_Q1r = (double*)malloc(sizeof(double)*((M) * (M)));
	mallocCheck(_lin_Q1r, ((M) * (M)), double);
	Q1r = (double**)malloc(sizeof(double*)*(M));
	mallocCheck(Q1r, (M), double*);
	for (mz1=0;mz1 < M; mz1++) {
		Q1r[mz1] = &_lin_Q1r[(mz1*(M))];
	}
	
	double* _lin_Qm0r = (double*)malloc(sizeof(double)*((M) * (M)));
	mallocCheck(_lin_Qm0r, ((M) * (M)), double);
	Qm0r = (double**)malloc(sizeof(double*)*(M));
	mallocCheck(Qm0r, (M), double*);
	for (mz1=0;mz1 < M; mz1++) {
		Qm0r[mz1] = &_lin_Qm0r[(mz1*(M))];
	}
	
	double* _lin_Qm1r = (double*)malloc(sizeof(double)*((M) * (M)));
	mallocCheck(_lin_Qm1r, ((M) * (M)), double);
	Qm1r = (double**)malloc(sizeof(double*)*(M));
	mallocCheck(Qm1r, (M), double*);
	for (mz1=0;mz1 < M; mz1++) {
		Qm1r[mz1] = &_lin_Qm1r[(mz1*(M))];
	}
	
	double* _lin_Qgk1 = (double*)malloc(sizeof(double)*((M-2) * (M) * (M-2) * (M)));
	mallocCheck(_lin_Qgk1, ((M-2) * (M) * (M-2) * (M)), double);
	Qgk1 = (double****)malloc(sizeof(double***)*(M-2));
	mallocCheck(Qgk1, (M-2), double***);
	for (mz1=0;mz1 < M-2; mz1++) {
		Qgk1[mz1] = (double***)malloc(sizeof(double**)*(M));
		mallocCheck(Qgk1[mz1], (M), double**);
		for (mz2=0;mz2 < M; mz2++) {
			Qgk1[mz1][mz2] = (double**)malloc(sizeof(double*)*(M-2));
			mallocCheck(Qgk1[mz1][mz2], (M-2), double*);
			for (mz3=0;mz3 < M-2; mz3++) {
				Qgk1[mz1][mz2][mz3] = &_lin_Qgk1[(mz1*((M) * (M-2) * (M))) + (mz2*((M-2) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_Qgm1 = (double*)malloc(sizeof(double)*((M-2) * (M) * (M-2) * (M)));
	mallocCheck(_lin_Qgm1, ((M-2) * (M) * (M-2) * (M)), double);
	Qgm1 = (double****)malloc(sizeof(double***)*(M-2));
	mallocCheck(Qgm1, (M-2), double***);
	for (mz1=0;mz1 < M-2; mz1++) {
		Qgm1[mz1] = (double***)malloc(sizeof(double**)*(M));
		mallocCheck(Qgm1[mz1], (M), double**);
		for (mz2=0;mz2 < M; mz2++) {
			Qgm1[mz1][mz2] = (double**)malloc(sizeof(double*)*(M-2));
			mallocCheck(Qgm1[mz1][mz2], (M-2), double*);
			for (mz3=0;mz3 < M-2; mz3++) {
				Qgm1[mz1][mz2][mz3] = &_lin_Qgm1[(mz1*((M) * (M-2) * (M))) + (mz2*((M-2) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_Q01 = (double*)malloc(sizeof(double)*((M) * (M)));
	mallocCheck(_lin_Q01, ((M) * (M)), double);
	Q01 = (double**)malloc(sizeof(double*)*(M));
	mallocCheck(Q01, (M), double*);
	for (mz1=0;mz1 < M; mz1++) {
		Q01[mz1] = &_lin_Q01[(mz1*(M))];
	}
	
	double* _lin_Q11 = (double*)malloc(sizeof(double)*((M) * (M)));
	mallocCheck(_lin_Q11, ((M) * (M)), double);
	Q11 = (double**)malloc(sizeof(double*)*(M));
	mallocCheck(Q11, (M), double*);
	for (mz1=0;mz1 < M; mz1++) {
		Q11[mz1] = &_lin_Q11[(mz1*(M))];
	}
	
	double* _lin_Qm01 = (double*)malloc(sizeof(double)*((M) * (M)));
	mallocCheck(_lin_Qm01, ((M) * (M)), double);
	Qm01 = (double**)malloc(sizeof(double*)*(M));
	mallocCheck(Qm01, (M), double*);
	for (mz1=0;mz1 < M; mz1++) {
		Qm01[mz1] = &_lin_Qm01[(mz1*(M))];
	}
	
	double* _lin_Qm11 = (double*)malloc(sizeof(double)*((M) * (M)));
	mallocCheck(_lin_Qm11, ((M) * (M)), double);
	Qm11 = (double**)malloc(sizeof(double*)*(M));
	mallocCheck(Qm11, (M), double*);
	for (mz1=0;mz1 < M; mz1++) {
		Qm11[mz1] = &_lin_Qm11[(mz1*(M))];
	}
	
	double* _lin_Qih0 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_Qih0, ((N) * (N) * (M) * (M)), double);
	Qih0 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(Qih0, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		Qih0[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(Qih0[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			Qih0[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(Qih0[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				Qih0[mz1][mz2][mz3] = &_lin_Qih0[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_Qih1 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_Qih1, ((N) * (N) * (M) * (M)), double);
	Qih1 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(Qih1, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		Qih1[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(Qih1[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			Qih1[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(Qih1[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				Qih1[mz1][mz2][mz3] = &_lin_Qih1[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_Qihh00 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_Qihh00, ((N) * (N) * (M) * (M)), double);
	Qihh00 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(Qihh00, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		Qihh00[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(Qihh00[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			Qihh00[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(Qihh00[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				Qihh00[mz1][mz2][mz3] = &_lin_Qihh00[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_Qihh01 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_Qihh01, ((N) * (N) * (M) * (M)), double);
	Qihh01 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(Qihh01, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		Qihh01[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(Qihh01[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			Qihh01[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(Qihh01[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				Qihh01[mz1][mz2][mz3] = &_lin_Qihh01[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_Qihh10 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_Qihh10, ((N) * (N) * (M) * (M)), double);
	Qihh10 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(Qihh10, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		Qihh10[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(Qihh10[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			Qihh10[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(Qihh10[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				Qihh10[mz1][mz2][mz3] = &_lin_Qihh10[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_Qihh11 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_Qihh11, ((N) * (N) * (M) * (M)), double);
	Qihh11 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(Qihh11, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		Qihh11[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(Qihh11[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			Qihh11[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(Qihh11[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				Qihh11[mz1][mz2][mz3] = &_lin_Qihh11[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_Qihm00 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_Qihm00, ((N) * (N) * (M) * (M)), double);
	Qihm00 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(Qihm00, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		Qihm00[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(Qihm00[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			Qihm00[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(Qihm00[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				Qihm00[mz1][mz2][mz3] = &_lin_Qihm00[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_Qihm01 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_Qihm01, ((N) * (N) * (M) * (M)), double);
	Qihm01 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(Qihm01, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		Qihm01[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(Qihm01[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			Qihm01[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(Qihm01[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				Qihm01[mz1][mz2][mz3] = &_lin_Qihm01[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_Qihm10 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_Qihm10, ((N) * (N) * (M) * (M)), double);
	Qihm10 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(Qihm10, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		Qihm10[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(Qihm10[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			Qihm10[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(Qihm10[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				Qihm10[mz1][mz2][mz3] = &_lin_Qihm10[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_Qihm11 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_Qihm11, ((N) * (N) * (M) * (M)), double);
	Qihm11 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(Qihm11, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		Qihm11[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(Qihm11[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			Qihm11[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(Qihm11[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				Qihm11[mz1][mz2][mz3] = &_lin_Qihm11[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_Qgkr = (double*)malloc(sizeof(double)*((M-2) * (M) * (M-2) * (M)));
	mallocCheck(_lin_Qgkr, ((M-2) * (M) * (M-2) * (M)), double);
	Qgkr = (double****)malloc(sizeof(double***)*(M-2));
	mallocCheck(Qgkr, (M-2), double***);
	for (mz1=0;mz1 < M-2; mz1++) {
		Qgkr[mz1] = (double***)malloc(sizeof(double**)*(M));
		mallocCheck(Qgkr[mz1], (M), double**);
		for (mz2=0;mz2 < M; mz2++) {
			Qgkr[mz1][mz2] = (double**)malloc(sizeof(double*)*(M-2));
			mallocCheck(Qgkr[mz1][mz2], (M-2), double*);
			for (mz3=0;mz3 < M-2; mz3++) {
				Qgkr[mz1][mz2][mz3] = &_lin_Qgkr[(mz1*((M) * (M-2) * (M))) + (mz2*((M-2) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_Qgmr = (double*)malloc(sizeof(double)*((M-2) * (M) * (M-2) * (M)));
	mallocCheck(_lin_Qgmr, ((M-2) * (M) * (M-2) * (M)), double);
	Qgmr = (double****)malloc(sizeof(double***)*(M-2));
	mallocCheck(Qgmr, (M-2), double***);
	for (mz1=0;mz1 < M-2; mz1++) {
		Qgmr[mz1] = (double***)malloc(sizeof(double**)*(M));
		mallocCheck(Qgmr[mz1], (M), double**);
		for (mz2=0;mz2 < M; mz2++) {
			Qgmr[mz1][mz2] = (double**)malloc(sizeof(double*)*(M-2));
			mallocCheck(Qgmr[mz1][mz2], (M-2), double*);
			for (mz3=0;mz3 < M-2; mz3++) {
				Qgmr[mz1][mz2][mz3] = &_lin_Qgmr[(mz1*((M) * (M-2) * (M))) + (mz2*((M-2) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_Qgk0 = (double*)malloc(sizeof(double)*((N-2) * (N) * (N-2) * (N)));
	mallocCheck(_lin_Qgk0, ((N-2) * (N) * (N-2) * (N)), double);
	Qgk0 = (double****)malloc(sizeof(double***)*(N-2));
	mallocCheck(Qgk0, (N-2), double***);
	for (mz1=0;mz1 < N-2; mz1++) {
		Qgk0[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(Qgk0[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			Qgk0[mz1][mz2] = (double**)malloc(sizeof(double*)*(N-2));
			mallocCheck(Qgk0[mz1][mz2], (N-2), double*);
			for (mz3=0;mz3 < N-2; mz3++) {
				Qgk0[mz1][mz2][mz3] = &_lin_Qgk0[(mz1*((N) * (N-2) * (N))) + (mz2*((N-2) * (N))) + (mz3*(N))];
			}
		}
	}
	
	double* _lin_Qgm0 = (double*)malloc(sizeof(double)*((N-2) * (N) * (N-2) * (N)));
	mallocCheck(_lin_Qgm0, ((N-2) * (N) * (N-2) * (N)), double);
	Qgm0 = (double****)malloc(sizeof(double***)*(N-2));
	mallocCheck(Qgm0, (N-2), double***);
	for (mz1=0;mz1 < N-2; mz1++) {
		Qgm0[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(Qgm0[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			Qgm0[mz1][mz2] = (double**)malloc(sizeof(double*)*(N-2));
			mallocCheck(Qgm0[mz1][mz2], (N-2), double*);
			for (mz3=0;mz3 < N-2; mz3++) {
				Qgm0[mz1][mz2][mz3] = &_lin_Qgm0[(mz1*((N) * (N-2) * (N))) + (mz2*((N-2) * (N))) + (mz3*(N))];
			}
		}
	}
	
	double* _lin_Q20 = (double*)malloc(sizeof(double)*((N) * (N)));
	mallocCheck(_lin_Q20, ((N) * (N)), double);
	Q20 = (double**)malloc(sizeof(double*)*(N));
	mallocCheck(Q20, (N), double*);
	for (mz1=0;mz1 < N; mz1++) {
		Q20[mz1] = &_lin_Q20[(mz1*(N))];
	}
	
	double* _lin_Qm20 = (double*)malloc(sizeof(double)*((N) * (N)));
	mallocCheck(_lin_Qm20, ((N) * (N)), double);
	Qm20 = (double**)malloc(sizeof(double*)*(N));
	mallocCheck(Qm20, (N), double*);
	for (mz1=0;mz1 < N; mz1++) {
		Qm20[mz1] = &_lin_Qm20[(mz1*(N))];
	}
	
	double* _lin_Qm2r = (double*)malloc(sizeof(double)*((M) * (M)));
	mallocCheck(_lin_Qm2r, ((M) * (M)), double);
	Qm2r = (double**)malloc(sizeof(double*)*(M));
	mallocCheck(Qm2r, (M), double*);
	for (mz1=0;mz1 < M; mz1++) {
		Qm2r[mz1] = &_lin_Qm2r[(mz1*(M))];
	}
	
	double* _lin_Q2r = (double*)malloc(sizeof(double)*((M) * (M)));
	mallocCheck(_lin_Q2r, ((M) * (M)), double);
	Q2r = (double**)malloc(sizeof(double*)*(M));
	mallocCheck(Q2r, (M), double*);
	for (mz1=0;mz1 < M; mz1++) {
		Q2r[mz1] = &_lin_Q2r[(mz1*(M))];
	}
	
	double* _lin_Q21 = (double*)malloc(sizeof(double)*((M) * (M)));
	mallocCheck(_lin_Q21, ((M) * (M)), double);
	Q21 = (double**)malloc(sizeof(double*)*(M));
	mallocCheck(Q21, (M), double*);
	for (mz1=0;mz1 < M; mz1++) {
		Q21[mz1] = &_lin_Q21[(mz1*(M))];
	}
	
	double* _lin_tempQiy1 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiy1, ((N) * (N) * (M) * (M)), double);
	tempQiy1 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiy1, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiy1[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiy1[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiy1[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiy1[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiy1[mz1][mz2][mz3] = &_lin_tempQiy1[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiy2 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiy2, ((N) * (N) * (M) * (M)), double);
	tempQiy2 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiy2, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiy2[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiy2[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiy2[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiy2[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiy2[mz1][mz2][mz3] = &_lin_tempQiy2[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQixm001 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQixm001, ((N) * (N) * (M) * (M)), double);
	tempQixm001 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQixm001, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQixm001[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQixm001[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQixm001[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQixm001[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQixm001[mz1][mz2][mz3] = &_lin_tempQixm001[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQixm002 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQixm002, ((N) * (N) * (M) * (M)), double);
	tempQixm002 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQixm002, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQixm002[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQixm002[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQixm002[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQixm002[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQixm002[mz1][mz2][mz3] = &_lin_tempQixm002[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQixm011 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQixm011, ((N) * (N) * (M) * (M)), double);
	tempQixm011 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQixm011, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQixm011[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQixm011[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQixm011[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQixm011[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQixm011[mz1][mz2][mz3] = &_lin_tempQixm011[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQixm012 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQixm012, ((N) * (N) * (M) * (M)), double);
	tempQixm012 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQixm012, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQixm012[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQixm012[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQixm012[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQixm012[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQixm012[mz1][mz2][mz3] = &_lin_tempQixm012[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQixm021 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQixm021, ((N) * (N) * (M) * (M)), double);
	tempQixm021 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQixm021, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQixm021[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQixm021[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQixm021[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQixm021[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQixm021[mz1][mz2][mz3] = &_lin_tempQixm021[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQixm022 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQixm022, ((N) * (N) * (M) * (M)), double);
	tempQixm022 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQixm022, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQixm022[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQixm022[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQixm022[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQixm022[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQixm022[mz1][mz2][mz3] = &_lin_tempQixm022[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQixm101 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQixm101, ((N) * (N) * (M) * (M)), double);
	tempQixm101 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQixm101, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQixm101[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQixm101[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQixm101[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQixm101[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQixm101[mz1][mz2][mz3] = &_lin_tempQixm101[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQixm102 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQixm102, ((N) * (N) * (M) * (M)), double);
	tempQixm102 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQixm102, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQixm102[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQixm102[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQixm102[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQixm102[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQixm102[mz1][mz2][mz3] = &_lin_tempQixm102[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQixm111 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQixm111, ((N) * (N) * (M) * (M)), double);
	tempQixm111 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQixm111, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQixm111[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQixm111[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQixm111[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQixm111[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQixm111[mz1][mz2][mz3] = &_lin_tempQixm111[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQixm112 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQixm112, ((N) * (N) * (M) * (M)), double);
	tempQixm112 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQixm112, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQixm112[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQixm112[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQixm112[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQixm112[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQixm112[mz1][mz2][mz3] = &_lin_tempQixm112[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQixm121 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQixm121, ((N) * (N) * (M) * (M)), double);
	tempQixm121 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQixm121, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQixm121[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQixm121[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQixm121[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQixm121[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQixm121[mz1][mz2][mz3] = &_lin_tempQixm121[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQixm122 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQixm122, ((N) * (N) * (M) * (M)), double);
	tempQixm122 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQixm122, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQixm122[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQixm122[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQixm122[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQixm122[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQixm122[mz1][mz2][mz3] = &_lin_tempQixm122[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQixk001 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQixk001, ((N) * (N) * (M) * (M)), double);
	tempQixk001 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQixk001, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQixk001[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQixk001[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQixk001[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQixk001[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQixk001[mz1][mz2][mz3] = &_lin_tempQixk001[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQixk002 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQixk002, ((N) * (N) * (M) * (M)), double);
	tempQixk002 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQixk002, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQixk002[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQixk002[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQixk002[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQixk002[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQixk002[mz1][mz2][mz3] = &_lin_tempQixk002[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQixk011 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQixk011, ((N) * (N) * (M) * (M)), double);
	tempQixk011 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQixk011, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQixk011[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQixk011[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQixk011[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQixk011[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQixk011[mz1][mz2][mz3] = &_lin_tempQixk011[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQixk012 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQixk012, ((N) * (N) * (M) * (M)), double);
	tempQixk012 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQixk012, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQixk012[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQixk012[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQixk012[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQixk012[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQixk012[mz1][mz2][mz3] = &_lin_tempQixk012[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQixk101 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQixk101, ((N) * (N) * (M) * (M)), double);
	tempQixk101 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQixk101, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQixk101[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQixk101[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQixk101[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQixk101[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQixk101[mz1][mz2][mz3] = &_lin_tempQixk101[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQixk102 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQixk102, ((N) * (N) * (M) * (M)), double);
	tempQixk102 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQixk102, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQixk102[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQixk102[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQixk102[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQixk102[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQixk102[mz1][mz2][mz3] = &_lin_tempQixk102[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQixk111 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQixk111, ((N) * (N) * (M) * (M)), double);
	tempQixk111 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQixk111, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQixk111[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQixk111[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQixk111[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQixk111[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQixk111[mz1][mz2][mz3] = &_lin_tempQixk111[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQixk112 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQixk112, ((N) * (N) * (M) * (M)), double);
	tempQixk112 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQixk112, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQixk112[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQixk112[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQixk112[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQixk112[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQixk112[mz1][mz2][mz3] = &_lin_tempQixk112[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQimm021 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQimm021, ((N) * (N) * (M) * (M)), double);
	tempQimm021 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQimm021, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQimm021[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQimm021[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQimm021[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQimm021[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQimm021[mz1][mz2][mz3] = &_lin_tempQimm021[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQimm022 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQimm022, ((N) * (N) * (M) * (M)), double);
	tempQimm022 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQimm022, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQimm022[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQimm022[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQimm022[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQimm022[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQimm022[mz1][mz2][mz3] = &_lin_tempQimm022[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQimm023 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQimm023, ((N) * (N) * (M) * (M)), double);
	tempQimm023 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQimm023, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQimm023[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQimm023[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQimm023[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQimm023[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQimm023[mz1][mz2][mz3] = &_lin_tempQimm023[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQimm121 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQimm121, ((N) * (N) * (M) * (M)), double);
	tempQimm121 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQimm121, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQimm121[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQimm121[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQimm121[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQimm121[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQimm121[mz1][mz2][mz3] = &_lin_tempQimm121[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQimm122 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQimm122, ((N) * (N) * (M) * (M)), double);
	tempQimm122 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQimm122, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQimm122[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQimm122[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQimm122[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQimm122[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQimm122[mz1][mz2][mz3] = &_lin_tempQimm122[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQimm123 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQimm123, ((N) * (N) * (M) * (M)), double);
	tempQimm123 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQimm123, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQimm123[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQimm123[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQimm123[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQimm123[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQimm123[mz1][mz2][mz3] = &_lin_tempQimm123[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQimm201 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQimm201, ((N) * (N) * (M) * (M)), double);
	tempQimm201 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQimm201, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQimm201[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQimm201[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQimm201[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQimm201[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQimm201[mz1][mz2][mz3] = &_lin_tempQimm201[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQimm202 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQimm202, ((N) * (N) * (M) * (M)), double);
	tempQimm202 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQimm202, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQimm202[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQimm202[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQimm202[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQimm202[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQimm202[mz1][mz2][mz3] = &_lin_tempQimm202[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQimm203 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQimm203, ((N) * (N) * (M) * (M)), double);
	tempQimm203 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQimm203, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQimm203[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQimm203[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQimm203[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQimm203[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQimm203[mz1][mz2][mz3] = &_lin_tempQimm203[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQimm211 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQimm211, ((N) * (N) * (M) * (M)), double);
	tempQimm211 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQimm211, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQimm211[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQimm211[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQimm211[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQimm211[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQimm211[mz1][mz2][mz3] = &_lin_tempQimm211[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQimm212 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQimm212, ((N) * (N) * (M) * (M)), double);
	tempQimm212 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQimm212, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQimm212[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQimm212[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQimm212[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQimm212[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQimm212[mz1][mz2][mz3] = &_lin_tempQimm212[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQimm213 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQimm213, ((N) * (N) * (M) * (M)), double);
	tempQimm213 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQimm213, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQimm213[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQimm213[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQimm213[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQimm213[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQimm213[mz1][mz2][mz3] = &_lin_tempQimm213[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQimm221 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQimm221, ((N) * (N) * (M) * (M)), double);
	tempQimm221 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQimm221, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQimm221[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQimm221[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQimm221[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQimm221[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQimm221[mz1][mz2][mz3] = &_lin_tempQimm221[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQimm222 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQimm222, ((N) * (N) * (M) * (M)), double);
	tempQimm222 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQimm222, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQimm222[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQimm222[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQimm222[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQimm222[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQimm222[mz1][mz2][mz3] = &_lin_tempQimm222[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQimm223 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQimm223, ((N) * (N) * (M) * (M)), double);
	tempQimm223 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQimm223, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQimm223[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQimm223[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQimm223[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQimm223[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQimm223[mz1][mz2][mz3] = &_lin_tempQimm223[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQimk011 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQimk011, ((N) * (N) * (M) * (M)), double);
	tempQimk011 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQimk011, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQimk011[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQimk011[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQimk011[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQimk011[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQimk011[mz1][mz2][mz3] = &_lin_tempQimk011[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQimk012 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQimk012, ((N) * (N) * (M) * (M)), double);
	tempQimk012 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQimk012, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQimk012[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQimk012[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQimk012[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQimk012[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQimk012[mz1][mz2][mz3] = &_lin_tempQimk012[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQimk013 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQimk013, ((N) * (N) * (M) * (M)), double);
	tempQimk013 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQimk013, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQimk013[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQimk013[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQimk013[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQimk013[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQimk013[mz1][mz2][mz3] = &_lin_tempQimk013[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQimk014 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQimk014, ((N) * (N) * (M) * (M)), double);
	tempQimk014 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQimk014, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQimk014[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQimk014[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQimk014[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQimk014[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQimk014[mz1][mz2][mz3] = &_lin_tempQimk014[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQimk111 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQimk111, ((N) * (N) * (M) * (M)), double);
	tempQimk111 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQimk111, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQimk111[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQimk111[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQimk111[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQimk111[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQimk111[mz1][mz2][mz3] = &_lin_tempQimk111[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQimk112 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQimk112, ((N) * (N) * (M) * (M)), double);
	tempQimk112 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQimk112, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQimk112[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQimk112[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQimk112[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQimk112[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQimk112[mz1][mz2][mz3] = &_lin_tempQimk112[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQimk113 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQimk113, ((N) * (N) * (M) * (M)), double);
	tempQimk113 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQimk113, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQimk113[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQimk113[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQimk113[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQimk113[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQimk113[mz1][mz2][mz3] = &_lin_tempQimk113[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQimk114 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQimk114, ((N) * (N) * (M) * (M)), double);
	tempQimk114 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQimk114, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQimk114[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQimk114[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQimk114[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQimk114[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQimk114[mz1][mz2][mz3] = &_lin_tempQimk114[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQimk201 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQimk201, ((N) * (N) * (M) * (M)), double);
	tempQimk201 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQimk201, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQimk201[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQimk201[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQimk201[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQimk201[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQimk201[mz1][mz2][mz3] = &_lin_tempQimk201[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQimk202 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQimk202, ((N) * (N) * (M) * (M)), double);
	tempQimk202 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQimk202, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQimk202[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQimk202[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQimk202[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQimk202[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQimk202[mz1][mz2][mz3] = &_lin_tempQimk202[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQimk203 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQimk203, ((N) * (N) * (M) * (M)), double);
	tempQimk203 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQimk203, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQimk203[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQimk203[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQimk203[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQimk203[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQimk203[mz1][mz2][mz3] = &_lin_tempQimk203[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQimk204 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQimk204, ((N) * (N) * (M) * (M)), double);
	tempQimk204 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQimk204, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQimk204[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQimk204[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQimk204[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQimk204[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQimk204[mz1][mz2][mz3] = &_lin_tempQimk204[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQimk211 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQimk211, ((N) * (N) * (M) * (M)), double);
	tempQimk211 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQimk211, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQimk211[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQimk211[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQimk211[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQimk211[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQimk211[mz1][mz2][mz3] = &_lin_tempQimk211[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQimk212 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQimk212, ((N) * (N) * (M) * (M)), double);
	tempQimk212 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQimk212, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQimk212[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQimk212[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQimk212[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQimk212[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQimk212[mz1][mz2][mz3] = &_lin_tempQimk212[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQimk213 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQimk213, ((N) * (N) * (M) * (M)), double);
	tempQimk213 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQimk213, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQimk213[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQimk213[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQimk213[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQimk213[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQimk213[mz1][mz2][mz3] = &_lin_tempQimk213[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQimk214 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQimk214, ((N) * (N) * (M) * (M)), double);
	tempQimk214 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQimk214, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQimk214[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQimk214[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQimk214[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQimk214[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQimk214[mz1][mz2][mz3] = &_lin_tempQimk214[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQikm101 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQikm101, ((N) * (N) * (M) * (M)), double);
	tempQikm101 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQikm101, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQikm101[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQikm101[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQikm101[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQikm101[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQikm101[mz1][mz2][mz3] = &_lin_tempQikm101[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQikm102 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQikm102, ((N) * (N) * (M) * (M)), double);
	tempQikm102 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQikm102, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQikm102[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQikm102[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQikm102[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQikm102[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQikm102[mz1][mz2][mz3] = &_lin_tempQikm102[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQikm103 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQikm103, ((N) * (N) * (M) * (M)), double);
	tempQikm103 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQikm103, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQikm103[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQikm103[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQikm103[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQikm103[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQikm103[mz1][mz2][mz3] = &_lin_tempQikm103[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQikm104 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQikm104, ((N) * (N) * (M) * (M)), double);
	tempQikm104 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQikm104, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQikm104[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQikm104[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQikm104[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQikm104[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQikm104[mz1][mz2][mz3] = &_lin_tempQikm104[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQikm111 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQikm111, ((N) * (N) * (M) * (M)), double);
	tempQikm111 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQikm111, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQikm111[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQikm111[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQikm111[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQikm111[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQikm111[mz1][mz2][mz3] = &_lin_tempQikm111[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQikm112 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQikm112, ((N) * (N) * (M) * (M)), double);
	tempQikm112 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQikm112, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQikm112[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQikm112[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQikm112[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQikm112[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQikm112[mz1][mz2][mz3] = &_lin_tempQikm112[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQikm113 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQikm113, ((N) * (N) * (M) * (M)), double);
	tempQikm113 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQikm113, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQikm113[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQikm113[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQikm113[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQikm113[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQikm113[mz1][mz2][mz3] = &_lin_tempQikm113[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQikm114 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQikm114, ((N) * (N) * (M) * (M)), double);
	tempQikm114 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQikm114, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQikm114[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQikm114[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQikm114[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQikm114[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQikm114[mz1][mz2][mz3] = &_lin_tempQikm114[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQikm021 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQikm021, ((N) * (N) * (M) * (M)), double);
	tempQikm021 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQikm021, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQikm021[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQikm021[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQikm021[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQikm021[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQikm021[mz1][mz2][mz3] = &_lin_tempQikm021[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQikm022 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQikm022, ((N) * (N) * (M) * (M)), double);
	tempQikm022 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQikm022, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQikm022[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQikm022[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQikm022[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQikm022[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQikm022[mz1][mz2][mz3] = &_lin_tempQikm022[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQikm023 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQikm023, ((N) * (N) * (M) * (M)), double);
	tempQikm023 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQikm023, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQikm023[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQikm023[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQikm023[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQikm023[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQikm023[mz1][mz2][mz3] = &_lin_tempQikm023[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQikm024 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQikm024, ((N) * (N) * (M) * (M)), double);
	tempQikm024 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQikm024, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQikm024[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQikm024[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQikm024[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQikm024[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQikm024[mz1][mz2][mz3] = &_lin_tempQikm024[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQikm121 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQikm121, ((N) * (N) * (M) * (M)), double);
	tempQikm121 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQikm121, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQikm121[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQikm121[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQikm121[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQikm121[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQikm121[mz1][mz2][mz3] = &_lin_tempQikm121[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQikm122 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQikm122, ((N) * (N) * (M) * (M)), double);
	tempQikm122 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQikm122, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQikm122[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQikm122[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQikm122[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQikm122[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQikm122[mz1][mz2][mz3] = &_lin_tempQikm122[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQikm123 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQikm123, ((N) * (N) * (M) * (M)), double);
	tempQikm123 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQikm123, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQikm123[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQikm123[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQikm123[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQikm123[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQikm123[mz1][mz2][mz3] = &_lin_tempQikm123[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQikm124 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQikm124, ((N) * (N) * (M) * (M)), double);
	tempQikm124 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQikm124, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQikm124[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQikm124[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQikm124[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQikm124[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQikm124[mz1][mz2][mz3] = &_lin_tempQikm124[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQikk011 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQikk011, ((N) * (N) * (M) * (M)), double);
	tempQikk011 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQikk011, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQikk011[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQikk011[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQikk011[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQikk011[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQikk011[mz1][mz2][mz3] = &_lin_tempQikk011[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQikk012 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQikk012, ((N) * (N) * (M) * (M)), double);
	tempQikk012 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQikk012, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQikk012[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQikk012[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQikk012[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQikk012[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQikk012[mz1][mz2][mz3] = &_lin_tempQikk012[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQikk013 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQikk013, ((N) * (N) * (M) * (M)), double);
	tempQikk013 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQikk013, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQikk013[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQikk013[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQikk013[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQikk013[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQikk013[mz1][mz2][mz3] = &_lin_tempQikk013[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQikk014 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQikk014, ((N) * (N) * (M) * (M)), double);
	tempQikk014 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQikk014, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQikk014[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQikk014[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQikk014[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQikk014[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQikk014[mz1][mz2][mz3] = &_lin_tempQikk014[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQikk015 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQikk015, ((N) * (N) * (M) * (M)), double);
	tempQikk015 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQikk015, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQikk015[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQikk015[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQikk015[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQikk015[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQikk015[mz1][mz2][mz3] = &_lin_tempQikk015[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQikk101 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQikk101, ((N) * (N) * (M) * (M)), double);
	tempQikk101 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQikk101, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQikk101[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQikk101[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQikk101[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQikk101[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQikk101[mz1][mz2][mz3] = &_lin_tempQikk101[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQikk102 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQikk102, ((N) * (N) * (M) * (M)), double);
	tempQikk102 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQikk102, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQikk102[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQikk102[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQikk102[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQikk102[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQikk102[mz1][mz2][mz3] = &_lin_tempQikk102[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQikk103 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQikk103, ((N) * (N) * (M) * (M)), double);
	tempQikk103 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQikk103, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQikk103[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQikk103[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQikk103[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQikk103[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQikk103[mz1][mz2][mz3] = &_lin_tempQikk103[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQikk104 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQikk104, ((N) * (N) * (M) * (M)), double);
	tempQikk104 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQikk104, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQikk104[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQikk104[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQikk104[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQikk104[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQikk104[mz1][mz2][mz3] = &_lin_tempQikk104[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQikk105 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQikk105, ((N) * (N) * (M) * (M)), double);
	tempQikk105 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQikk105, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQikk105[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQikk105[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQikk105[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQikk105[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQikk105[mz1][mz2][mz3] = &_lin_tempQikk105[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQikk111 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQikk111, ((N) * (N) * (M) * (M)), double);
	tempQikk111 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQikk111, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQikk111[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQikk111[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQikk111[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQikk111[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQikk111[mz1][mz2][mz3] = &_lin_tempQikk111[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQikk112 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQikk112, ((N) * (N) * (M) * (M)), double);
	tempQikk112 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQikk112, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQikk112[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQikk112[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQikk112[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQikk112[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQikk112[mz1][mz2][mz3] = &_lin_tempQikk112[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQikk113 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQikk113, ((N) * (N) * (M) * (M)), double);
	tempQikk113 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQikk113, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQikk113[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQikk113[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQikk113[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQikk113[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQikk113[mz1][mz2][mz3] = &_lin_tempQikk113[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQikk114 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQikk114, ((N) * (N) * (M) * (M)), double);
	tempQikk114 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQikk114, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQikk114[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQikk114[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQikk114[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQikk114[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQikk114[mz1][mz2][mz3] = &_lin_tempQikk114[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQikk115 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQikk115, ((N) * (N) * (M) * (M)), double);
	tempQikk115 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQikk115, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQikk115[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQikk115[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQikk115[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQikk115[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQikk115[mz1][mz2][mz3] = &_lin_tempQikk115[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann011 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann011, ((N) * (N) * (M) * (M)), double);
	tempQiann011 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann011, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann011[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann011[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann011[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann011[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann011[mz1][mz2][mz3] = &_lin_tempQiann011[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann012 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann012, ((N) * (N) * (M) * (M)), double);
	tempQiann012 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann012, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann012[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann012[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann012[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann012[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann012[mz1][mz2][mz3] = &_lin_tempQiann012[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann013 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann013, ((N) * (N) * (M) * (M)), double);
	tempQiann013 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann013, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann013[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann013[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann013[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann013[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann013[mz1][mz2][mz3] = &_lin_tempQiann013[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann014 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann014, ((N) * (N) * (M) * (M)), double);
	tempQiann014 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann014, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann014[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann014[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann014[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann014[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann014[mz1][mz2][mz3] = &_lin_tempQiann014[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann015 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann015, ((N) * (N) * (M) * (M)), double);
	tempQiann015 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann015, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann015[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann015[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann015[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann015[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann015[mz1][mz2][mz3] = &_lin_tempQiann015[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann016 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann016, ((N) * (N) * (M) * (M)), double);
	tempQiann016 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann016, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann016[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann016[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann016[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann016[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann016[mz1][mz2][mz3] = &_lin_tempQiann016[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann021 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann021, ((N) * (N) * (M) * (M)), double);
	tempQiann021 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann021, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann021[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann021[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann021[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann021[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann021[mz1][mz2][mz3] = &_lin_tempQiann021[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann022 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann022, ((N) * (N) * (M) * (M)), double);
	tempQiann022 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann022, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann022[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann022[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann022[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann022[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann022[mz1][mz2][mz3] = &_lin_tempQiann022[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann023 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann023, ((N) * (N) * (M) * (M)), double);
	tempQiann023 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann023, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann023[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann023[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann023[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann023[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann023[mz1][mz2][mz3] = &_lin_tempQiann023[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann024 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann024, ((N) * (N) * (M) * (M)), double);
	tempQiann024 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann024, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann024[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann024[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann024[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann024[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann024[mz1][mz2][mz3] = &_lin_tempQiann024[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann025 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann025, ((N) * (N) * (M) * (M)), double);
	tempQiann025 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann025, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann025[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann025[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann025[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann025[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann025[mz1][mz2][mz3] = &_lin_tempQiann025[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann026 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann026, ((N) * (N) * (M) * (M)), double);
	tempQiann026 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann026, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann026[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann026[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann026[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann026[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann026[mz1][mz2][mz3] = &_lin_tempQiann026[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann101 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann101, ((N) * (N) * (M) * (M)), double);
	tempQiann101 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann101, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann101[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann101[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann101[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann101[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann101[mz1][mz2][mz3] = &_lin_tempQiann101[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann102 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann102, ((N) * (N) * (M) * (M)), double);
	tempQiann102 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann102, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann102[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann102[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann102[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann102[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann102[mz1][mz2][mz3] = &_lin_tempQiann102[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann103 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann103, ((N) * (N) * (M) * (M)), double);
	tempQiann103 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann103, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann103[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann103[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann103[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann103[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann103[mz1][mz2][mz3] = &_lin_tempQiann103[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann104 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann104, ((N) * (N) * (M) * (M)), double);
	tempQiann104 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann104, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann104[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann104[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann104[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann104[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann104[mz1][mz2][mz3] = &_lin_tempQiann104[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann105 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann105, ((N) * (N) * (M) * (M)), double);
	tempQiann105 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann105, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann105[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann105[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann105[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann105[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann105[mz1][mz2][mz3] = &_lin_tempQiann105[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann106 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann106, ((N) * (N) * (M) * (M)), double);
	tempQiann106 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann106, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann106[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann106[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann106[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann106[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann106[mz1][mz2][mz3] = &_lin_tempQiann106[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann111 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann111, ((N) * (N) * (M) * (M)), double);
	tempQiann111 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann111, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann111[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann111[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann111[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann111[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann111[mz1][mz2][mz3] = &_lin_tempQiann111[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann112 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann112, ((N) * (N) * (M) * (M)), double);
	tempQiann112 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann112, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann112[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann112[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann112[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann112[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann112[mz1][mz2][mz3] = &_lin_tempQiann112[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann113 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann113, ((N) * (N) * (M) * (M)), double);
	tempQiann113 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann113, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann113[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann113[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann113[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann113[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann113[mz1][mz2][mz3] = &_lin_tempQiann113[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann114 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann114, ((N) * (N) * (M) * (M)), double);
	tempQiann114 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann114, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann114[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann114[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann114[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann114[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann114[mz1][mz2][mz3] = &_lin_tempQiann114[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann115 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann115, ((N) * (N) * (M) * (M)), double);
	tempQiann115 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann115, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann115[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann115[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann115[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann115[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann115[mz1][mz2][mz3] = &_lin_tempQiann115[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann116 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann116, ((N) * (N) * (M) * (M)), double);
	tempQiann116 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann116, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann116[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann116[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann116[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann116[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann116[mz1][mz2][mz3] = &_lin_tempQiann116[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann121 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann121, ((N) * (N) * (M) * (M)), double);
	tempQiann121 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann121, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann121[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann121[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann121[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann121[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann121[mz1][mz2][mz3] = &_lin_tempQiann121[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann122 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann122, ((N) * (N) * (M) * (M)), double);
	tempQiann122 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann122, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann122[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann122[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann122[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann122[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann122[mz1][mz2][mz3] = &_lin_tempQiann122[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann123 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann123, ((N) * (N) * (M) * (M)), double);
	tempQiann123 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann123, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann123[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann123[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann123[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann123[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann123[mz1][mz2][mz3] = &_lin_tempQiann123[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann124 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann124, ((N) * (N) * (M) * (M)), double);
	tempQiann124 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann124, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann124[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann124[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann124[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann124[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann124[mz1][mz2][mz3] = &_lin_tempQiann124[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann125 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann125, ((N) * (N) * (M) * (M)), double);
	tempQiann125 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann125, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann125[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann125[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann125[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann125[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann125[mz1][mz2][mz3] = &_lin_tempQiann125[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann126 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann126, ((N) * (N) * (M) * (M)), double);
	tempQiann126 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann126, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann126[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann126[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann126[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann126[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann126[mz1][mz2][mz3] = &_lin_tempQiann126[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann201 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann201, ((N) * (N) * (M) * (M)), double);
	tempQiann201 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann201, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann201[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann201[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann201[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann201[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann201[mz1][mz2][mz3] = &_lin_tempQiann201[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann202 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann202, ((N) * (N) * (M) * (M)), double);
	tempQiann202 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann202, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann202[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann202[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann202[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann202[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann202[mz1][mz2][mz3] = &_lin_tempQiann202[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann203 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann203, ((N) * (N) * (M) * (M)), double);
	tempQiann203 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann203, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann203[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann203[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann203[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann203[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann203[mz1][mz2][mz3] = &_lin_tempQiann203[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann204 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann204, ((N) * (N) * (M) * (M)), double);
	tempQiann204 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann204, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann204[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann204[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann204[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann204[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann204[mz1][mz2][mz3] = &_lin_tempQiann204[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann205 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann205, ((N) * (N) * (M) * (M)), double);
	tempQiann205 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann205, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann205[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann205[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann205[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann205[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann205[mz1][mz2][mz3] = &_lin_tempQiann205[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann206 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann206, ((N) * (N) * (M) * (M)), double);
	tempQiann206 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann206, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann206[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann206[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann206[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann206[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann206[mz1][mz2][mz3] = &_lin_tempQiann206[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann211 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann211, ((N) * (N) * (M) * (M)), double);
	tempQiann211 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann211, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann211[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann211[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann211[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann211[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann211[mz1][mz2][mz3] = &_lin_tempQiann211[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann212 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann212, ((N) * (N) * (M) * (M)), double);
	tempQiann212 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann212, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann212[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann212[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann212[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann212[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann212[mz1][mz2][mz3] = &_lin_tempQiann212[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann213 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann213, ((N) * (N) * (M) * (M)), double);
	tempQiann213 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann213, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann213[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann213[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann213[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann213[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann213[mz1][mz2][mz3] = &_lin_tempQiann213[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann214 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann214, ((N) * (N) * (M) * (M)), double);
	tempQiann214 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann214, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann214[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann214[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann214[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann214[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann214[mz1][mz2][mz3] = &_lin_tempQiann214[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann215 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann215, ((N) * (N) * (M) * (M)), double);
	tempQiann215 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann215, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann215[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann215[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann215[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann215[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann215[mz1][mz2][mz3] = &_lin_tempQiann215[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann216 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann216, ((N) * (N) * (M) * (M)), double);
	tempQiann216 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann216, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann216[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann216[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann216[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann216[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann216[mz1][mz2][mz3] = &_lin_tempQiann216[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann221 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann221, ((N) * (N) * (M) * (M)), double);
	tempQiann221 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann221, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann221[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann221[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann221[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann221[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann221[mz1][mz2][mz3] = &_lin_tempQiann221[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann222 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann222, ((N) * (N) * (M) * (M)), double);
	tempQiann222 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann222, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann222[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann222[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann222[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann222[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann222[mz1][mz2][mz3] = &_lin_tempQiann222[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann223 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann223, ((N) * (N) * (M) * (M)), double);
	tempQiann223 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann223, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann223[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann223[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann223[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann223[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann223[mz1][mz2][mz3] = &_lin_tempQiann223[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann224 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann224, ((N) * (N) * (M) * (M)), double);
	tempQiann224 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann224, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann224[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann224[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann224[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann224[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann224[mz1][mz2][mz3] = &_lin_tempQiann224[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann225 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann225, ((N) * (N) * (M) * (M)), double);
	tempQiann225 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann225, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann225[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann225[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann225[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann225[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann225[mz1][mz2][mz3] = &_lin_tempQiann225[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiann226 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiann226, ((N) * (N) * (M) * (M)), double);
	tempQiann226 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiann226, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiann226[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiann226[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiann226[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiann226[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiann226[mz1][mz2][mz3] = &_lin_tempQiann226[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiand011 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiand011, ((N) * (N) * (M) * (M)), double);
	tempQiand011 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiand011, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiand011[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiand011[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiand011[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiand011[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiand011[mz1][mz2][mz3] = &_lin_tempQiand011[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiand012 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiand012, ((N) * (N) * (M) * (M)), double);
	tempQiand012 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiand012, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiand012[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiand012[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiand012[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiand012[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiand012[mz1][mz2][mz3] = &_lin_tempQiand012[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiand013 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiand013, ((N) * (N) * (M) * (M)), double);
	tempQiand013 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiand013, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiand013[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiand013[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiand013[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiand013[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiand013[mz1][mz2][mz3] = &_lin_tempQiand013[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiand014 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiand014, ((N) * (N) * (M) * (M)), double);
	tempQiand014 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiand014, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiand014[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiand014[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiand014[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiand014[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiand014[mz1][mz2][mz3] = &_lin_tempQiand014[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiand015 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiand015, ((N) * (N) * (M) * (M)), double);
	tempQiand015 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiand015, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiand015[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiand015[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiand015[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiand015[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiand015[mz1][mz2][mz3] = &_lin_tempQiand015[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiand101 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiand101, ((N) * (N) * (M) * (M)), double);
	tempQiand101 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiand101, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiand101[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiand101[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiand101[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiand101[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiand101[mz1][mz2][mz3] = &_lin_tempQiand101[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiand102 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiand102, ((N) * (N) * (M) * (M)), double);
	tempQiand102 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiand102, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiand102[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiand102[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiand102[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiand102[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiand102[mz1][mz2][mz3] = &_lin_tempQiand102[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiand103 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiand103, ((N) * (N) * (M) * (M)), double);
	tempQiand103 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiand103, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiand103[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiand103[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiand103[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiand103[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiand103[mz1][mz2][mz3] = &_lin_tempQiand103[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiand104 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiand104, ((N) * (N) * (M) * (M)), double);
	tempQiand104 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiand104, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiand104[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiand104[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiand104[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiand104[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiand104[mz1][mz2][mz3] = &_lin_tempQiand104[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiand105 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiand105, ((N) * (N) * (M) * (M)), double);
	tempQiand105 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiand105, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiand105[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiand105[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiand105[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiand105[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiand105[mz1][mz2][mz3] = &_lin_tempQiand105[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiand111 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiand111, ((N) * (N) * (M) * (M)), double);
	tempQiand111 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiand111, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiand111[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiand111[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiand111[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiand111[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiand111[mz1][mz2][mz3] = &_lin_tempQiand111[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiand112 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiand112, ((N) * (N) * (M) * (M)), double);
	tempQiand112 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiand112, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiand112[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiand112[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiand112[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiand112[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiand112[mz1][mz2][mz3] = &_lin_tempQiand112[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiand113 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiand113, ((N) * (N) * (M) * (M)), double);
	tempQiand113 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiand113, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiand113[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiand113[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiand113[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiand113[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiand113[mz1][mz2][mz3] = &_lin_tempQiand113[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiand114 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiand114, ((N) * (N) * (M) * (M)), double);
	tempQiand114 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiand114, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiand114[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiand114[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiand114[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiand114[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiand114[mz1][mz2][mz3] = &_lin_tempQiand114[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiand115 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiand115, ((N) * (N) * (M) * (M)), double);
	tempQiand115 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiand115, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiand115[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiand115[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiand115[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiand115[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiand115[mz1][mz2][mz3] = &_lin_tempQiand115[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiand201 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiand201, ((N) * (N) * (M) * (M)), double);
	tempQiand201 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiand201, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiand201[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiand201[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiand201[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiand201[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiand201[mz1][mz2][mz3] = &_lin_tempQiand201[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiand202 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiand202, ((N) * (N) * (M) * (M)), double);
	tempQiand202 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiand202, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiand202[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiand202[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiand202[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiand202[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiand202[mz1][mz2][mz3] = &_lin_tempQiand202[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiand203 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiand203, ((N) * (N) * (M) * (M)), double);
	tempQiand203 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiand203, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiand203[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiand203[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiand203[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiand203[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiand203[mz1][mz2][mz3] = &_lin_tempQiand203[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiand204 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiand204, ((N) * (N) * (M) * (M)), double);
	tempQiand204 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiand204, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiand204[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiand204[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiand204[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiand204[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiand204[mz1][mz2][mz3] = &_lin_tempQiand204[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiand205 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiand205, ((N) * (N) * (M) * (M)), double);
	tempQiand205 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiand205, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiand205[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiand205[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiand205[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiand205[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiand205[mz1][mz2][mz3] = &_lin_tempQiand205[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiand211 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiand211, ((N) * (N) * (M) * (M)), double);
	tempQiand211 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiand211, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiand211[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiand211[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiand211[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiand211[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiand211[mz1][mz2][mz3] = &_lin_tempQiand211[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiand212 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiand212, ((N) * (N) * (M) * (M)), double);
	tempQiand212 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiand212, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiand212[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiand212[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiand212[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiand212[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiand212[mz1][mz2][mz3] = &_lin_tempQiand212[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiand213 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiand213, ((N) * (N) * (M) * (M)), double);
	tempQiand213 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiand213, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiand213[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiand213[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiand213[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiand213[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiand213[mz1][mz2][mz3] = &_lin_tempQiand213[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiand214 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiand214, ((N) * (N) * (M) * (M)), double);
	tempQiand214 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiand214, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiand214[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiand214[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiand214[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiand214[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiand214[mz1][mz2][mz3] = &_lin_tempQiand214[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiand215 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiand215, ((N) * (N) * (M) * (M)), double);
	tempQiand215 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiand215, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiand215[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiand215[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiand215[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiand215[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiand215[mz1][mz2][mz3] = &_lin_tempQiand215[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadn011 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadn011, ((N) * (N) * (M) * (M)), double);
	tempQiadn011 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadn011, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadn011[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadn011[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadn011[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadn011[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadn011[mz1][mz2][mz3] = &_lin_tempQiadn011[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadn012 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadn012, ((N) * (N) * (M) * (M)), double);
	tempQiadn012 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadn012, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadn012[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadn012[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadn012[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadn012[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadn012[mz1][mz2][mz3] = &_lin_tempQiadn012[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadn013 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadn013, ((N) * (N) * (M) * (M)), double);
	tempQiadn013 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadn013, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadn013[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadn013[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadn013[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadn013[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadn013[mz1][mz2][mz3] = &_lin_tempQiadn013[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadn014 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadn014, ((N) * (N) * (M) * (M)), double);
	tempQiadn014 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadn014, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadn014[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadn014[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadn014[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadn014[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadn014[mz1][mz2][mz3] = &_lin_tempQiadn014[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadn015 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadn015, ((N) * (N) * (M) * (M)), double);
	tempQiadn015 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadn015, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadn015[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadn015[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadn015[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadn015[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadn015[mz1][mz2][mz3] = &_lin_tempQiadn015[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadn021 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadn021, ((N) * (N) * (M) * (M)), double);
	tempQiadn021 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadn021, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadn021[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadn021[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadn021[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadn021[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadn021[mz1][mz2][mz3] = &_lin_tempQiadn021[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadn022 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadn022, ((N) * (N) * (M) * (M)), double);
	tempQiadn022 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadn022, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadn022[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadn022[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadn022[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadn022[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadn022[mz1][mz2][mz3] = &_lin_tempQiadn022[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadn023 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadn023, ((N) * (N) * (M) * (M)), double);
	tempQiadn023 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadn023, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadn023[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadn023[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadn023[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadn023[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadn023[mz1][mz2][mz3] = &_lin_tempQiadn023[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadn024 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadn024, ((N) * (N) * (M) * (M)), double);
	tempQiadn024 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadn024, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadn024[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadn024[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadn024[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadn024[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadn024[mz1][mz2][mz3] = &_lin_tempQiadn024[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadn025 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadn025, ((N) * (N) * (M) * (M)), double);
	tempQiadn025 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadn025, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadn025[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadn025[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadn025[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadn025[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadn025[mz1][mz2][mz3] = &_lin_tempQiadn025[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadn101 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadn101, ((N) * (N) * (M) * (M)), double);
	tempQiadn101 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadn101, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadn101[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadn101[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadn101[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadn101[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadn101[mz1][mz2][mz3] = &_lin_tempQiadn101[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadn102 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadn102, ((N) * (N) * (M) * (M)), double);
	tempQiadn102 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadn102, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadn102[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadn102[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadn102[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadn102[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadn102[mz1][mz2][mz3] = &_lin_tempQiadn102[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadn103 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadn103, ((N) * (N) * (M) * (M)), double);
	tempQiadn103 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadn103, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadn103[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadn103[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadn103[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadn103[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadn103[mz1][mz2][mz3] = &_lin_tempQiadn103[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadn104 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadn104, ((N) * (N) * (M) * (M)), double);
	tempQiadn104 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadn104, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadn104[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadn104[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadn104[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadn104[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadn104[mz1][mz2][mz3] = &_lin_tempQiadn104[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadn105 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadn105, ((N) * (N) * (M) * (M)), double);
	tempQiadn105 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadn105, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadn105[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadn105[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadn105[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadn105[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadn105[mz1][mz2][mz3] = &_lin_tempQiadn105[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadn111 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadn111, ((N) * (N) * (M) * (M)), double);
	tempQiadn111 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadn111, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadn111[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadn111[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadn111[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadn111[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadn111[mz1][mz2][mz3] = &_lin_tempQiadn111[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadn112 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadn112, ((N) * (N) * (M) * (M)), double);
	tempQiadn112 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadn112, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadn112[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadn112[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadn112[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadn112[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadn112[mz1][mz2][mz3] = &_lin_tempQiadn112[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadn113 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadn113, ((N) * (N) * (M) * (M)), double);
	tempQiadn113 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadn113, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadn113[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadn113[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadn113[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadn113[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadn113[mz1][mz2][mz3] = &_lin_tempQiadn113[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadn114 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadn114, ((N) * (N) * (M) * (M)), double);
	tempQiadn114 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadn114, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadn114[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadn114[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadn114[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadn114[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadn114[mz1][mz2][mz3] = &_lin_tempQiadn114[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadn115 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadn115, ((N) * (N) * (M) * (M)), double);
	tempQiadn115 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadn115, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadn115[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadn115[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadn115[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadn115[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadn115[mz1][mz2][mz3] = &_lin_tempQiadn115[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadn121 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadn121, ((N) * (N) * (M) * (M)), double);
	tempQiadn121 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadn121, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadn121[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadn121[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadn121[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadn121[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadn121[mz1][mz2][mz3] = &_lin_tempQiadn121[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadn122 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadn122, ((N) * (N) * (M) * (M)), double);
	tempQiadn122 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadn122, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadn122[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadn122[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadn122[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadn122[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadn122[mz1][mz2][mz3] = &_lin_tempQiadn122[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadn123 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadn123, ((N) * (N) * (M) * (M)), double);
	tempQiadn123 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadn123, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadn123[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadn123[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadn123[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadn123[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadn123[mz1][mz2][mz3] = &_lin_tempQiadn123[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadn124 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadn124, ((N) * (N) * (M) * (M)), double);
	tempQiadn124 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadn124, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadn124[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadn124[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadn124[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadn124[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadn124[mz1][mz2][mz3] = &_lin_tempQiadn124[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadn125 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadn125, ((N) * (N) * (M) * (M)), double);
	tempQiadn125 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadn125, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadn125[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadn125[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadn125[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadn125[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadn125[mz1][mz2][mz3] = &_lin_tempQiadn125[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadd011 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadd011, ((N) * (N) * (M) * (M)), double);
	tempQiadd011 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadd011, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadd011[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadd011[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadd011[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadd011[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadd011[mz1][mz2][mz3] = &_lin_tempQiadd011[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadd012 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadd012, ((N) * (N) * (M) * (M)), double);
	tempQiadd012 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadd012, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadd012[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadd012[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadd012[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadd012[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadd012[mz1][mz2][mz3] = &_lin_tempQiadd012[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadd013 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadd013, ((N) * (N) * (M) * (M)), double);
	tempQiadd013 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadd013, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadd013[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadd013[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadd013[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadd013[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadd013[mz1][mz2][mz3] = &_lin_tempQiadd013[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadd014 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadd014, ((N) * (N) * (M) * (M)), double);
	tempQiadd014 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadd014, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadd014[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadd014[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadd014[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadd014[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadd014[mz1][mz2][mz3] = &_lin_tempQiadd014[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadd015 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadd015, ((N) * (N) * (M) * (M)), double);
	tempQiadd015 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadd015, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadd015[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadd015[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadd015[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadd015[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadd015[mz1][mz2][mz3] = &_lin_tempQiadd015[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadd101 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadd101, ((N) * (N) * (M) * (M)), double);
	tempQiadd101 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadd101, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadd101[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadd101[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadd101[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadd101[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadd101[mz1][mz2][mz3] = &_lin_tempQiadd101[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadd102 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadd102, ((N) * (N) * (M) * (M)), double);
	tempQiadd102 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadd102, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadd102[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadd102[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadd102[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadd102[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadd102[mz1][mz2][mz3] = &_lin_tempQiadd102[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadd103 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadd103, ((N) * (N) * (M) * (M)), double);
	tempQiadd103 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadd103, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadd103[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadd103[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadd103[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadd103[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadd103[mz1][mz2][mz3] = &_lin_tempQiadd103[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadd104 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadd104, ((N) * (N) * (M) * (M)), double);
	tempQiadd104 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadd104, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadd104[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadd104[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadd104[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadd104[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadd104[mz1][mz2][mz3] = &_lin_tempQiadd104[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadd105 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadd105, ((N) * (N) * (M) * (M)), double);
	tempQiadd105 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadd105, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadd105[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadd105[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadd105[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadd105[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadd105[mz1][mz2][mz3] = &_lin_tempQiadd105[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadd111 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadd111, ((N) * (N) * (M) * (M)), double);
	tempQiadd111 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadd111, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadd111[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadd111[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadd111[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadd111[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadd111[mz1][mz2][mz3] = &_lin_tempQiadd111[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadd112 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadd112, ((N) * (N) * (M) * (M)), double);
	tempQiadd112 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadd112, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadd112[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadd112[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadd112[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadd112[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadd112[mz1][mz2][mz3] = &_lin_tempQiadd112[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadd113 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadd113, ((N) * (N) * (M) * (M)), double);
	tempQiadd113 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadd113, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadd113[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadd113[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadd113[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadd113[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadd113[mz1][mz2][mz3] = &_lin_tempQiadd113[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadd114 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadd114, ((N) * (N) * (M) * (M)), double);
	tempQiadd114 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadd114, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadd114[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadd114[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadd114[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadd114[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadd114[mz1][mz2][mz3] = &_lin_tempQiadd114[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiadd115 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiadd115, ((N) * (N) * (M) * (M)), double);
	tempQiadd115 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiadd115, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiadd115[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiadd115[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiadd115[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiadd115[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiadd115[mz1][mz2][mz3] = &_lin_tempQiadd115[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQir011 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQir011, ((N) * (N) * (M) * (M)), double);
	tempQir011 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQir011, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQir011[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQir011[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQir011[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQir011[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQir011[mz1][mz2][mz3] = &_lin_tempQir011[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQir012 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQir012, ((N) * (N) * (M) * (M)), double);
	tempQir012 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQir012, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQir012[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQir012[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQir012[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQir012[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQir012[mz1][mz2][mz3] = &_lin_tempQir012[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQir101 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQir101, ((N) * (N) * (M) * (M)), double);
	tempQir101 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQir101, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQir101[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQir101[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQir101[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQir101[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQir101[mz1][mz2][mz3] = &_lin_tempQir101[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQir102 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQir102, ((N) * (N) * (M) * (M)), double);
	tempQir102 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQir102, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQir102[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQir102[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQir102[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQir102[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQir102[mz1][mz2][mz3] = &_lin_tempQir102[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQir111 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQir111, ((N) * (N) * (M) * (M)), double);
	tempQir111 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQir111, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQir111[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQir111[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQir111[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQir111[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQir111[mz1][mz2][mz3] = &_lin_tempQir111[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQir112 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQir112, ((N) * (N) * (M) * (M)), double);
	tempQir112 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQir112, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQir112[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQir112[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQir112[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQir112[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQir112[mz1][mz2][mz3] = &_lin_tempQir112[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiar011 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiar011, ((N) * (N) * (M) * (M)), double);
	tempQiar011 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiar011, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiar011[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiar011[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiar011[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiar011[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiar011[mz1][mz2][mz3] = &_lin_tempQiar011[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiar012 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiar012, ((N) * (N) * (M) * (M)), double);
	tempQiar012 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiar012, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiar012[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiar012[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiar012[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiar012[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiar012[mz1][mz2][mz3] = &_lin_tempQiar012[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiar013 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiar013, ((N) * (N) * (M) * (M)), double);
	tempQiar013 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiar013, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiar013[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiar013[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiar013[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiar013[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiar013[mz1][mz2][mz3] = &_lin_tempQiar013[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiar101 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiar101, ((N) * (N) * (M) * (M)), double);
	tempQiar101 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiar101, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiar101[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiar101[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiar101[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiar101[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiar101[mz1][mz2][mz3] = &_lin_tempQiar101[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiar102 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiar102, ((N) * (N) * (M) * (M)), double);
	tempQiar102 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiar102, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiar102[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiar102[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiar102[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiar102[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiar102[mz1][mz2][mz3] = &_lin_tempQiar102[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiar103 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiar103, ((N) * (N) * (M) * (M)), double);
	tempQiar103 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiar103, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiar103[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiar103[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiar103[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiar103[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiar103[mz1][mz2][mz3] = &_lin_tempQiar103[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiar111 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiar111, ((N) * (N) * (M) * (M)), double);
	tempQiar111 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiar111, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiar111[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiar111[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiar111[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiar111[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiar111[mz1][mz2][mz3] = &_lin_tempQiar111[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiar112 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiar112, ((N) * (N) * (M) * (M)), double);
	tempQiar112 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiar112, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiar112[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiar112[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiar112[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiar112[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiar112[mz1][mz2][mz3] = &_lin_tempQiar112[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQiar113 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQiar113, ((N) * (N) * (M) * (M)), double);
	tempQiar113 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQiar113, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQiar113[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQiar113[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQiar113[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQiar113[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQiar113[mz1][mz2][mz3] = &_lin_tempQiar113[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQilr011 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQilr011, ((N) * (N) * (M) * (M)), double);
	tempQilr011 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQilr011, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQilr011[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQilr011[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQilr011[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQilr011[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQilr011[mz1][mz2][mz3] = &_lin_tempQilr011[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQilr012 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQilr012, ((N) * (N) * (M) * (M)), double);
	tempQilr012 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQilr012, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQilr012[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQilr012[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQilr012[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQilr012[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQilr012[mz1][mz2][mz3] = &_lin_tempQilr012[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQilr101 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQilr101, ((N) * (N) * (M) * (M)), double);
	tempQilr101 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQilr101, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQilr101[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQilr101[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQilr101[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQilr101[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQilr101[mz1][mz2][mz3] = &_lin_tempQilr101[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQilr102 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQilr102, ((N) * (N) * (M) * (M)), double);
	tempQilr102 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQilr102, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQilr102[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQilr102[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQilr102[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQilr102[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQilr102[mz1][mz2][mz3] = &_lin_tempQilr102[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQilr111 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQilr111, ((N) * (N) * (M) * (M)), double);
	tempQilr111 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQilr111, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQilr111[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQilr111[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQilr111[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQilr111[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQilr111[mz1][mz2][mz3] = &_lin_tempQilr111[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQilr112 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQilr112, ((N) * (N) * (M) * (M)), double);
	tempQilr112 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQilr112, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQilr112[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQilr112[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQilr112[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQilr112[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQilr112[mz1][mz2][mz3] = &_lin_tempQilr112[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQi1 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQi1, ((N) * (N) * (M) * (M)), double);
	tempQi1 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQi1, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQi1[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQi1[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQi1[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQi1[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQi1[mz1][mz2][mz3] = &_lin_tempQi1[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQi2 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQi2, ((N) * (N) * (M) * (M)), double);
	tempQi2 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQi2, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQi2[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQi2[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQi2[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQi2[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQi2[mz1][mz2][mz3] = &_lin_tempQi2[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQia1 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQia1, ((N) * (N) * (M) * (M)), double);
	tempQia1 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQia1, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQia1[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQia1[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQia1[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQia1[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQia1[mz1][mz2][mz3] = &_lin_tempQia1[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQia2 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQia2, ((N) * (N) * (M) * (M)), double);
	tempQia2 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQia2, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQia2[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQia2[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQia2[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQia2[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQia2[mz1][mz2][mz3] = &_lin_tempQia2[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQia3 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQia3, ((N) * (N) * (M) * (M)), double);
	tempQia3 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQia3, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQia3[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQia3[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQia3[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQia3[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQia3[mz1][mz2][mz3] = &_lin_tempQia3[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQia4 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQia4, ((N) * (N) * (M) * (M)), double);
	tempQia4 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQia4, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQia4[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQia4[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQia4[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQia4[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQia4[mz1][mz2][mz3] = &_lin_tempQia4[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQia5 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQia5, ((N) * (N) * (M) * (M)), double);
	tempQia5 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQia5, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQia5[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQia5[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQia5[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQia5[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQia5[mz1][mz2][mz3] = &_lin_tempQia5[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQia6 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQia6, ((N) * (N) * (M) * (M)), double);
	tempQia6 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQia6, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQia6[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQia6[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQia6[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQia6[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQia6[mz1][mz2][mz3] = &_lin_tempQia6[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQib001 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQib001, ((N) * (N) * (M) * (M)), double);
	tempQib001 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQib001, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQib001[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQib001[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQib001[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQib001[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQib001[mz1][mz2][mz3] = &_lin_tempQib001[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQib002 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQib002, ((N) * (N) * (M) * (M)), double);
	tempQib002 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQib002, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQib002[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQib002[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQib002[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQib002[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQib002[mz1][mz2][mz3] = &_lin_tempQib002[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQib011 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQib011, ((N) * (N) * (M) * (M)), double);
	tempQib011 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQib011, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQib011[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQib011[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQib011[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQib011[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQib011[mz1][mz2][mz3] = &_lin_tempQib011[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQib012 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQib012, ((N) * (N) * (M) * (M)), double);
	tempQib012 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQib012, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQib012[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQib012[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQib012[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQib012[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQib012[mz1][mz2][mz3] = &_lin_tempQib012[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQib101 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQib101, ((N) * (N) * (M) * (M)), double);
	tempQib101 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQib101, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQib101[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQib101[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQib101[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQib101[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQib101[mz1][mz2][mz3] = &_lin_tempQib101[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQib102 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQib102, ((N) * (N) * (M) * (M)), double);
	tempQib102 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQib102, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQib102[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQib102[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQib102[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQib102[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQib102[mz1][mz2][mz3] = &_lin_tempQib102[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQib111 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQib111, ((N) * (N) * (M) * (M)), double);
	tempQib111 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQib111, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQib111[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQib111[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQib111[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQib111[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQib111[mz1][mz2][mz3] = &_lin_tempQib111[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQib112 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQib112, ((N) * (N) * (M) * (M)), double);
	tempQib112 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQib112, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQib112[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQib112[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQib112[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQib112[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQib112[mz1][mz2][mz3] = &_lin_tempQib112[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQinn011 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQinn011, ((N) * (N) * (M) * (M)), double);
	tempQinn011 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQinn011, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQinn011[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQinn011[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQinn011[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQinn011[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQinn011[mz1][mz2][mz3] = &_lin_tempQinn011[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQinn021 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQinn021, ((N) * (N) * (M) * (M)), double);
	tempQinn021 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQinn021, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQinn021[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQinn021[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQinn021[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQinn021[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQinn021[mz1][mz2][mz3] = &_lin_tempQinn021[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQinn101 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQinn101, ((N) * (N) * (M) * (M)), double);
	tempQinn101 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQinn101, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQinn101[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQinn101[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQinn101[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQinn101[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQinn101[mz1][mz2][mz3] = &_lin_tempQinn101[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQinn111 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQinn111, ((N) * (N) * (M) * (M)), double);
	tempQinn111 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQinn111, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQinn111[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQinn111[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQinn111[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQinn111[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQinn111[mz1][mz2][mz3] = &_lin_tempQinn111[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQinn121 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQinn121, ((N) * (N) * (M) * (M)), double);
	tempQinn121 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQinn121, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQinn121[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQinn121[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQinn121[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQinn121[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQinn121[mz1][mz2][mz3] = &_lin_tempQinn121[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQinn201 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQinn201, ((N) * (N) * (M) * (M)), double);
	tempQinn201 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQinn201, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQinn201[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQinn201[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQinn201[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQinn201[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQinn201[mz1][mz2][mz3] = &_lin_tempQinn201[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQinn211 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQinn211, ((N) * (N) * (M) * (M)), double);
	tempQinn211 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQinn211, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQinn211[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQinn211[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQinn211[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQinn211[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQinn211[mz1][mz2][mz3] = &_lin_tempQinn211[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQinn221 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQinn221, ((N) * (N) * (M) * (M)), double);
	tempQinn221 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQinn221, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQinn221[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQinn221[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQinn221[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQinn221[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQinn221[mz1][mz2][mz3] = &_lin_tempQinn221[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQidd011 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQidd011, ((N) * (N) * (M) * (M)), double);
	tempQidd011 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQidd011, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQidd011[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQidd011[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQidd011[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQidd011[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQidd011[mz1][mz2][mz3] = &_lin_tempQidd011[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQidd101 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQidd101, ((N) * (N) * (M) * (M)), double);
	tempQidd101 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQidd101, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQidd101[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQidd101[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQidd101[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQidd101[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQidd101[mz1][mz2][mz3] = &_lin_tempQidd101[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQidd111 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQidd111, ((N) * (N) * (M) * (M)), double);
	tempQidd111 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQidd111, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQidd111[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQidd111[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQidd111[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQidd111[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQidd111[mz1][mz2][mz3] = &_lin_tempQidd111[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQidd012 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQidd012, ((N) * (N) * (M) * (M)), double);
	tempQidd012 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQidd012, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQidd012[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQidd012[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQidd012[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQidd012[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQidd012[mz1][mz2][mz3] = &_lin_tempQidd012[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQidd102 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQidd102, ((N) * (N) * (M) * (M)), double);
	tempQidd102 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQidd102, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQidd102[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQidd102[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQidd102[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQidd102[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQidd102[mz1][mz2][mz3] = &_lin_tempQidd102[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	double* _lin_tempQidd112 = (double*)malloc(sizeof(double)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin_tempQidd112, ((N) * (N) * (M) * (M)), double);
	tempQidd112 = (double****)malloc(sizeof(double***)*(N));
	mallocCheck(tempQidd112, (N), double***);
	for (mz1=0;mz1 < N; mz1++) {
		tempQidd112[mz1] = (double***)malloc(sizeof(double**)*(N));
		mallocCheck(tempQidd112[mz1], (N), double**);
		for (mz2=0;mz2 < N; mz2++) {
			tempQidd112[mz1][mz2] = (double**)malloc(sizeof(double*)*(M));
			mallocCheck(tempQidd112[mz1][mz2], (M), double*);
			for (mz3=0;mz3 < M; mz3++) {
				tempQidd112[mz1][mz2][mz3] = &_lin_tempQidd112[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	
	_flag_seq1 = (char*)malloc(sizeof(char)*(M));
	mallocCheck(_flag_seq1, (M), char);
	memset(_flag_seq1, 'N', (M));
	
	char* _lin__flag_Q00 = (char*)malloc(sizeof(char)*((N) * (N)));
	mallocCheck(_lin__flag_Q00, ((N) * (N)), char);
	_flag_Q00 = (char**)malloc(sizeof(char*)*(N));
	mallocCheck(_flag_Q00, (N), char*);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Q00[mz1] = &_lin__flag_Q00[(mz1*(N))];
	}
	memset(_lin__flag_Q00, 'N', ((N) * (N)));
	
	char* _lin__flag_Q10 = (char*)malloc(sizeof(char)*((N) * (N)));
	mallocCheck(_lin__flag_Q10, ((N) * (N)), char);
	_flag_Q10 = (char**)malloc(sizeof(char*)*(N));
	mallocCheck(_flag_Q10, (N), char*);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Q10[mz1] = &_lin__flag_Q10[(mz1*(N))];
	}
	memset(_lin__flag_Q10, 'N', ((N) * (N)));
	
	char* _lin__flag_Qi = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qi, ((N) * (N) * (M) * (M)), char);
	_flag_Qi = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qi, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qi[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qi[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qi[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qi[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qi[mz1][mz2][mz3] = &_lin__flag_Qi[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qi, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qiy = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qiy, ((N) * (N) * (M) * (M)), char);
	_flag_Qiy = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qiy, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qiy[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qiy[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qiy[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qiy[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qiy[mz1][mz2][mz3] = &_lin__flag_Qiy[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qiy, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qixm00 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qixm00, ((N) * (N) * (M) * (M)), char);
	_flag_Qixm00 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qixm00, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qixm00[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qixm00[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qixm00[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qixm00[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qixm00[mz1][mz2][mz3] = &_lin__flag_Qixm00[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qixm00, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qixm01 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qixm01, ((N) * (N) * (M) * (M)), char);
	_flag_Qixm01 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qixm01, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qixm01[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qixm01[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qixm01[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qixm01[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qixm01[mz1][mz2][mz3] = &_lin__flag_Qixm01[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qixm01, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qixm02 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qixm02, ((N) * (N) * (M) * (M)), char);
	_flag_Qixm02 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qixm02, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qixm02[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qixm02[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qixm02[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qixm02[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qixm02[mz1][mz2][mz3] = &_lin__flag_Qixm02[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qixm02, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qixm10 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qixm10, ((N) * (N) * (M) * (M)), char);
	_flag_Qixm10 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qixm10, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qixm10[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qixm10[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qixm10[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qixm10[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qixm10[mz1][mz2][mz3] = &_lin__flag_Qixm10[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qixm10, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qixm11 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qixm11, ((N) * (N) * (M) * (M)), char);
	_flag_Qixm11 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qixm11, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qixm11[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qixm11[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qixm11[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qixm11[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qixm11[mz1][mz2][mz3] = &_lin__flag_Qixm11[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qixm11, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qixm12 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qixm12, ((N) * (N) * (M) * (M)), char);
	_flag_Qixm12 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qixm12, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qixm12[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qixm12[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qixm12[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qixm12[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qixm12[mz1][mz2][mz3] = &_lin__flag_Qixm12[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qixm12, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qixk00 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qixk00, ((N) * (N) * (M) * (M)), char);
	_flag_Qixk00 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qixk00, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qixk00[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qixk00[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qixk00[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qixk00[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qixk00[mz1][mz2][mz3] = &_lin__flag_Qixk00[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qixk00, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qixk01 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qixk01, ((N) * (N) * (M) * (M)), char);
	_flag_Qixk01 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qixk01, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qixk01[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qixk01[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qixk01[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qixk01[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qixk01[mz1][mz2][mz3] = &_lin__flag_Qixk01[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qixk01, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qixk10 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qixk10, ((N) * (N) * (M) * (M)), char);
	_flag_Qixk10 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qixk10, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qixk10[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qixk10[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qixk10[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qixk10[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qixk10[mz1][mz2][mz3] = &_lin__flag_Qixk10[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qixk10, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qixk11 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qixk11, ((N) * (N) * (M) * (M)), char);
	_flag_Qixk11 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qixk11, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qixk11[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qixk11[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qixk11[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qixk11[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qixk11[mz1][mz2][mz3] = &_lin__flag_Qixk11[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qixk11, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qimm02 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qimm02, ((N) * (N) * (M) * (M)), char);
	_flag_Qimm02 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qimm02, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qimm02[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qimm02[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qimm02[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qimm02[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qimm02[mz1][mz2][mz3] = &_lin__flag_Qimm02[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qimm02, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qimm12 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qimm12, ((N) * (N) * (M) * (M)), char);
	_flag_Qimm12 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qimm12, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qimm12[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qimm12[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qimm12[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qimm12[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qimm12[mz1][mz2][mz3] = &_lin__flag_Qimm12[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qimm12, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qimm20 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qimm20, ((N) * (N) * (M) * (M)), char);
	_flag_Qimm20 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qimm20, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qimm20[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qimm20[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qimm20[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qimm20[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qimm20[mz1][mz2][mz3] = &_lin__flag_Qimm20[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qimm20, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qimm21 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qimm21, ((N) * (N) * (M) * (M)), char);
	_flag_Qimm21 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qimm21, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qimm21[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qimm21[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qimm21[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qimm21[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qimm21[mz1][mz2][mz3] = &_lin__flag_Qimm21[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qimm21, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qimm22 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qimm22, ((N) * (N) * (M) * (M)), char);
	_flag_Qimm22 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qimm22, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qimm22[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qimm22[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qimm22[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qimm22[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qimm22[mz1][mz2][mz3] = &_lin__flag_Qimm22[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qimm22, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qimk01 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qimk01, ((N) * (N) * (M) * (M)), char);
	_flag_Qimk01 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qimk01, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qimk01[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qimk01[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qimk01[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qimk01[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qimk01[mz1][mz2][mz3] = &_lin__flag_Qimk01[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qimk01, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qimk11 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qimk11, ((N) * (N) * (M) * (M)), char);
	_flag_Qimk11 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qimk11, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qimk11[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qimk11[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qimk11[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qimk11[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qimk11[mz1][mz2][mz3] = &_lin__flag_Qimk11[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qimk11, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qimk20 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qimk20, ((N) * (N) * (M) * (M)), char);
	_flag_Qimk20 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qimk20, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qimk20[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qimk20[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qimk20[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qimk20[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qimk20[mz1][mz2][mz3] = &_lin__flag_Qimk20[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qimk20, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qimk21 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qimk21, ((N) * (N) * (M) * (M)), char);
	_flag_Qimk21 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qimk21, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qimk21[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qimk21[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qimk21[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qimk21[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qimk21[mz1][mz2][mz3] = &_lin__flag_Qimk21[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qimk21, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qikm10 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qikm10, ((N) * (N) * (M) * (M)), char);
	_flag_Qikm10 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qikm10, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qikm10[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qikm10[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qikm10[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qikm10[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qikm10[mz1][mz2][mz3] = &_lin__flag_Qikm10[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qikm10, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qikm11 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qikm11, ((N) * (N) * (M) * (M)), char);
	_flag_Qikm11 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qikm11, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qikm11[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qikm11[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qikm11[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qikm11[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qikm11[mz1][mz2][mz3] = &_lin__flag_Qikm11[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qikm11, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qikm02 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qikm02, ((N) * (N) * (M) * (M)), char);
	_flag_Qikm02 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qikm02, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qikm02[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qikm02[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qikm02[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qikm02[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qikm02[mz1][mz2][mz3] = &_lin__flag_Qikm02[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qikm02, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qikm12 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qikm12, ((N) * (N) * (M) * (M)), char);
	_flag_Qikm12 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qikm12, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qikm12[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qikm12[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qikm12[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qikm12[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qikm12[mz1][mz2][mz3] = &_lin__flag_Qikm12[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qikm12, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qikk01 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qikk01, ((N) * (N) * (M) * (M)), char);
	_flag_Qikk01 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qikk01, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qikk01[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qikk01[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qikk01[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qikk01[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qikk01[mz1][mz2][mz3] = &_lin__flag_Qikk01[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qikk01, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qikk10 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qikk10, ((N) * (N) * (M) * (M)), char);
	_flag_Qikk10 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qikk10, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qikk10[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qikk10[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qikk10[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qikk10[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qikk10[mz1][mz2][mz3] = &_lin__flag_Qikk10[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qikk10, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qikk11 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qikk11, ((N) * (N) * (M) * (M)), char);
	_flag_Qikk11 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qikk11, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qikk11[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qikk11[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qikk11[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qikk11[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qikk11[mz1][mz2][mz3] = &_lin__flag_Qikk11[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qikk11, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qiann01 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qiann01, ((N) * (N) * (M) * (M)), char);
	_flag_Qiann01 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qiann01, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qiann01[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qiann01[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qiann01[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qiann01[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qiann01[mz1][mz2][mz3] = &_lin__flag_Qiann01[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qiann01, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qiann02 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qiann02, ((N) * (N) * (M) * (M)), char);
	_flag_Qiann02 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qiann02, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qiann02[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qiann02[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qiann02[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qiann02[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qiann02[mz1][mz2][mz3] = &_lin__flag_Qiann02[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qiann02, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qiann10 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qiann10, ((N) * (N) * (M) * (M)), char);
	_flag_Qiann10 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qiann10, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qiann10[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qiann10[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qiann10[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qiann10[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qiann10[mz1][mz2][mz3] = &_lin__flag_Qiann10[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qiann10, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qiann11 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qiann11, ((N) * (N) * (M) * (M)), char);
	_flag_Qiann11 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qiann11, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qiann11[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qiann11[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qiann11[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qiann11[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qiann11[mz1][mz2][mz3] = &_lin__flag_Qiann11[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qiann11, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qiann12 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qiann12, ((N) * (N) * (M) * (M)), char);
	_flag_Qiann12 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qiann12, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qiann12[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qiann12[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qiann12[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qiann12[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qiann12[mz1][mz2][mz3] = &_lin__flag_Qiann12[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qiann12, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qiann20 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qiann20, ((N) * (N) * (M) * (M)), char);
	_flag_Qiann20 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qiann20, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qiann20[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qiann20[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qiann20[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qiann20[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qiann20[mz1][mz2][mz3] = &_lin__flag_Qiann20[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qiann20, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qiann21 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qiann21, ((N) * (N) * (M) * (M)), char);
	_flag_Qiann21 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qiann21, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qiann21[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qiann21[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qiann21[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qiann21[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qiann21[mz1][mz2][mz3] = &_lin__flag_Qiann21[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qiann21, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qiann22 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qiann22, ((N) * (N) * (M) * (M)), char);
	_flag_Qiann22 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qiann22, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qiann22[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qiann22[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qiann22[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qiann22[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qiann22[mz1][mz2][mz3] = &_lin__flag_Qiann22[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qiann22, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qiand01 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qiand01, ((N) * (N) * (M) * (M)), char);
	_flag_Qiand01 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qiand01, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qiand01[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qiand01[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qiand01[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qiand01[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qiand01[mz1][mz2][mz3] = &_lin__flag_Qiand01[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qiand01, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qiand10 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qiand10, ((N) * (N) * (M) * (M)), char);
	_flag_Qiand10 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qiand10, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qiand10[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qiand10[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qiand10[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qiand10[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qiand10[mz1][mz2][mz3] = &_lin__flag_Qiand10[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qiand10, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qiand11 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qiand11, ((N) * (N) * (M) * (M)), char);
	_flag_Qiand11 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qiand11, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qiand11[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qiand11[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qiand11[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qiand11[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qiand11[mz1][mz2][mz3] = &_lin__flag_Qiand11[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qiand11, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qiand20 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qiand20, ((N) * (N) * (M) * (M)), char);
	_flag_Qiand20 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qiand20, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qiand20[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qiand20[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qiand20[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qiand20[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qiand20[mz1][mz2][mz3] = &_lin__flag_Qiand20[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qiand20, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qiand21 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qiand21, ((N) * (N) * (M) * (M)), char);
	_flag_Qiand21 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qiand21, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qiand21[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qiand21[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qiand21[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qiand21[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qiand21[mz1][mz2][mz3] = &_lin__flag_Qiand21[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qiand21, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qiadn01 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qiadn01, ((N) * (N) * (M) * (M)), char);
	_flag_Qiadn01 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qiadn01, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qiadn01[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qiadn01[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qiadn01[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qiadn01[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qiadn01[mz1][mz2][mz3] = &_lin__flag_Qiadn01[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qiadn01, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qiadn02 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qiadn02, ((N) * (N) * (M) * (M)), char);
	_flag_Qiadn02 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qiadn02, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qiadn02[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qiadn02[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qiadn02[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qiadn02[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qiadn02[mz1][mz2][mz3] = &_lin__flag_Qiadn02[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qiadn02, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qiadn10 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qiadn10, ((N) * (N) * (M) * (M)), char);
	_flag_Qiadn10 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qiadn10, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qiadn10[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qiadn10[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qiadn10[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qiadn10[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qiadn10[mz1][mz2][mz3] = &_lin__flag_Qiadn10[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qiadn10, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qiadn11 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qiadn11, ((N) * (N) * (M) * (M)), char);
	_flag_Qiadn11 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qiadn11, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qiadn11[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qiadn11[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qiadn11[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qiadn11[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qiadn11[mz1][mz2][mz3] = &_lin__flag_Qiadn11[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qiadn11, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qiadn12 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qiadn12, ((N) * (N) * (M) * (M)), char);
	_flag_Qiadn12 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qiadn12, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qiadn12[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qiadn12[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qiadn12[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qiadn12[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qiadn12[mz1][mz2][mz3] = &_lin__flag_Qiadn12[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qiadn12, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qiadd01 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qiadd01, ((N) * (N) * (M) * (M)), char);
	_flag_Qiadd01 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qiadd01, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qiadd01[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qiadd01[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qiadd01[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qiadd01[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qiadd01[mz1][mz2][mz3] = &_lin__flag_Qiadd01[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qiadd01, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qiadd10 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qiadd10, ((N) * (N) * (M) * (M)), char);
	_flag_Qiadd10 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qiadd10, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qiadd10[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qiadd10[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qiadd10[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qiadd10[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qiadd10[mz1][mz2][mz3] = &_lin__flag_Qiadd10[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qiadd10, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qiadd11 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qiadd11, ((N) * (N) * (M) * (M)), char);
	_flag_Qiadd11 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qiadd11, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qiadd11[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qiadd11[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qiadd11[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qiadd11[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qiadd11[mz1][mz2][mz3] = &_lin__flag_Qiadd11[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qiadd11, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qiar01 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qiar01, ((N) * (N) * (M) * (M)), char);
	_flag_Qiar01 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qiar01, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qiar01[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qiar01[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qiar01[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qiar01[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qiar01[mz1][mz2][mz3] = &_lin__flag_Qiar01[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qiar01, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qiar10 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qiar10, ((N) * (N) * (M) * (M)), char);
	_flag_Qiar10 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qiar10, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qiar10[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qiar10[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qiar10[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qiar10[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qiar10[mz1][mz2][mz3] = &_lin__flag_Qiar10[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qiar10, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qiar11 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qiar11, ((N) * (N) * (M) * (M)), char);
	_flag_Qiar11 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qiar11, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qiar11[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qiar11[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qiar11[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qiar11[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qiar11[mz1][mz2][mz3] = &_lin__flag_Qiar11[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qiar11, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qilr01 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qilr01, ((N) * (N) * (M) * (M)), char);
	_flag_Qilr01 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qilr01, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qilr01[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qilr01[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qilr01[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qilr01[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qilr01[mz1][mz2][mz3] = &_lin__flag_Qilr01[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qilr01, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qilr10 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qilr10, ((N) * (N) * (M) * (M)), char);
	_flag_Qilr10 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qilr10, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qilr10[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qilr10[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qilr10[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qilr10[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qilr10[mz1][mz2][mz3] = &_lin__flag_Qilr10[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qilr10, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qilr11 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qilr11, ((N) * (N) * (M) * (M)), char);
	_flag_Qilr11 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qilr11, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qilr11[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qilr11[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qilr11[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qilr11[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qilr11[mz1][mz2][mz3] = &_lin__flag_Qilr11[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qilr11, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qir01 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qir01, ((N) * (N) * (M) * (M)), char);
	_flag_Qir01 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qir01, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qir01[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qir01[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qir01[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qir01[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qir01[mz1][mz2][mz3] = &_lin__flag_Qir01[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qir01, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qir10 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qir10, ((N) * (N) * (M) * (M)), char);
	_flag_Qir10 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qir10, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qir10[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qir10[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qir10[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qir10[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qir10[mz1][mz2][mz3] = &_lin__flag_Qir10[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qir10, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qir11 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qir11, ((N) * (N) * (M) * (M)), char);
	_flag_Qir11 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qir11, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qir11[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qir11[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qir11[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qir11[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qir11[mz1][mz2][mz3] = &_lin__flag_Qir11[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qir11, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qia = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qia, ((N) * (N) * (M) * (M)), char);
	_flag_Qia = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qia, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qia[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qia[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qia[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qia[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qia[mz1][mz2][mz3] = &_lin__flag_Qia[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qia, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qib00 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qib00, ((N) * (N) * (M) * (M)), char);
	_flag_Qib00 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qib00, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qib00[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qib00[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qib00[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qib00[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qib00[mz1][mz2][mz3] = &_lin__flag_Qib00[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qib00, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qib01 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qib01, ((N) * (N) * (M) * (M)), char);
	_flag_Qib01 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qib01, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qib01[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qib01[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qib01[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qib01[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qib01[mz1][mz2][mz3] = &_lin__flag_Qib01[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qib01, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qib10 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qib10, ((N) * (N) * (M) * (M)), char);
	_flag_Qib10 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qib10, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qib10[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qib10[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qib10[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qib10[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qib10[mz1][mz2][mz3] = &_lin__flag_Qib10[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qib10, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qib11 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qib11, ((N) * (N) * (M) * (M)), char);
	_flag_Qib11 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qib11, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qib11[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qib11[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qib11[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qib11[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qib11[mz1][mz2][mz3] = &_lin__flag_Qib11[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qib11, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qinn01 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qinn01, ((N) * (N) * (M) * (M)), char);
	_flag_Qinn01 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qinn01, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qinn01[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qinn01[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qinn01[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qinn01[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qinn01[mz1][mz2][mz3] = &_lin__flag_Qinn01[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qinn01, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qinn02 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qinn02, ((N) * (N) * (M) * (M)), char);
	_flag_Qinn02 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qinn02, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qinn02[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qinn02[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qinn02[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qinn02[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qinn02[mz1][mz2][mz3] = &_lin__flag_Qinn02[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qinn02, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qinn10 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qinn10, ((N) * (N) * (M) * (M)), char);
	_flag_Qinn10 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qinn10, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qinn10[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qinn10[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qinn10[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qinn10[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qinn10[mz1][mz2][mz3] = &_lin__flag_Qinn10[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qinn10, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qinn11 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qinn11, ((N) * (N) * (M) * (M)), char);
	_flag_Qinn11 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qinn11, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qinn11[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qinn11[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qinn11[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qinn11[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qinn11[mz1][mz2][mz3] = &_lin__flag_Qinn11[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qinn11, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qinn12 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qinn12, ((N) * (N) * (M) * (M)), char);
	_flag_Qinn12 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qinn12, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qinn12[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qinn12[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qinn12[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qinn12[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qinn12[mz1][mz2][mz3] = &_lin__flag_Qinn12[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qinn12, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qinn20 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qinn20, ((N) * (N) * (M) * (M)), char);
	_flag_Qinn20 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qinn20, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qinn20[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qinn20[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qinn20[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qinn20[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qinn20[mz1][mz2][mz3] = &_lin__flag_Qinn20[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qinn20, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qinn21 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qinn21, ((N) * (N) * (M) * (M)), char);
	_flag_Qinn21 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qinn21, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qinn21[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qinn21[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qinn21[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qinn21[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qinn21[mz1][mz2][mz3] = &_lin__flag_Qinn21[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qinn21, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qinn22 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qinn22, ((N) * (N) * (M) * (M)), char);
	_flag_Qinn22 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qinn22, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qinn22[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qinn22[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qinn22[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qinn22[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qinn22[mz1][mz2][mz3] = &_lin__flag_Qinn22[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qinn22, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qind01 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qind01, ((N) * (N) * (M) * (M)), char);
	_flag_Qind01 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qind01, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qind01[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qind01[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qind01[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qind01[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qind01[mz1][mz2][mz3] = &_lin__flag_Qind01[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qind01, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qind10 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qind10, ((N) * (N) * (M) * (M)), char);
	_flag_Qind10 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qind10, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qind10[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qind10[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qind10[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qind10[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qind10[mz1][mz2][mz3] = &_lin__flag_Qind10[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qind10, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qind11 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qind11, ((N) * (N) * (M) * (M)), char);
	_flag_Qind11 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qind11, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qind11[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qind11[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qind11[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qind11[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qind11[mz1][mz2][mz3] = &_lin__flag_Qind11[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qind11, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qind20 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qind20, ((N) * (N) * (M) * (M)), char);
	_flag_Qind20 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qind20, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qind20[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qind20[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qind20[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qind20[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qind20[mz1][mz2][mz3] = &_lin__flag_Qind20[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qind20, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qind21 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qind21, ((N) * (N) * (M) * (M)), char);
	_flag_Qind21 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qind21, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qind21[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qind21[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qind21[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qind21[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qind21[mz1][mz2][mz3] = &_lin__flag_Qind21[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qind21, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qidn01 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qidn01, ((N) * (N) * (M) * (M)), char);
	_flag_Qidn01 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qidn01, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qidn01[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qidn01[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qidn01[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qidn01[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qidn01[mz1][mz2][mz3] = &_lin__flag_Qidn01[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qidn01, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qidn02 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qidn02, ((N) * (N) * (M) * (M)), char);
	_flag_Qidn02 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qidn02, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qidn02[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qidn02[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qidn02[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qidn02[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qidn02[mz1][mz2][mz3] = &_lin__flag_Qidn02[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qidn02, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qidn10 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qidn10, ((N) * (N) * (M) * (M)), char);
	_flag_Qidn10 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qidn10, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qidn10[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qidn10[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qidn10[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qidn10[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qidn10[mz1][mz2][mz3] = &_lin__flag_Qidn10[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qidn10, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qidn11 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qidn11, ((N) * (N) * (M) * (M)), char);
	_flag_Qidn11 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qidn11, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qidn11[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qidn11[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qidn11[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qidn11[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qidn11[mz1][mz2][mz3] = &_lin__flag_Qidn11[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qidn11, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qidn12 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qidn12, ((N) * (N) * (M) * (M)), char);
	_flag_Qidn12 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qidn12, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qidn12[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qidn12[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qidn12[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qidn12[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qidn12[mz1][mz2][mz3] = &_lin__flag_Qidn12[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qidn12, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qidd01 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qidd01, ((N) * (N) * (M) * (M)), char);
	_flag_Qidd01 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qidd01, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qidd01[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qidd01[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qidd01[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qidd01[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qidd01[mz1][mz2][mz3] = &_lin__flag_Qidd01[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qidd01, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qidd10 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qidd10, ((N) * (N) * (M) * (M)), char);
	_flag_Qidd10 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qidd10, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qidd10[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qidd10[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qidd10[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qidd10[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qidd10[mz1][mz2][mz3] = &_lin__flag_Qidd10[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qidd10, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qidd11 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qidd11, ((N) * (N) * (M) * (M)), char);
	_flag_Qidd11 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qidd11, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qidd11[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qidd11[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qidd11[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qidd11[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qidd11[mz1][mz2][mz3] = &_lin__flag_Qidd11[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qidd11, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qix00 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qix00, ((N) * (N) * (M) * (M)), char);
	_flag_Qix00 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qix00, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qix00[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qix00[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qix00[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qix00[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qix00[mz1][mz2][mz3] = &_lin__flag_Qix00[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qix00, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qix01 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qix01, ((N) * (N) * (M) * (M)), char);
	_flag_Qix01 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qix01, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qix01[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qix01[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qix01[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qix01[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qix01[mz1][mz2][mz3] = &_lin__flag_Qix01[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qix01, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qix10 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qix10, ((N) * (N) * (M) * (M)), char);
	_flag_Qix10 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qix10, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qix10[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qix10[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qix10[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qix10[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qix10[mz1][mz2][mz3] = &_lin__flag_Qix10[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qix10, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qix11 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qix11, ((N) * (N) * (M) * (M)), char);
	_flag_Qix11 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qix11, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qix11[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qix11[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qix11[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qix11[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qix11[mz1][mz2][mz3] = &_lin__flag_Qix11[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qix11, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_auxqiadd01 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_auxqiadd01, ((N) * (N) * (M) * (M)), char);
	_flag_auxqiadd01 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_auxqiadd01, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_auxqiadd01[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_auxqiadd01[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_auxqiadd01[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_auxqiadd01[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_auxqiadd01[mz1][mz2][mz3] = &_lin__flag_auxqiadd01[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_auxqiadd01, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_auxqiadd10 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_auxqiadd10, ((N) * (N) * (M) * (M)), char);
	_flag_auxqiadd10 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_auxqiadd10, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_auxqiadd10[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_auxqiadd10[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_auxqiadd10[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_auxqiadd10[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_auxqiadd10[mz1][mz2][mz3] = &_lin__flag_auxqiadd10[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_auxqiadd10, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_auxqiadd11 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_auxqiadd11, ((N) * (N) * (M) * (M)), char);
	_flag_auxqiadd11 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_auxqiadd11, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_auxqiadd11[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_auxqiadd11[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_auxqiadd11[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_auxqiadd11[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_auxqiadd11[mz1][mz2][mz3] = &_lin__flag_auxqiadd11[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_auxqiadd11, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_auxqia01 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_auxqia01, ((N) * (N) * (M) * (M)), char);
	_flag_auxqia01 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_auxqia01, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_auxqia01[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_auxqia01[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_auxqia01[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_auxqia01[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_auxqia01[mz1][mz2][mz3] = &_lin__flag_auxqia01[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_auxqia01, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_auxqia10 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_auxqia10, ((N) * (N) * (M) * (M)), char);
	_flag_auxqia10 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_auxqia10, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_auxqia10[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_auxqia10[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_auxqia10[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_auxqia10[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_auxqia10[mz1][mz2][mz3] = &_lin__flag_auxqia10[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_auxqia10, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_auxqia11 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_auxqia11, ((N) * (N) * (M) * (M)), char);
	_flag_auxqia11 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_auxqia11, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_auxqia11[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_auxqia11[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_auxqia11[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_auxqia11[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_auxqia11[mz1][mz2][mz3] = &_lin__flag_auxqia11[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_auxqia11, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qb0 = (char*)malloc(sizeof(char)*((N) * (N)));
	mallocCheck(_lin__flag_Qb0, ((N) * (N)), char);
	_flag_Qb0 = (char**)malloc(sizeof(char*)*(N));
	mallocCheck(_flag_Qb0, (N), char*);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qb0[mz1] = &_lin__flag_Qb0[(mz1*(N))];
	}
	memset(_lin__flag_Qb0, 'N', ((N) * (N)));
	
	char* _lin__flag_Qg0 = (char*)malloc(sizeof(char)*((N-6) * (N) * (N-5) * (N-1)));
	mallocCheck(_lin__flag_Qg0, ((N-6) * (N) * (N-5) * (N-1)), char);
	_flag_Qg0 = (char****)malloc(sizeof(char***)*(N-6));
	mallocCheck(_flag_Qg0, (N-6), char***);
	for (mz1=0;mz1 < N-6; mz1++) {
		_flag_Qg0[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qg0[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qg0[mz1][mz2] = (char**)malloc(sizeof(char*)*(N-5));
			mallocCheck(_flag_Qg0[mz1][mz2], (N-5), char*);
			for (mz3=0;mz3 < N-5; mz3++) {
				_flag_Qg0[mz1][mz2][mz3] = &_lin__flag_Qg0[(mz1*((N) * (N-5) * (N-1))) + (mz2*((N-5) * (N-1))) + (mz3*(N-1))];
			}
		}
	}
	memset(_lin__flag_Qg0, 'N', ((N-6) * (N) * (N-5) * (N-1)));
	
	char* _lin__flag_tempqg0 = (char*)malloc(sizeof(char)*((N-8) * (N) * (N-6) * (N-2)));
	mallocCheck(_lin__flag_tempqg0, ((N-8) * (N) * (N-6) * (N-2)), char);
	_flag_tempqg0 = (char****)malloc(sizeof(char***)*(N-8));
	mallocCheck(_flag_tempqg0, (N-8), char***);
	for (mz1=0;mz1 < N-8; mz1++) {
		_flag_tempqg0[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempqg0[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempqg0[mz1][mz2] = (char**)malloc(sizeof(char*)*(N-6));
			mallocCheck(_flag_tempqg0[mz1][mz2], (N-6), char*);
			for (mz3=0;mz3 < N-6; mz3++) {
				_flag_tempqg0[mz1][mz2][mz3] = &_lin__flag_tempqg0[(mz1*((N) * (N-6) * (N-2))) + (mz2*((N-6) * (N-2))) + (mz3*(N-2))];
			}
		}
	}
	memset(_lin__flag_tempqg0, 'N', ((N-8) * (N) * (N-6) * (N-2)));
	
	char* _lin__flag_tempqgk0 = (char*)malloc(sizeof(char)*((N-4) * (N) * (N-3) * (N-1)));
	mallocCheck(_lin__flag_tempqgk0, ((N-4) * (N) * (N-3) * (N-1)), char);
	_flag_tempqgk0 = (char****)malloc(sizeof(char***)*(N-4));
	mallocCheck(_flag_tempqgk0, (N-4), char***);
	for (mz1=0;mz1 < N-4; mz1++) {
		_flag_tempqgk0[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempqgk0[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempqgk0[mz1][mz2] = (char**)malloc(sizeof(char*)*(N-3));
			mallocCheck(_flag_tempqgk0[mz1][mz2], (N-3), char*);
			for (mz3=0;mz3 < N-3; mz3++) {
				_flag_tempqgk0[mz1][mz2][mz3] = &_lin__flag_tempqgk0[(mz1*((N) * (N-3) * (N-1))) + (mz2*((N-3) * (N-1))) + (mz3*(N-1))];
			}
		}
	}
	memset(_lin__flag_tempqgk0, 'N', ((N-4) * (N) * (N-3) * (N-1)));
	
	char* _lin__flag_tempqgm0 = (char*)malloc(sizeof(char)*((N-4) * (N) * (N-3) * (N-1)));
	mallocCheck(_lin__flag_tempqgm0, ((N-4) * (N) * (N-3) * (N-1)), char);
	_flag_tempqgm0 = (char****)malloc(sizeof(char***)*(N-4));
	mallocCheck(_flag_tempqgm0, (N-4), char***);
	for (mz1=0;mz1 < N-4; mz1++) {
		_flag_tempqgm0[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempqgm0[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempqgm0[mz1][mz2] = (char**)malloc(sizeof(char*)*(N-3));
			mallocCheck(_flag_tempqgm0[mz1][mz2], (N-3), char*);
			for (mz3=0;mz3 < N-3; mz3++) {
				_flag_tempqgm0[mz1][mz2][mz3] = &_lin__flag_tempqgm0[(mz1*((N) * (N-3) * (N-1))) + (mz2*((N-3) * (N-1))) + (mz3*(N-1))];
			}
		}
	}
	memset(_lin__flag_tempqgm0, 'N', ((N-4) * (N) * (N-3) * (N-1)));
	
	char* _lin__flag_Qbr = (char*)malloc(sizeof(char)*((M) * (M)));
	mallocCheck(_lin__flag_Qbr, ((M) * (M)), char);
	_flag_Qbr = (char**)malloc(sizeof(char*)*(M));
	mallocCheck(_flag_Qbr, (M), char*);
	for (mz1=0;mz1 < M; mz1++) {
		_flag_Qbr[mz1] = &_lin__flag_Qbr[(mz1*(M))];
	}
	memset(_lin__flag_Qbr, 'N', ((M) * (M)));
	
	char* _lin__flag_Qgr = (char*)malloc(sizeof(char)*((M-6) * (M) * (M-5) * (M-1)));
	mallocCheck(_lin__flag_Qgr, ((M-6) * (M) * (M-5) * (M-1)), char);
	_flag_Qgr = (char****)malloc(sizeof(char***)*(M-6));
	mallocCheck(_flag_Qgr, (M-6), char***);
	for (mz1=0;mz1 < M-6; mz1++) {
		_flag_Qgr[mz1] = (char***)malloc(sizeof(char**)*(M));
		mallocCheck(_flag_Qgr[mz1], (M), char**);
		for (mz2=0;mz2 < M; mz2++) {
			_flag_Qgr[mz1][mz2] = (char**)malloc(sizeof(char*)*(M-5));
			mallocCheck(_flag_Qgr[mz1][mz2], (M-5), char*);
			for (mz3=0;mz3 < M-5; mz3++) {
				_flag_Qgr[mz1][mz2][mz3] = &_lin__flag_Qgr[(mz1*((M) * (M-5) * (M-1))) + (mz2*((M-5) * (M-1))) + (mz3*(M-1))];
			}
		}
	}
	memset(_lin__flag_Qgr, 'N', ((M-6) * (M) * (M-5) * (M-1)));
	
	char* _lin__flag_tempqgr = (char*)malloc(sizeof(char)*((M-8) * (M) * (M-6) * (M-2)));
	mallocCheck(_lin__flag_tempqgr, ((M-8) * (M) * (M-6) * (M-2)), char);
	_flag_tempqgr = (char****)malloc(sizeof(char***)*(M-8));
	mallocCheck(_flag_tempqgr, (M-8), char***);
	for (mz1=0;mz1 < M-8; mz1++) {
		_flag_tempqgr[mz1] = (char***)malloc(sizeof(char**)*(M));
		mallocCheck(_flag_tempqgr[mz1], (M), char**);
		for (mz2=0;mz2 < M; mz2++) {
			_flag_tempqgr[mz1][mz2] = (char**)malloc(sizeof(char*)*(M-6));
			mallocCheck(_flag_tempqgr[mz1][mz2], (M-6), char*);
			for (mz3=0;mz3 < M-6; mz3++) {
				_flag_tempqgr[mz1][mz2][mz3] = &_lin__flag_tempqgr[(mz1*((M) * (M-6) * (M-2))) + (mz2*((M-6) * (M-2))) + (mz3*(M-2))];
			}
		}
	}
	memset(_lin__flag_tempqgr, 'N', ((M-8) * (M) * (M-6) * (M-2)));
	
	char* _lin__flag_tempqgkr = (char*)malloc(sizeof(char)*((M-4) * (M) * (M-3) * (M-1)));
	mallocCheck(_lin__flag_tempqgkr, ((M-4) * (M) * (M-3) * (M-1)), char);
	_flag_tempqgkr = (char****)malloc(sizeof(char***)*(M-4));
	mallocCheck(_flag_tempqgkr, (M-4), char***);
	for (mz1=0;mz1 < M-4; mz1++) {
		_flag_tempqgkr[mz1] = (char***)malloc(sizeof(char**)*(M));
		mallocCheck(_flag_tempqgkr[mz1], (M), char**);
		for (mz2=0;mz2 < M; mz2++) {
			_flag_tempqgkr[mz1][mz2] = (char**)malloc(sizeof(char*)*(M-3));
			mallocCheck(_flag_tempqgkr[mz1][mz2], (M-3), char*);
			for (mz3=0;mz3 < M-3; mz3++) {
				_flag_tempqgkr[mz1][mz2][mz3] = &_lin__flag_tempqgkr[(mz1*((M) * (M-3) * (M-1))) + (mz2*((M-3) * (M-1))) + (mz3*(M-1))];
			}
		}
	}
	memset(_lin__flag_tempqgkr, 'N', ((M-4) * (M) * (M-3) * (M-1)));
	
	char* _lin__flag_tempqgmr = (char*)malloc(sizeof(char)*((M-4) * (M) * (M-3) * (M-1)));
	mallocCheck(_lin__flag_tempqgmr, ((M-4) * (M) * (M-3) * (M-1)), char);
	_flag_tempqgmr = (char****)malloc(sizeof(char***)*(M-4));
	mallocCheck(_flag_tempqgmr, (M-4), char***);
	for (mz1=0;mz1 < M-4; mz1++) {
		_flag_tempqgmr[mz1] = (char***)malloc(sizeof(char**)*(M));
		mallocCheck(_flag_tempqgmr[mz1], (M), char**);
		for (mz2=0;mz2 < M; mz2++) {
			_flag_tempqgmr[mz1][mz2] = (char**)malloc(sizeof(char*)*(M-3));
			mallocCheck(_flag_tempqgmr[mz1][mz2], (M-3), char*);
			for (mz3=0;mz3 < M-3; mz3++) {
				_flag_tempqgmr[mz1][mz2][mz3] = &_lin__flag_tempqgmr[(mz1*((M) * (M-3) * (M-1))) + (mz2*((M-3) * (M-1))) + (mz3*(M-1))];
			}
		}
	}
	memset(_lin__flag_tempqgmr, 'N', ((M-4) * (M) * (M-3) * (M-1)));
	
	char* _lin__flag_Qm00 = (char*)malloc(sizeof(char)*((N) * (N)));
	mallocCheck(_lin__flag_Qm00, ((N) * (N)), char);
	_flag_Qm00 = (char**)malloc(sizeof(char*)*(N));
	mallocCheck(_flag_Qm00, (N), char*);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qm00[mz1] = &_lin__flag_Qm00[(mz1*(N))];
	}
	memset(_lin__flag_Qm00, 'N', ((N) * (N)));
	
	char* _lin__flag_Qm10 = (char*)malloc(sizeof(char)*((N) * (N)));
	mallocCheck(_lin__flag_Qm10, ((N) * (N)), char);
	_flag_Qm10 = (char**)malloc(sizeof(char*)*(N));
	mallocCheck(_flag_Qm10, (N), char*);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qm10[mz1] = &_lin__flag_Qm10[(mz1*(N))];
	}
	memset(_lin__flag_Qm10, 'N', ((N) * (N)));
	
	char* _lin__flag_Q0r = (char*)malloc(sizeof(char)*((M) * (M)));
	mallocCheck(_lin__flag_Q0r, ((M) * (M)), char);
	_flag_Q0r = (char**)malloc(sizeof(char*)*(M));
	mallocCheck(_flag_Q0r, (M), char*);
	for (mz1=0;mz1 < M; mz1++) {
		_flag_Q0r[mz1] = &_lin__flag_Q0r[(mz1*(M))];
	}
	memset(_lin__flag_Q0r, 'N', ((M) * (M)));
	
	char* _lin__flag_Q1r = (char*)malloc(sizeof(char)*((M) * (M)));
	mallocCheck(_lin__flag_Q1r, ((M) * (M)), char);
	_flag_Q1r = (char**)malloc(sizeof(char*)*(M));
	mallocCheck(_flag_Q1r, (M), char*);
	for (mz1=0;mz1 < M; mz1++) {
		_flag_Q1r[mz1] = &_lin__flag_Q1r[(mz1*(M))];
	}
	memset(_lin__flag_Q1r, 'N', ((M) * (M)));
	
	char* _lin__flag_Qm0r = (char*)malloc(sizeof(char)*((M) * (M)));
	mallocCheck(_lin__flag_Qm0r, ((M) * (M)), char);
	_flag_Qm0r = (char**)malloc(sizeof(char*)*(M));
	mallocCheck(_flag_Qm0r, (M), char*);
	for (mz1=0;mz1 < M; mz1++) {
		_flag_Qm0r[mz1] = &_lin__flag_Qm0r[(mz1*(M))];
	}
	memset(_lin__flag_Qm0r, 'N', ((M) * (M)));
	
	char* _lin__flag_Qm1r = (char*)malloc(sizeof(char)*((M) * (M)));
	mallocCheck(_lin__flag_Qm1r, ((M) * (M)), char);
	_flag_Qm1r = (char**)malloc(sizeof(char*)*(M));
	mallocCheck(_flag_Qm1r, (M), char*);
	for (mz1=0;mz1 < M; mz1++) {
		_flag_Qm1r[mz1] = &_lin__flag_Qm1r[(mz1*(M))];
	}
	memset(_lin__flag_Qm1r, 'N', ((M) * (M)));
	
	char* _lin__flag_Qgk1 = (char*)malloc(sizeof(char)*((M-2) * (M) * (M-2) * (M)));
	mallocCheck(_lin__flag_Qgk1, ((M-2) * (M) * (M-2) * (M)), char);
	_flag_Qgk1 = (char****)malloc(sizeof(char***)*(M-2));
	mallocCheck(_flag_Qgk1, (M-2), char***);
	for (mz1=0;mz1 < M-2; mz1++) {
		_flag_Qgk1[mz1] = (char***)malloc(sizeof(char**)*(M));
		mallocCheck(_flag_Qgk1[mz1], (M), char**);
		for (mz2=0;mz2 < M; mz2++) {
			_flag_Qgk1[mz1][mz2] = (char**)malloc(sizeof(char*)*(M-2));
			mallocCheck(_flag_Qgk1[mz1][mz2], (M-2), char*);
			for (mz3=0;mz3 < M-2; mz3++) {
				_flag_Qgk1[mz1][mz2][mz3] = &_lin__flag_Qgk1[(mz1*((M) * (M-2) * (M))) + (mz2*((M-2) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qgk1, 'N', ((M-2) * (M) * (M-2) * (M)));
	
	char* _lin__flag_Qgm1 = (char*)malloc(sizeof(char)*((M-2) * (M) * (M-2) * (M)));
	mallocCheck(_lin__flag_Qgm1, ((M-2) * (M) * (M-2) * (M)), char);
	_flag_Qgm1 = (char****)malloc(sizeof(char***)*(M-2));
	mallocCheck(_flag_Qgm1, (M-2), char***);
	for (mz1=0;mz1 < M-2; mz1++) {
		_flag_Qgm1[mz1] = (char***)malloc(sizeof(char**)*(M));
		mallocCheck(_flag_Qgm1[mz1], (M), char**);
		for (mz2=0;mz2 < M; mz2++) {
			_flag_Qgm1[mz1][mz2] = (char**)malloc(sizeof(char*)*(M-2));
			mallocCheck(_flag_Qgm1[mz1][mz2], (M-2), char*);
			for (mz3=0;mz3 < M-2; mz3++) {
				_flag_Qgm1[mz1][mz2][mz3] = &_lin__flag_Qgm1[(mz1*((M) * (M-2) * (M))) + (mz2*((M-2) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qgm1, 'N', ((M-2) * (M) * (M-2) * (M)));
	
	char* _lin__flag_Q01 = (char*)malloc(sizeof(char)*((M) * (M)));
	mallocCheck(_lin__flag_Q01, ((M) * (M)), char);
	_flag_Q01 = (char**)malloc(sizeof(char*)*(M));
	mallocCheck(_flag_Q01, (M), char*);
	for (mz1=0;mz1 < M; mz1++) {
		_flag_Q01[mz1] = &_lin__flag_Q01[(mz1*(M))];
	}
	memset(_lin__flag_Q01, 'N', ((M) * (M)));
	
	char* _lin__flag_Q11 = (char*)malloc(sizeof(char)*((M) * (M)));
	mallocCheck(_lin__flag_Q11, ((M) * (M)), char);
	_flag_Q11 = (char**)malloc(sizeof(char*)*(M));
	mallocCheck(_flag_Q11, (M), char*);
	for (mz1=0;mz1 < M; mz1++) {
		_flag_Q11[mz1] = &_lin__flag_Q11[(mz1*(M))];
	}
	memset(_lin__flag_Q11, 'N', ((M) * (M)));
	
	char* _lin__flag_Qm01 = (char*)malloc(sizeof(char)*((M) * (M)));
	mallocCheck(_lin__flag_Qm01, ((M) * (M)), char);
	_flag_Qm01 = (char**)malloc(sizeof(char*)*(M));
	mallocCheck(_flag_Qm01, (M), char*);
	for (mz1=0;mz1 < M; mz1++) {
		_flag_Qm01[mz1] = &_lin__flag_Qm01[(mz1*(M))];
	}
	memset(_lin__flag_Qm01, 'N', ((M) * (M)));
	
	char* _lin__flag_Qm11 = (char*)malloc(sizeof(char)*((M) * (M)));
	mallocCheck(_lin__flag_Qm11, ((M) * (M)), char);
	_flag_Qm11 = (char**)malloc(sizeof(char*)*(M));
	mallocCheck(_flag_Qm11, (M), char*);
	for (mz1=0;mz1 < M; mz1++) {
		_flag_Qm11[mz1] = &_lin__flag_Qm11[(mz1*(M))];
	}
	memset(_lin__flag_Qm11, 'N', ((M) * (M)));
	
	char* _lin__flag_Qih0 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qih0, ((N) * (N) * (M) * (M)), char);
	_flag_Qih0 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qih0, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qih0[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qih0[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qih0[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qih0[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qih0[mz1][mz2][mz3] = &_lin__flag_Qih0[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qih0, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qih1 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qih1, ((N) * (N) * (M) * (M)), char);
	_flag_Qih1 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qih1, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qih1[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qih1[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qih1[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qih1[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qih1[mz1][mz2][mz3] = &_lin__flag_Qih1[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qih1, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qihh00 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qihh00, ((N) * (N) * (M) * (M)), char);
	_flag_Qihh00 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qihh00, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qihh00[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qihh00[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qihh00[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qihh00[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qihh00[mz1][mz2][mz3] = &_lin__flag_Qihh00[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qihh00, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qihh01 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qihh01, ((N) * (N) * (M) * (M)), char);
	_flag_Qihh01 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qihh01, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qihh01[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qihh01[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qihh01[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qihh01[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qihh01[mz1][mz2][mz3] = &_lin__flag_Qihh01[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qihh01, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qihh10 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qihh10, ((N) * (N) * (M) * (M)), char);
	_flag_Qihh10 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qihh10, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qihh10[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qihh10[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qihh10[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qihh10[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qihh10[mz1][mz2][mz3] = &_lin__flag_Qihh10[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qihh10, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qihh11 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qihh11, ((N) * (N) * (M) * (M)), char);
	_flag_Qihh11 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qihh11, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qihh11[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qihh11[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qihh11[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qihh11[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qihh11[mz1][mz2][mz3] = &_lin__flag_Qihh11[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qihh11, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qihm00 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qihm00, ((N) * (N) * (M) * (M)), char);
	_flag_Qihm00 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qihm00, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qihm00[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qihm00[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qihm00[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qihm00[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qihm00[mz1][mz2][mz3] = &_lin__flag_Qihm00[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qihm00, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qihm01 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qihm01, ((N) * (N) * (M) * (M)), char);
	_flag_Qihm01 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qihm01, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qihm01[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qihm01[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qihm01[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qihm01[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qihm01[mz1][mz2][mz3] = &_lin__flag_Qihm01[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qihm01, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qihm10 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qihm10, ((N) * (N) * (M) * (M)), char);
	_flag_Qihm10 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qihm10, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qihm10[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qihm10[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qihm10[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qihm10[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qihm10[mz1][mz2][mz3] = &_lin__flag_Qihm10[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qihm10, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qihm11 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_Qihm11, ((N) * (N) * (M) * (M)), char);
	_flag_Qihm11 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_Qihm11, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qihm11[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qihm11[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qihm11[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_Qihm11[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_Qihm11[mz1][mz2][mz3] = &_lin__flag_Qihm11[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qihm11, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_Qgkr = (char*)malloc(sizeof(char)*((M-2) * (M) * (M-2) * (M)));
	mallocCheck(_lin__flag_Qgkr, ((M-2) * (M) * (M-2) * (M)), char);
	_flag_Qgkr = (char****)malloc(sizeof(char***)*(M-2));
	mallocCheck(_flag_Qgkr, (M-2), char***);
	for (mz1=0;mz1 < M-2; mz1++) {
		_flag_Qgkr[mz1] = (char***)malloc(sizeof(char**)*(M));
		mallocCheck(_flag_Qgkr[mz1], (M), char**);
		for (mz2=0;mz2 < M; mz2++) {
			_flag_Qgkr[mz1][mz2] = (char**)malloc(sizeof(char*)*(M-2));
			mallocCheck(_flag_Qgkr[mz1][mz2], (M-2), char*);
			for (mz3=0;mz3 < M-2; mz3++) {
				_flag_Qgkr[mz1][mz2][mz3] = &_lin__flag_Qgkr[(mz1*((M) * (M-2) * (M))) + (mz2*((M-2) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qgkr, 'N', ((M-2) * (M) * (M-2) * (M)));
	
	char* _lin__flag_Qgmr = (char*)malloc(sizeof(char)*((M-2) * (M) * (M-2) * (M)));
	mallocCheck(_lin__flag_Qgmr, ((M-2) * (M) * (M-2) * (M)), char);
	_flag_Qgmr = (char****)malloc(sizeof(char***)*(M-2));
	mallocCheck(_flag_Qgmr, (M-2), char***);
	for (mz1=0;mz1 < M-2; mz1++) {
		_flag_Qgmr[mz1] = (char***)malloc(sizeof(char**)*(M));
		mallocCheck(_flag_Qgmr[mz1], (M), char**);
		for (mz2=0;mz2 < M; mz2++) {
			_flag_Qgmr[mz1][mz2] = (char**)malloc(sizeof(char*)*(M-2));
			mallocCheck(_flag_Qgmr[mz1][mz2], (M-2), char*);
			for (mz3=0;mz3 < M-2; mz3++) {
				_flag_Qgmr[mz1][mz2][mz3] = &_lin__flag_Qgmr[(mz1*((M) * (M-2) * (M))) + (mz2*((M-2) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_Qgmr, 'N', ((M-2) * (M) * (M-2) * (M)));
	
	char* _lin__flag_Qgk0 = (char*)malloc(sizeof(char)*((N-2) * (N) * (N-2) * (N)));
	mallocCheck(_lin__flag_Qgk0, ((N-2) * (N) * (N-2) * (N)), char);
	_flag_Qgk0 = (char****)malloc(sizeof(char***)*(N-2));
	mallocCheck(_flag_Qgk0, (N-2), char***);
	for (mz1=0;mz1 < N-2; mz1++) {
		_flag_Qgk0[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qgk0[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qgk0[mz1][mz2] = (char**)malloc(sizeof(char*)*(N-2));
			mallocCheck(_flag_Qgk0[mz1][mz2], (N-2), char*);
			for (mz3=0;mz3 < N-2; mz3++) {
				_flag_Qgk0[mz1][mz2][mz3] = &_lin__flag_Qgk0[(mz1*((N) * (N-2) * (N))) + (mz2*((N-2) * (N))) + (mz3*(N))];
			}
		}
	}
	memset(_lin__flag_Qgk0, 'N', ((N-2) * (N) * (N-2) * (N)));
	
	char* _lin__flag_Qgm0 = (char*)malloc(sizeof(char)*((N-2) * (N) * (N-2) * (N)));
	mallocCheck(_lin__flag_Qgm0, ((N-2) * (N) * (N-2) * (N)), char);
	_flag_Qgm0 = (char****)malloc(sizeof(char***)*(N-2));
	mallocCheck(_flag_Qgm0, (N-2), char***);
	for (mz1=0;mz1 < N-2; mz1++) {
		_flag_Qgm0[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_Qgm0[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_Qgm0[mz1][mz2] = (char**)malloc(sizeof(char*)*(N-2));
			mallocCheck(_flag_Qgm0[mz1][mz2], (N-2), char*);
			for (mz3=0;mz3 < N-2; mz3++) {
				_flag_Qgm0[mz1][mz2][mz3] = &_lin__flag_Qgm0[(mz1*((N) * (N-2) * (N))) + (mz2*((N-2) * (N))) + (mz3*(N))];
			}
		}
	}
	memset(_lin__flag_Qgm0, 'N', ((N-2) * (N) * (N-2) * (N)));
	
	char* _lin__flag_Q20 = (char*)malloc(sizeof(char)*((N) * (N)));
	mallocCheck(_lin__flag_Q20, ((N) * (N)), char);
	_flag_Q20 = (char**)malloc(sizeof(char*)*(N));
	mallocCheck(_flag_Q20, (N), char*);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Q20[mz1] = &_lin__flag_Q20[(mz1*(N))];
	}
	memset(_lin__flag_Q20, 'N', ((N) * (N)));
	
	char* _lin__flag_Qm20 = (char*)malloc(sizeof(char)*((N) * (N)));
	mallocCheck(_lin__flag_Qm20, ((N) * (N)), char);
	_flag_Qm20 = (char**)malloc(sizeof(char*)*(N));
	mallocCheck(_flag_Qm20, (N), char*);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_Qm20[mz1] = &_lin__flag_Qm20[(mz1*(N))];
	}
	memset(_lin__flag_Qm20, 'N', ((N) * (N)));
	
	char* _lin__flag_Qm2r = (char*)malloc(sizeof(char)*((M) * (M)));
	mallocCheck(_lin__flag_Qm2r, ((M) * (M)), char);
	_flag_Qm2r = (char**)malloc(sizeof(char*)*(M));
	mallocCheck(_flag_Qm2r, (M), char*);
	for (mz1=0;mz1 < M; mz1++) {
		_flag_Qm2r[mz1] = &_lin__flag_Qm2r[(mz1*(M))];
	}
	memset(_lin__flag_Qm2r, 'N', ((M) * (M)));
	
	char* _lin__flag_Q2r = (char*)malloc(sizeof(char)*((M) * (M)));
	mallocCheck(_lin__flag_Q2r, ((M) * (M)), char);
	_flag_Q2r = (char**)malloc(sizeof(char*)*(M));
	mallocCheck(_flag_Q2r, (M), char*);
	for (mz1=0;mz1 < M; mz1++) {
		_flag_Q2r[mz1] = &_lin__flag_Q2r[(mz1*(M))];
	}
	memset(_lin__flag_Q2r, 'N', ((M) * (M)));
	
	char* _lin__flag_Q21 = (char*)malloc(sizeof(char)*((M) * (M)));
	mallocCheck(_lin__flag_Q21, ((M) * (M)), char);
	_flag_Q21 = (char**)malloc(sizeof(char*)*(M));
	mallocCheck(_flag_Q21, (M), char*);
	for (mz1=0;mz1 < M; mz1++) {
		_flag_Q21[mz1] = &_lin__flag_Q21[(mz1*(M))];
	}
	memset(_lin__flag_Q21, 'N', ((M) * (M)));
	
	char* _lin__flag_tempQiy1 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiy1, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiy1 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiy1, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiy1[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiy1[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiy1[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiy1[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiy1[mz1][mz2][mz3] = &_lin__flag_tempQiy1[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiy1, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiy2 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiy2, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiy2 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiy2, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiy2[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiy2[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiy2[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiy2[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiy2[mz1][mz2][mz3] = &_lin__flag_tempQiy2[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiy2, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQixm001 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQixm001, ((N) * (N) * (M) * (M)), char);
	_flag_tempQixm001 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQixm001, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQixm001[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQixm001[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQixm001[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQixm001[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQixm001[mz1][mz2][mz3] = &_lin__flag_tempQixm001[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQixm001, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQixm002 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQixm002, ((N) * (N) * (M) * (M)), char);
	_flag_tempQixm002 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQixm002, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQixm002[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQixm002[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQixm002[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQixm002[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQixm002[mz1][mz2][mz3] = &_lin__flag_tempQixm002[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQixm002, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQixm011 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQixm011, ((N) * (N) * (M) * (M)), char);
	_flag_tempQixm011 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQixm011, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQixm011[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQixm011[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQixm011[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQixm011[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQixm011[mz1][mz2][mz3] = &_lin__flag_tempQixm011[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQixm011, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQixm012 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQixm012, ((N) * (N) * (M) * (M)), char);
	_flag_tempQixm012 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQixm012, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQixm012[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQixm012[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQixm012[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQixm012[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQixm012[mz1][mz2][mz3] = &_lin__flag_tempQixm012[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQixm012, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQixm021 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQixm021, ((N) * (N) * (M) * (M)), char);
	_flag_tempQixm021 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQixm021, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQixm021[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQixm021[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQixm021[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQixm021[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQixm021[mz1][mz2][mz3] = &_lin__flag_tempQixm021[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQixm021, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQixm022 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQixm022, ((N) * (N) * (M) * (M)), char);
	_flag_tempQixm022 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQixm022, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQixm022[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQixm022[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQixm022[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQixm022[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQixm022[mz1][mz2][mz3] = &_lin__flag_tempQixm022[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQixm022, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQixm101 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQixm101, ((N) * (N) * (M) * (M)), char);
	_flag_tempQixm101 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQixm101, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQixm101[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQixm101[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQixm101[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQixm101[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQixm101[mz1][mz2][mz3] = &_lin__flag_tempQixm101[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQixm101, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQixm102 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQixm102, ((N) * (N) * (M) * (M)), char);
	_flag_tempQixm102 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQixm102, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQixm102[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQixm102[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQixm102[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQixm102[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQixm102[mz1][mz2][mz3] = &_lin__flag_tempQixm102[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQixm102, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQixm111 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQixm111, ((N) * (N) * (M) * (M)), char);
	_flag_tempQixm111 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQixm111, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQixm111[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQixm111[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQixm111[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQixm111[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQixm111[mz1][mz2][mz3] = &_lin__flag_tempQixm111[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQixm111, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQixm112 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQixm112, ((N) * (N) * (M) * (M)), char);
	_flag_tempQixm112 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQixm112, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQixm112[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQixm112[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQixm112[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQixm112[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQixm112[mz1][mz2][mz3] = &_lin__flag_tempQixm112[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQixm112, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQixm121 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQixm121, ((N) * (N) * (M) * (M)), char);
	_flag_tempQixm121 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQixm121, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQixm121[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQixm121[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQixm121[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQixm121[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQixm121[mz1][mz2][mz3] = &_lin__flag_tempQixm121[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQixm121, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQixm122 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQixm122, ((N) * (N) * (M) * (M)), char);
	_flag_tempQixm122 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQixm122, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQixm122[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQixm122[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQixm122[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQixm122[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQixm122[mz1][mz2][mz3] = &_lin__flag_tempQixm122[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQixm122, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQixk001 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQixk001, ((N) * (N) * (M) * (M)), char);
	_flag_tempQixk001 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQixk001, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQixk001[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQixk001[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQixk001[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQixk001[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQixk001[mz1][mz2][mz3] = &_lin__flag_tempQixk001[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQixk001, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQixk002 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQixk002, ((N) * (N) * (M) * (M)), char);
	_flag_tempQixk002 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQixk002, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQixk002[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQixk002[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQixk002[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQixk002[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQixk002[mz1][mz2][mz3] = &_lin__flag_tempQixk002[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQixk002, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQixk011 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQixk011, ((N) * (N) * (M) * (M)), char);
	_flag_tempQixk011 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQixk011, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQixk011[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQixk011[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQixk011[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQixk011[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQixk011[mz1][mz2][mz3] = &_lin__flag_tempQixk011[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQixk011, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQixk012 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQixk012, ((N) * (N) * (M) * (M)), char);
	_flag_tempQixk012 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQixk012, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQixk012[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQixk012[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQixk012[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQixk012[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQixk012[mz1][mz2][mz3] = &_lin__flag_tempQixk012[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQixk012, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQixk101 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQixk101, ((N) * (N) * (M) * (M)), char);
	_flag_tempQixk101 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQixk101, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQixk101[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQixk101[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQixk101[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQixk101[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQixk101[mz1][mz2][mz3] = &_lin__flag_tempQixk101[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQixk101, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQixk102 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQixk102, ((N) * (N) * (M) * (M)), char);
	_flag_tempQixk102 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQixk102, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQixk102[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQixk102[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQixk102[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQixk102[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQixk102[mz1][mz2][mz3] = &_lin__flag_tempQixk102[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQixk102, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQixk111 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQixk111, ((N) * (N) * (M) * (M)), char);
	_flag_tempQixk111 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQixk111, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQixk111[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQixk111[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQixk111[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQixk111[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQixk111[mz1][mz2][mz3] = &_lin__flag_tempQixk111[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQixk111, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQixk112 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQixk112, ((N) * (N) * (M) * (M)), char);
	_flag_tempQixk112 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQixk112, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQixk112[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQixk112[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQixk112[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQixk112[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQixk112[mz1][mz2][mz3] = &_lin__flag_tempQixk112[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQixk112, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQimm021 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQimm021, ((N) * (N) * (M) * (M)), char);
	_flag_tempQimm021 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQimm021, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQimm021[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQimm021[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQimm021[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQimm021[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQimm021[mz1][mz2][mz3] = &_lin__flag_tempQimm021[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQimm021, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQimm022 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQimm022, ((N) * (N) * (M) * (M)), char);
	_flag_tempQimm022 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQimm022, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQimm022[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQimm022[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQimm022[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQimm022[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQimm022[mz1][mz2][mz3] = &_lin__flag_tempQimm022[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQimm022, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQimm023 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQimm023, ((N) * (N) * (M) * (M)), char);
	_flag_tempQimm023 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQimm023, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQimm023[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQimm023[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQimm023[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQimm023[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQimm023[mz1][mz2][mz3] = &_lin__flag_tempQimm023[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQimm023, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQimm121 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQimm121, ((N) * (N) * (M) * (M)), char);
	_flag_tempQimm121 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQimm121, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQimm121[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQimm121[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQimm121[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQimm121[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQimm121[mz1][mz2][mz3] = &_lin__flag_tempQimm121[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQimm121, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQimm122 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQimm122, ((N) * (N) * (M) * (M)), char);
	_flag_tempQimm122 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQimm122, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQimm122[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQimm122[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQimm122[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQimm122[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQimm122[mz1][mz2][mz3] = &_lin__flag_tempQimm122[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQimm122, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQimm123 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQimm123, ((N) * (N) * (M) * (M)), char);
	_flag_tempQimm123 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQimm123, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQimm123[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQimm123[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQimm123[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQimm123[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQimm123[mz1][mz2][mz3] = &_lin__flag_tempQimm123[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQimm123, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQimm201 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQimm201, ((N) * (N) * (M) * (M)), char);
	_flag_tempQimm201 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQimm201, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQimm201[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQimm201[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQimm201[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQimm201[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQimm201[mz1][mz2][mz3] = &_lin__flag_tempQimm201[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQimm201, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQimm202 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQimm202, ((N) * (N) * (M) * (M)), char);
	_flag_tempQimm202 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQimm202, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQimm202[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQimm202[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQimm202[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQimm202[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQimm202[mz1][mz2][mz3] = &_lin__flag_tempQimm202[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQimm202, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQimm203 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQimm203, ((N) * (N) * (M) * (M)), char);
	_flag_tempQimm203 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQimm203, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQimm203[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQimm203[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQimm203[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQimm203[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQimm203[mz1][mz2][mz3] = &_lin__flag_tempQimm203[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQimm203, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQimm211 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQimm211, ((N) * (N) * (M) * (M)), char);
	_flag_tempQimm211 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQimm211, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQimm211[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQimm211[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQimm211[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQimm211[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQimm211[mz1][mz2][mz3] = &_lin__flag_tempQimm211[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQimm211, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQimm212 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQimm212, ((N) * (N) * (M) * (M)), char);
	_flag_tempQimm212 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQimm212, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQimm212[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQimm212[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQimm212[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQimm212[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQimm212[mz1][mz2][mz3] = &_lin__flag_tempQimm212[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQimm212, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQimm213 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQimm213, ((N) * (N) * (M) * (M)), char);
	_flag_tempQimm213 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQimm213, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQimm213[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQimm213[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQimm213[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQimm213[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQimm213[mz1][mz2][mz3] = &_lin__flag_tempQimm213[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQimm213, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQimm221 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQimm221, ((N) * (N) * (M) * (M)), char);
	_flag_tempQimm221 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQimm221, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQimm221[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQimm221[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQimm221[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQimm221[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQimm221[mz1][mz2][mz3] = &_lin__flag_tempQimm221[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQimm221, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQimm222 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQimm222, ((N) * (N) * (M) * (M)), char);
	_flag_tempQimm222 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQimm222, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQimm222[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQimm222[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQimm222[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQimm222[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQimm222[mz1][mz2][mz3] = &_lin__flag_tempQimm222[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQimm222, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQimm223 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQimm223, ((N) * (N) * (M) * (M)), char);
	_flag_tempQimm223 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQimm223, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQimm223[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQimm223[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQimm223[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQimm223[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQimm223[mz1][mz2][mz3] = &_lin__flag_tempQimm223[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQimm223, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQimk011 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQimk011, ((N) * (N) * (M) * (M)), char);
	_flag_tempQimk011 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQimk011, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQimk011[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQimk011[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQimk011[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQimk011[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQimk011[mz1][mz2][mz3] = &_lin__flag_tempQimk011[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQimk011, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQimk012 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQimk012, ((N) * (N) * (M) * (M)), char);
	_flag_tempQimk012 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQimk012, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQimk012[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQimk012[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQimk012[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQimk012[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQimk012[mz1][mz2][mz3] = &_lin__flag_tempQimk012[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQimk012, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQimk013 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQimk013, ((N) * (N) * (M) * (M)), char);
	_flag_tempQimk013 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQimk013, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQimk013[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQimk013[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQimk013[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQimk013[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQimk013[mz1][mz2][mz3] = &_lin__flag_tempQimk013[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQimk013, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQimk014 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQimk014, ((N) * (N) * (M) * (M)), char);
	_flag_tempQimk014 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQimk014, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQimk014[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQimk014[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQimk014[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQimk014[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQimk014[mz1][mz2][mz3] = &_lin__flag_tempQimk014[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQimk014, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQimk111 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQimk111, ((N) * (N) * (M) * (M)), char);
	_flag_tempQimk111 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQimk111, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQimk111[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQimk111[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQimk111[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQimk111[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQimk111[mz1][mz2][mz3] = &_lin__flag_tempQimk111[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQimk111, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQimk112 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQimk112, ((N) * (N) * (M) * (M)), char);
	_flag_tempQimk112 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQimk112, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQimk112[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQimk112[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQimk112[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQimk112[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQimk112[mz1][mz2][mz3] = &_lin__flag_tempQimk112[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQimk112, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQimk113 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQimk113, ((N) * (N) * (M) * (M)), char);
	_flag_tempQimk113 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQimk113, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQimk113[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQimk113[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQimk113[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQimk113[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQimk113[mz1][mz2][mz3] = &_lin__flag_tempQimk113[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQimk113, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQimk114 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQimk114, ((N) * (N) * (M) * (M)), char);
	_flag_tempQimk114 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQimk114, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQimk114[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQimk114[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQimk114[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQimk114[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQimk114[mz1][mz2][mz3] = &_lin__flag_tempQimk114[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQimk114, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQimk201 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQimk201, ((N) * (N) * (M) * (M)), char);
	_flag_tempQimk201 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQimk201, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQimk201[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQimk201[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQimk201[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQimk201[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQimk201[mz1][mz2][mz3] = &_lin__flag_tempQimk201[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQimk201, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQimk202 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQimk202, ((N) * (N) * (M) * (M)), char);
	_flag_tempQimk202 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQimk202, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQimk202[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQimk202[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQimk202[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQimk202[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQimk202[mz1][mz2][mz3] = &_lin__flag_tempQimk202[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQimk202, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQimk203 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQimk203, ((N) * (N) * (M) * (M)), char);
	_flag_tempQimk203 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQimk203, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQimk203[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQimk203[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQimk203[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQimk203[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQimk203[mz1][mz2][mz3] = &_lin__flag_tempQimk203[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQimk203, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQimk204 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQimk204, ((N) * (N) * (M) * (M)), char);
	_flag_tempQimk204 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQimk204, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQimk204[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQimk204[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQimk204[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQimk204[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQimk204[mz1][mz2][mz3] = &_lin__flag_tempQimk204[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQimk204, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQimk211 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQimk211, ((N) * (N) * (M) * (M)), char);
	_flag_tempQimk211 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQimk211, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQimk211[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQimk211[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQimk211[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQimk211[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQimk211[mz1][mz2][mz3] = &_lin__flag_tempQimk211[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQimk211, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQimk212 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQimk212, ((N) * (N) * (M) * (M)), char);
	_flag_tempQimk212 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQimk212, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQimk212[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQimk212[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQimk212[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQimk212[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQimk212[mz1][mz2][mz3] = &_lin__flag_tempQimk212[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQimk212, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQimk213 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQimk213, ((N) * (N) * (M) * (M)), char);
	_flag_tempQimk213 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQimk213, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQimk213[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQimk213[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQimk213[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQimk213[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQimk213[mz1][mz2][mz3] = &_lin__flag_tempQimk213[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQimk213, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQimk214 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQimk214, ((N) * (N) * (M) * (M)), char);
	_flag_tempQimk214 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQimk214, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQimk214[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQimk214[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQimk214[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQimk214[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQimk214[mz1][mz2][mz3] = &_lin__flag_tempQimk214[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQimk214, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQikm101 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQikm101, ((N) * (N) * (M) * (M)), char);
	_flag_tempQikm101 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQikm101, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQikm101[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQikm101[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQikm101[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQikm101[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQikm101[mz1][mz2][mz3] = &_lin__flag_tempQikm101[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQikm101, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQikm102 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQikm102, ((N) * (N) * (M) * (M)), char);
	_flag_tempQikm102 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQikm102, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQikm102[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQikm102[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQikm102[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQikm102[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQikm102[mz1][mz2][mz3] = &_lin__flag_tempQikm102[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQikm102, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQikm103 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQikm103, ((N) * (N) * (M) * (M)), char);
	_flag_tempQikm103 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQikm103, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQikm103[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQikm103[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQikm103[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQikm103[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQikm103[mz1][mz2][mz3] = &_lin__flag_tempQikm103[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQikm103, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQikm104 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQikm104, ((N) * (N) * (M) * (M)), char);
	_flag_tempQikm104 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQikm104, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQikm104[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQikm104[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQikm104[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQikm104[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQikm104[mz1][mz2][mz3] = &_lin__flag_tempQikm104[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQikm104, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQikm111 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQikm111, ((N) * (N) * (M) * (M)), char);
	_flag_tempQikm111 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQikm111, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQikm111[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQikm111[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQikm111[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQikm111[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQikm111[mz1][mz2][mz3] = &_lin__flag_tempQikm111[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQikm111, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQikm112 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQikm112, ((N) * (N) * (M) * (M)), char);
	_flag_tempQikm112 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQikm112, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQikm112[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQikm112[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQikm112[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQikm112[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQikm112[mz1][mz2][mz3] = &_lin__flag_tempQikm112[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQikm112, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQikm113 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQikm113, ((N) * (N) * (M) * (M)), char);
	_flag_tempQikm113 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQikm113, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQikm113[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQikm113[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQikm113[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQikm113[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQikm113[mz1][mz2][mz3] = &_lin__flag_tempQikm113[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQikm113, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQikm114 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQikm114, ((N) * (N) * (M) * (M)), char);
	_flag_tempQikm114 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQikm114, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQikm114[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQikm114[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQikm114[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQikm114[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQikm114[mz1][mz2][mz3] = &_lin__flag_tempQikm114[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQikm114, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQikm021 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQikm021, ((N) * (N) * (M) * (M)), char);
	_flag_tempQikm021 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQikm021, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQikm021[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQikm021[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQikm021[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQikm021[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQikm021[mz1][mz2][mz3] = &_lin__flag_tempQikm021[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQikm021, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQikm022 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQikm022, ((N) * (N) * (M) * (M)), char);
	_flag_tempQikm022 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQikm022, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQikm022[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQikm022[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQikm022[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQikm022[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQikm022[mz1][mz2][mz3] = &_lin__flag_tempQikm022[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQikm022, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQikm023 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQikm023, ((N) * (N) * (M) * (M)), char);
	_flag_tempQikm023 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQikm023, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQikm023[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQikm023[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQikm023[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQikm023[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQikm023[mz1][mz2][mz3] = &_lin__flag_tempQikm023[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQikm023, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQikm024 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQikm024, ((N) * (N) * (M) * (M)), char);
	_flag_tempQikm024 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQikm024, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQikm024[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQikm024[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQikm024[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQikm024[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQikm024[mz1][mz2][mz3] = &_lin__flag_tempQikm024[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQikm024, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQikm121 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQikm121, ((N) * (N) * (M) * (M)), char);
	_flag_tempQikm121 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQikm121, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQikm121[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQikm121[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQikm121[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQikm121[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQikm121[mz1][mz2][mz3] = &_lin__flag_tempQikm121[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQikm121, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQikm122 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQikm122, ((N) * (N) * (M) * (M)), char);
	_flag_tempQikm122 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQikm122, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQikm122[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQikm122[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQikm122[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQikm122[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQikm122[mz1][mz2][mz3] = &_lin__flag_tempQikm122[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQikm122, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQikm123 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQikm123, ((N) * (N) * (M) * (M)), char);
	_flag_tempQikm123 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQikm123, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQikm123[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQikm123[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQikm123[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQikm123[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQikm123[mz1][mz2][mz3] = &_lin__flag_tempQikm123[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQikm123, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQikm124 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQikm124, ((N) * (N) * (M) * (M)), char);
	_flag_tempQikm124 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQikm124, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQikm124[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQikm124[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQikm124[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQikm124[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQikm124[mz1][mz2][mz3] = &_lin__flag_tempQikm124[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQikm124, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQikk011 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQikk011, ((N) * (N) * (M) * (M)), char);
	_flag_tempQikk011 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQikk011, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQikk011[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQikk011[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQikk011[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQikk011[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQikk011[mz1][mz2][mz3] = &_lin__flag_tempQikk011[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQikk011, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQikk012 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQikk012, ((N) * (N) * (M) * (M)), char);
	_flag_tempQikk012 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQikk012, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQikk012[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQikk012[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQikk012[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQikk012[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQikk012[mz1][mz2][mz3] = &_lin__flag_tempQikk012[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQikk012, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQikk013 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQikk013, ((N) * (N) * (M) * (M)), char);
	_flag_tempQikk013 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQikk013, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQikk013[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQikk013[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQikk013[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQikk013[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQikk013[mz1][mz2][mz3] = &_lin__flag_tempQikk013[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQikk013, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQikk014 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQikk014, ((N) * (N) * (M) * (M)), char);
	_flag_tempQikk014 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQikk014, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQikk014[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQikk014[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQikk014[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQikk014[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQikk014[mz1][mz2][mz3] = &_lin__flag_tempQikk014[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQikk014, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQikk015 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQikk015, ((N) * (N) * (M) * (M)), char);
	_flag_tempQikk015 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQikk015, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQikk015[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQikk015[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQikk015[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQikk015[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQikk015[mz1][mz2][mz3] = &_lin__flag_tempQikk015[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQikk015, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQikk101 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQikk101, ((N) * (N) * (M) * (M)), char);
	_flag_tempQikk101 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQikk101, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQikk101[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQikk101[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQikk101[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQikk101[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQikk101[mz1][mz2][mz3] = &_lin__flag_tempQikk101[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQikk101, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQikk102 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQikk102, ((N) * (N) * (M) * (M)), char);
	_flag_tempQikk102 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQikk102, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQikk102[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQikk102[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQikk102[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQikk102[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQikk102[mz1][mz2][mz3] = &_lin__flag_tempQikk102[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQikk102, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQikk103 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQikk103, ((N) * (N) * (M) * (M)), char);
	_flag_tempQikk103 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQikk103, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQikk103[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQikk103[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQikk103[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQikk103[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQikk103[mz1][mz2][mz3] = &_lin__flag_tempQikk103[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQikk103, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQikk104 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQikk104, ((N) * (N) * (M) * (M)), char);
	_flag_tempQikk104 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQikk104, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQikk104[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQikk104[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQikk104[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQikk104[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQikk104[mz1][mz2][mz3] = &_lin__flag_tempQikk104[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQikk104, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQikk105 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQikk105, ((N) * (N) * (M) * (M)), char);
	_flag_tempQikk105 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQikk105, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQikk105[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQikk105[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQikk105[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQikk105[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQikk105[mz1][mz2][mz3] = &_lin__flag_tempQikk105[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQikk105, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQikk111 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQikk111, ((N) * (N) * (M) * (M)), char);
	_flag_tempQikk111 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQikk111, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQikk111[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQikk111[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQikk111[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQikk111[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQikk111[mz1][mz2][mz3] = &_lin__flag_tempQikk111[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQikk111, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQikk112 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQikk112, ((N) * (N) * (M) * (M)), char);
	_flag_tempQikk112 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQikk112, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQikk112[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQikk112[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQikk112[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQikk112[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQikk112[mz1][mz2][mz3] = &_lin__flag_tempQikk112[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQikk112, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQikk113 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQikk113, ((N) * (N) * (M) * (M)), char);
	_flag_tempQikk113 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQikk113, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQikk113[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQikk113[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQikk113[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQikk113[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQikk113[mz1][mz2][mz3] = &_lin__flag_tempQikk113[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQikk113, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQikk114 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQikk114, ((N) * (N) * (M) * (M)), char);
	_flag_tempQikk114 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQikk114, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQikk114[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQikk114[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQikk114[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQikk114[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQikk114[mz1][mz2][mz3] = &_lin__flag_tempQikk114[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQikk114, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQikk115 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQikk115, ((N) * (N) * (M) * (M)), char);
	_flag_tempQikk115 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQikk115, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQikk115[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQikk115[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQikk115[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQikk115[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQikk115[mz1][mz2][mz3] = &_lin__flag_tempQikk115[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQikk115, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann011 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann011, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann011 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann011, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann011[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann011[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann011[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann011[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann011[mz1][mz2][mz3] = &_lin__flag_tempQiann011[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann011, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann012 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann012, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann012 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann012, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann012[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann012[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann012[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann012[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann012[mz1][mz2][mz3] = &_lin__flag_tempQiann012[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann012, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann013 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann013, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann013 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann013, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann013[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann013[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann013[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann013[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann013[mz1][mz2][mz3] = &_lin__flag_tempQiann013[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann013, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann014 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann014, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann014 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann014, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann014[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann014[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann014[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann014[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann014[mz1][mz2][mz3] = &_lin__flag_tempQiann014[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann014, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann015 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann015, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann015 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann015, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann015[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann015[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann015[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann015[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann015[mz1][mz2][mz3] = &_lin__flag_tempQiann015[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann015, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann016 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann016, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann016 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann016, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann016[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann016[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann016[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann016[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann016[mz1][mz2][mz3] = &_lin__flag_tempQiann016[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann016, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann021 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann021, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann021 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann021, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann021[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann021[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann021[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann021[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann021[mz1][mz2][mz3] = &_lin__flag_tempQiann021[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann021, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann022 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann022, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann022 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann022, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann022[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann022[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann022[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann022[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann022[mz1][mz2][mz3] = &_lin__flag_tempQiann022[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann022, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann023 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann023, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann023 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann023, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann023[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann023[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann023[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann023[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann023[mz1][mz2][mz3] = &_lin__flag_tempQiann023[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann023, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann024 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann024, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann024 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann024, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann024[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann024[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann024[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann024[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann024[mz1][mz2][mz3] = &_lin__flag_tempQiann024[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann024, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann025 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann025, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann025 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann025, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann025[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann025[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann025[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann025[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann025[mz1][mz2][mz3] = &_lin__flag_tempQiann025[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann025, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann026 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann026, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann026 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann026, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann026[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann026[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann026[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann026[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann026[mz1][mz2][mz3] = &_lin__flag_tempQiann026[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann026, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann101 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann101, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann101 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann101, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann101[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann101[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann101[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann101[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann101[mz1][mz2][mz3] = &_lin__flag_tempQiann101[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann101, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann102 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann102, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann102 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann102, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann102[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann102[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann102[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann102[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann102[mz1][mz2][mz3] = &_lin__flag_tempQiann102[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann102, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann103 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann103, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann103 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann103, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann103[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann103[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann103[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann103[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann103[mz1][mz2][mz3] = &_lin__flag_tempQiann103[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann103, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann104 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann104, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann104 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann104, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann104[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann104[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann104[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann104[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann104[mz1][mz2][mz3] = &_lin__flag_tempQiann104[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann104, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann105 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann105, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann105 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann105, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann105[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann105[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann105[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann105[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann105[mz1][mz2][mz3] = &_lin__flag_tempQiann105[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann105, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann106 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann106, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann106 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann106, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann106[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann106[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann106[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann106[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann106[mz1][mz2][mz3] = &_lin__flag_tempQiann106[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann106, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann111 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann111, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann111 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann111, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann111[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann111[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann111[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann111[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann111[mz1][mz2][mz3] = &_lin__flag_tempQiann111[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann111, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann112 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann112, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann112 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann112, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann112[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann112[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann112[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann112[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann112[mz1][mz2][mz3] = &_lin__flag_tempQiann112[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann112, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann113 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann113, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann113 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann113, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann113[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann113[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann113[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann113[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann113[mz1][mz2][mz3] = &_lin__flag_tempQiann113[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann113, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann114 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann114, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann114 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann114, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann114[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann114[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann114[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann114[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann114[mz1][mz2][mz3] = &_lin__flag_tempQiann114[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann114, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann115 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann115, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann115 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann115, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann115[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann115[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann115[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann115[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann115[mz1][mz2][mz3] = &_lin__flag_tempQiann115[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann115, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann116 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann116, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann116 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann116, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann116[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann116[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann116[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann116[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann116[mz1][mz2][mz3] = &_lin__flag_tempQiann116[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann116, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann121 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann121, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann121 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann121, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann121[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann121[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann121[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann121[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann121[mz1][mz2][mz3] = &_lin__flag_tempQiann121[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann121, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann122 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann122, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann122 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann122, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann122[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann122[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann122[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann122[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann122[mz1][mz2][mz3] = &_lin__flag_tempQiann122[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann122, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann123 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann123, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann123 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann123, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann123[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann123[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann123[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann123[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann123[mz1][mz2][mz3] = &_lin__flag_tempQiann123[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann123, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann124 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann124, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann124 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann124, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann124[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann124[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann124[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann124[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann124[mz1][mz2][mz3] = &_lin__flag_tempQiann124[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann124, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann125 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann125, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann125 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann125, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann125[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann125[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann125[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann125[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann125[mz1][mz2][mz3] = &_lin__flag_tempQiann125[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann125, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann126 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann126, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann126 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann126, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann126[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann126[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann126[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann126[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann126[mz1][mz2][mz3] = &_lin__flag_tempQiann126[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann126, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann201 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann201, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann201 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann201, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann201[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann201[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann201[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann201[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann201[mz1][mz2][mz3] = &_lin__flag_tempQiann201[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann201, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann202 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann202, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann202 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann202, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann202[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann202[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann202[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann202[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann202[mz1][mz2][mz3] = &_lin__flag_tempQiann202[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann202, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann203 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann203, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann203 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann203, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann203[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann203[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann203[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann203[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann203[mz1][mz2][mz3] = &_lin__flag_tempQiann203[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann203, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann204 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann204, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann204 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann204, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann204[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann204[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann204[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann204[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann204[mz1][mz2][mz3] = &_lin__flag_tempQiann204[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann204, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann205 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann205, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann205 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann205, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann205[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann205[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann205[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann205[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann205[mz1][mz2][mz3] = &_lin__flag_tempQiann205[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann205, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann206 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann206, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann206 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann206, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann206[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann206[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann206[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann206[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann206[mz1][mz2][mz3] = &_lin__flag_tempQiann206[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann206, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann211 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann211, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann211 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann211, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann211[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann211[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann211[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann211[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann211[mz1][mz2][mz3] = &_lin__flag_tempQiann211[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann211, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann212 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann212, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann212 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann212, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann212[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann212[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann212[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann212[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann212[mz1][mz2][mz3] = &_lin__flag_tempQiann212[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann212, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann213 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann213, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann213 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann213, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann213[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann213[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann213[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann213[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann213[mz1][mz2][mz3] = &_lin__flag_tempQiann213[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann213, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann214 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann214, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann214 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann214, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann214[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann214[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann214[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann214[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann214[mz1][mz2][mz3] = &_lin__flag_tempQiann214[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann214, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann215 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann215, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann215 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann215, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann215[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann215[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann215[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann215[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann215[mz1][mz2][mz3] = &_lin__flag_tempQiann215[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann215, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann216 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann216, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann216 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann216, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann216[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann216[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann216[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann216[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann216[mz1][mz2][mz3] = &_lin__flag_tempQiann216[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann216, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann221 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann221, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann221 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann221, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann221[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann221[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann221[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann221[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann221[mz1][mz2][mz3] = &_lin__flag_tempQiann221[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann221, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann222 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann222, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann222 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann222, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann222[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann222[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann222[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann222[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann222[mz1][mz2][mz3] = &_lin__flag_tempQiann222[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann222, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann223 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann223, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann223 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann223, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann223[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann223[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann223[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann223[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann223[mz1][mz2][mz3] = &_lin__flag_tempQiann223[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann223, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann224 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann224, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann224 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann224, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann224[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann224[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann224[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann224[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann224[mz1][mz2][mz3] = &_lin__flag_tempQiann224[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann224, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann225 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann225, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann225 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann225, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann225[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann225[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann225[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann225[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann225[mz1][mz2][mz3] = &_lin__flag_tempQiann225[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann225, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiann226 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiann226, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiann226 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiann226, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiann226[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiann226[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiann226[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiann226[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiann226[mz1][mz2][mz3] = &_lin__flag_tempQiann226[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiann226, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiand011 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiand011, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiand011 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiand011, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiand011[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiand011[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiand011[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiand011[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiand011[mz1][mz2][mz3] = &_lin__flag_tempQiand011[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiand011, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiand012 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiand012, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiand012 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiand012, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiand012[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiand012[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiand012[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiand012[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiand012[mz1][mz2][mz3] = &_lin__flag_tempQiand012[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiand012, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiand013 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiand013, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiand013 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiand013, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiand013[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiand013[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiand013[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiand013[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiand013[mz1][mz2][mz3] = &_lin__flag_tempQiand013[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiand013, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiand014 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiand014, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiand014 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiand014, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiand014[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiand014[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiand014[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiand014[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiand014[mz1][mz2][mz3] = &_lin__flag_tempQiand014[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiand014, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiand015 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiand015, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiand015 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiand015, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiand015[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiand015[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiand015[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiand015[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiand015[mz1][mz2][mz3] = &_lin__flag_tempQiand015[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiand015, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiand101 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiand101, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiand101 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiand101, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiand101[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiand101[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiand101[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiand101[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiand101[mz1][mz2][mz3] = &_lin__flag_tempQiand101[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiand101, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiand102 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiand102, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiand102 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiand102, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiand102[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiand102[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiand102[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiand102[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiand102[mz1][mz2][mz3] = &_lin__flag_tempQiand102[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiand102, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiand103 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiand103, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiand103 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiand103, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiand103[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiand103[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiand103[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiand103[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiand103[mz1][mz2][mz3] = &_lin__flag_tempQiand103[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiand103, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiand104 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiand104, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiand104 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiand104, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiand104[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiand104[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiand104[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiand104[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiand104[mz1][mz2][mz3] = &_lin__flag_tempQiand104[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiand104, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiand105 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiand105, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiand105 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiand105, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiand105[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiand105[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiand105[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiand105[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiand105[mz1][mz2][mz3] = &_lin__flag_tempQiand105[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiand105, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiand111 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiand111, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiand111 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiand111, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiand111[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiand111[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiand111[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiand111[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiand111[mz1][mz2][mz3] = &_lin__flag_tempQiand111[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiand111, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiand112 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiand112, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiand112 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiand112, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiand112[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiand112[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiand112[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiand112[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiand112[mz1][mz2][mz3] = &_lin__flag_tempQiand112[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiand112, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiand113 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiand113, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiand113 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiand113, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiand113[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiand113[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiand113[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiand113[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiand113[mz1][mz2][mz3] = &_lin__flag_tempQiand113[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiand113, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiand114 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiand114, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiand114 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiand114, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiand114[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiand114[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiand114[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiand114[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiand114[mz1][mz2][mz3] = &_lin__flag_tempQiand114[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiand114, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiand115 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiand115, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiand115 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiand115, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiand115[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiand115[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiand115[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiand115[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiand115[mz1][mz2][mz3] = &_lin__flag_tempQiand115[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiand115, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiand201 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiand201, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiand201 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiand201, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiand201[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiand201[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiand201[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiand201[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiand201[mz1][mz2][mz3] = &_lin__flag_tempQiand201[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiand201, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiand202 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiand202, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiand202 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiand202, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiand202[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiand202[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiand202[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiand202[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiand202[mz1][mz2][mz3] = &_lin__flag_tempQiand202[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiand202, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiand203 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiand203, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiand203 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiand203, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiand203[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiand203[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiand203[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiand203[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiand203[mz1][mz2][mz3] = &_lin__flag_tempQiand203[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiand203, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiand204 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiand204, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiand204 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiand204, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiand204[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiand204[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiand204[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiand204[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiand204[mz1][mz2][mz3] = &_lin__flag_tempQiand204[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiand204, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiand205 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiand205, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiand205 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiand205, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiand205[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiand205[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiand205[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiand205[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiand205[mz1][mz2][mz3] = &_lin__flag_tempQiand205[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiand205, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiand211 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiand211, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiand211 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiand211, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiand211[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiand211[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiand211[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiand211[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiand211[mz1][mz2][mz3] = &_lin__flag_tempQiand211[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiand211, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiand212 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiand212, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiand212 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiand212, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiand212[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiand212[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiand212[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiand212[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiand212[mz1][mz2][mz3] = &_lin__flag_tempQiand212[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiand212, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiand213 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiand213, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiand213 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiand213, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiand213[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiand213[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiand213[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiand213[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiand213[mz1][mz2][mz3] = &_lin__flag_tempQiand213[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiand213, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiand214 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiand214, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiand214 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiand214, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiand214[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiand214[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiand214[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiand214[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiand214[mz1][mz2][mz3] = &_lin__flag_tempQiand214[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiand214, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiand215 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiand215, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiand215 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiand215, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiand215[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiand215[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiand215[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiand215[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiand215[mz1][mz2][mz3] = &_lin__flag_tempQiand215[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiand215, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadn011 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadn011, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadn011 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadn011, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadn011[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadn011[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadn011[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadn011[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadn011[mz1][mz2][mz3] = &_lin__flag_tempQiadn011[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadn011, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadn012 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadn012, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadn012 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadn012, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadn012[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadn012[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadn012[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadn012[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadn012[mz1][mz2][mz3] = &_lin__flag_tempQiadn012[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadn012, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadn013 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadn013, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadn013 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadn013, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadn013[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadn013[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadn013[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadn013[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadn013[mz1][mz2][mz3] = &_lin__flag_tempQiadn013[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadn013, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadn014 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadn014, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadn014 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadn014, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadn014[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadn014[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadn014[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadn014[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadn014[mz1][mz2][mz3] = &_lin__flag_tempQiadn014[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadn014, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadn015 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadn015, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadn015 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadn015, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadn015[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadn015[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadn015[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadn015[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadn015[mz1][mz2][mz3] = &_lin__flag_tempQiadn015[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadn015, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadn021 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadn021, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadn021 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadn021, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadn021[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadn021[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadn021[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadn021[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadn021[mz1][mz2][mz3] = &_lin__flag_tempQiadn021[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadn021, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadn022 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadn022, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadn022 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadn022, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadn022[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadn022[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadn022[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadn022[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadn022[mz1][mz2][mz3] = &_lin__flag_tempQiadn022[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadn022, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadn023 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadn023, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadn023 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadn023, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadn023[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadn023[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadn023[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadn023[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadn023[mz1][mz2][mz3] = &_lin__flag_tempQiadn023[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadn023, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadn024 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadn024, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadn024 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadn024, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadn024[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadn024[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadn024[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadn024[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadn024[mz1][mz2][mz3] = &_lin__flag_tempQiadn024[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadn024, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadn025 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadn025, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadn025 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadn025, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadn025[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadn025[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadn025[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadn025[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadn025[mz1][mz2][mz3] = &_lin__flag_tempQiadn025[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadn025, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadn101 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadn101, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadn101 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadn101, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadn101[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadn101[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadn101[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadn101[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadn101[mz1][mz2][mz3] = &_lin__flag_tempQiadn101[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadn101, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadn102 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadn102, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadn102 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadn102, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadn102[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadn102[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadn102[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadn102[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadn102[mz1][mz2][mz3] = &_lin__flag_tempQiadn102[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadn102, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadn103 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadn103, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadn103 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadn103, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadn103[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadn103[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadn103[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadn103[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadn103[mz1][mz2][mz3] = &_lin__flag_tempQiadn103[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadn103, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadn104 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadn104, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadn104 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadn104, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadn104[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadn104[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadn104[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadn104[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadn104[mz1][mz2][mz3] = &_lin__flag_tempQiadn104[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadn104, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadn105 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadn105, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadn105 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadn105, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadn105[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadn105[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadn105[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadn105[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadn105[mz1][mz2][mz3] = &_lin__flag_tempQiadn105[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadn105, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadn111 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadn111, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadn111 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadn111, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadn111[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadn111[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadn111[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadn111[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadn111[mz1][mz2][mz3] = &_lin__flag_tempQiadn111[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadn111, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadn112 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadn112, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadn112 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadn112, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadn112[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadn112[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadn112[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadn112[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadn112[mz1][mz2][mz3] = &_lin__flag_tempQiadn112[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadn112, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadn113 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadn113, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadn113 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadn113, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadn113[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadn113[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadn113[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadn113[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadn113[mz1][mz2][mz3] = &_lin__flag_tempQiadn113[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadn113, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadn114 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadn114, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadn114 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadn114, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadn114[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadn114[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadn114[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadn114[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadn114[mz1][mz2][mz3] = &_lin__flag_tempQiadn114[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadn114, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadn115 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadn115, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadn115 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadn115, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadn115[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadn115[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadn115[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadn115[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadn115[mz1][mz2][mz3] = &_lin__flag_tempQiadn115[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadn115, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadn121 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadn121, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadn121 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadn121, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadn121[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadn121[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadn121[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadn121[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadn121[mz1][mz2][mz3] = &_lin__flag_tempQiadn121[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadn121, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadn122 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadn122, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadn122 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadn122, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadn122[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadn122[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadn122[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadn122[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadn122[mz1][mz2][mz3] = &_lin__flag_tempQiadn122[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadn122, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadn123 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadn123, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadn123 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadn123, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadn123[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadn123[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadn123[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadn123[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadn123[mz1][mz2][mz3] = &_lin__flag_tempQiadn123[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadn123, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadn124 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadn124, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadn124 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadn124, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadn124[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadn124[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadn124[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadn124[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadn124[mz1][mz2][mz3] = &_lin__flag_tempQiadn124[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadn124, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadn125 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadn125, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadn125 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadn125, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadn125[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadn125[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadn125[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadn125[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadn125[mz1][mz2][mz3] = &_lin__flag_tempQiadn125[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadn125, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadd011 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadd011, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadd011 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadd011, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadd011[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadd011[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadd011[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadd011[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadd011[mz1][mz2][mz3] = &_lin__flag_tempQiadd011[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadd011, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadd012 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadd012, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadd012 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadd012, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadd012[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadd012[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadd012[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadd012[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadd012[mz1][mz2][mz3] = &_lin__flag_tempQiadd012[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadd012, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadd013 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadd013, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadd013 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadd013, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadd013[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadd013[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadd013[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadd013[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadd013[mz1][mz2][mz3] = &_lin__flag_tempQiadd013[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadd013, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadd014 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadd014, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadd014 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadd014, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadd014[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadd014[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadd014[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadd014[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadd014[mz1][mz2][mz3] = &_lin__flag_tempQiadd014[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadd014, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadd015 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadd015, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadd015 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadd015, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadd015[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadd015[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadd015[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadd015[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadd015[mz1][mz2][mz3] = &_lin__flag_tempQiadd015[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadd015, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadd101 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadd101, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadd101 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadd101, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadd101[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadd101[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadd101[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadd101[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadd101[mz1][mz2][mz3] = &_lin__flag_tempQiadd101[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadd101, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadd102 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadd102, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadd102 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadd102, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadd102[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadd102[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadd102[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadd102[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadd102[mz1][mz2][mz3] = &_lin__flag_tempQiadd102[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadd102, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadd103 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadd103, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadd103 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadd103, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadd103[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadd103[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadd103[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadd103[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadd103[mz1][mz2][mz3] = &_lin__flag_tempQiadd103[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadd103, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadd104 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadd104, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadd104 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadd104, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadd104[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadd104[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadd104[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadd104[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadd104[mz1][mz2][mz3] = &_lin__flag_tempQiadd104[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadd104, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadd105 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadd105, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadd105 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadd105, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadd105[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadd105[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadd105[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadd105[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadd105[mz1][mz2][mz3] = &_lin__flag_tempQiadd105[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadd105, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadd111 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadd111, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadd111 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadd111, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadd111[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadd111[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadd111[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadd111[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadd111[mz1][mz2][mz3] = &_lin__flag_tempQiadd111[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadd111, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadd112 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadd112, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadd112 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadd112, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadd112[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadd112[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadd112[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadd112[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadd112[mz1][mz2][mz3] = &_lin__flag_tempQiadd112[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadd112, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadd113 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadd113, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadd113 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadd113, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadd113[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadd113[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadd113[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadd113[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadd113[mz1][mz2][mz3] = &_lin__flag_tempQiadd113[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadd113, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadd114 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadd114, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadd114 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadd114, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadd114[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadd114[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadd114[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadd114[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadd114[mz1][mz2][mz3] = &_lin__flag_tempQiadd114[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadd114, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiadd115 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiadd115, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiadd115 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiadd115, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiadd115[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiadd115[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiadd115[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiadd115[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiadd115[mz1][mz2][mz3] = &_lin__flag_tempQiadd115[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiadd115, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQir011 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQir011, ((N) * (N) * (M) * (M)), char);
	_flag_tempQir011 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQir011, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQir011[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQir011[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQir011[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQir011[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQir011[mz1][mz2][mz3] = &_lin__flag_tempQir011[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQir011, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQir012 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQir012, ((N) * (N) * (M) * (M)), char);
	_flag_tempQir012 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQir012, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQir012[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQir012[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQir012[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQir012[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQir012[mz1][mz2][mz3] = &_lin__flag_tempQir012[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQir012, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQir101 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQir101, ((N) * (N) * (M) * (M)), char);
	_flag_tempQir101 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQir101, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQir101[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQir101[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQir101[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQir101[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQir101[mz1][mz2][mz3] = &_lin__flag_tempQir101[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQir101, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQir102 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQir102, ((N) * (N) * (M) * (M)), char);
	_flag_tempQir102 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQir102, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQir102[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQir102[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQir102[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQir102[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQir102[mz1][mz2][mz3] = &_lin__flag_tempQir102[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQir102, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQir111 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQir111, ((N) * (N) * (M) * (M)), char);
	_flag_tempQir111 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQir111, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQir111[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQir111[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQir111[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQir111[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQir111[mz1][mz2][mz3] = &_lin__flag_tempQir111[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQir111, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQir112 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQir112, ((N) * (N) * (M) * (M)), char);
	_flag_tempQir112 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQir112, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQir112[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQir112[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQir112[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQir112[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQir112[mz1][mz2][mz3] = &_lin__flag_tempQir112[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQir112, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiar011 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiar011, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiar011 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiar011, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiar011[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiar011[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiar011[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiar011[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiar011[mz1][mz2][mz3] = &_lin__flag_tempQiar011[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiar011, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiar012 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiar012, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiar012 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiar012, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiar012[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiar012[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiar012[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiar012[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiar012[mz1][mz2][mz3] = &_lin__flag_tempQiar012[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiar012, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiar013 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiar013, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiar013 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiar013, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiar013[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiar013[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiar013[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiar013[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiar013[mz1][mz2][mz3] = &_lin__flag_tempQiar013[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiar013, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiar101 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiar101, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiar101 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiar101, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiar101[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiar101[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiar101[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiar101[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiar101[mz1][mz2][mz3] = &_lin__flag_tempQiar101[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiar101, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiar102 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiar102, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiar102 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiar102, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiar102[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiar102[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiar102[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiar102[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiar102[mz1][mz2][mz3] = &_lin__flag_tempQiar102[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiar102, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiar103 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiar103, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiar103 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiar103, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiar103[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiar103[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiar103[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiar103[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiar103[mz1][mz2][mz3] = &_lin__flag_tempQiar103[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiar103, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiar111 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiar111, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiar111 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiar111, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiar111[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiar111[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiar111[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiar111[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiar111[mz1][mz2][mz3] = &_lin__flag_tempQiar111[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiar111, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiar112 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiar112, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiar112 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiar112, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiar112[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiar112[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiar112[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiar112[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiar112[mz1][mz2][mz3] = &_lin__flag_tempQiar112[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiar112, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQiar113 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQiar113, ((N) * (N) * (M) * (M)), char);
	_flag_tempQiar113 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQiar113, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQiar113[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQiar113[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQiar113[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQiar113[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQiar113[mz1][mz2][mz3] = &_lin__flag_tempQiar113[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQiar113, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQilr011 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQilr011, ((N) * (N) * (M) * (M)), char);
	_flag_tempQilr011 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQilr011, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQilr011[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQilr011[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQilr011[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQilr011[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQilr011[mz1][mz2][mz3] = &_lin__flag_tempQilr011[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQilr011, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQilr012 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQilr012, ((N) * (N) * (M) * (M)), char);
	_flag_tempQilr012 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQilr012, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQilr012[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQilr012[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQilr012[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQilr012[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQilr012[mz1][mz2][mz3] = &_lin__flag_tempQilr012[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQilr012, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQilr101 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQilr101, ((N) * (N) * (M) * (M)), char);
	_flag_tempQilr101 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQilr101, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQilr101[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQilr101[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQilr101[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQilr101[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQilr101[mz1][mz2][mz3] = &_lin__flag_tempQilr101[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQilr101, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQilr102 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQilr102, ((N) * (N) * (M) * (M)), char);
	_flag_tempQilr102 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQilr102, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQilr102[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQilr102[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQilr102[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQilr102[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQilr102[mz1][mz2][mz3] = &_lin__flag_tempQilr102[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQilr102, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQilr111 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQilr111, ((N) * (N) * (M) * (M)), char);
	_flag_tempQilr111 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQilr111, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQilr111[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQilr111[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQilr111[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQilr111[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQilr111[mz1][mz2][mz3] = &_lin__flag_tempQilr111[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQilr111, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQilr112 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQilr112, ((N) * (N) * (M) * (M)), char);
	_flag_tempQilr112 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQilr112, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQilr112[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQilr112[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQilr112[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQilr112[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQilr112[mz1][mz2][mz3] = &_lin__flag_tempQilr112[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQilr112, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQi1 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQi1, ((N) * (N) * (M) * (M)), char);
	_flag_tempQi1 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQi1, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQi1[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQi1[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQi1[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQi1[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQi1[mz1][mz2][mz3] = &_lin__flag_tempQi1[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQi1, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQi2 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQi2, ((N) * (N) * (M) * (M)), char);
	_flag_tempQi2 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQi2, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQi2[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQi2[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQi2[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQi2[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQi2[mz1][mz2][mz3] = &_lin__flag_tempQi2[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQi2, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQia1 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQia1, ((N) * (N) * (M) * (M)), char);
	_flag_tempQia1 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQia1, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQia1[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQia1[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQia1[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQia1[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQia1[mz1][mz2][mz3] = &_lin__flag_tempQia1[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQia1, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQia2 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQia2, ((N) * (N) * (M) * (M)), char);
	_flag_tempQia2 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQia2, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQia2[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQia2[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQia2[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQia2[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQia2[mz1][mz2][mz3] = &_lin__flag_tempQia2[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQia2, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQia3 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQia3, ((N) * (N) * (M) * (M)), char);
	_flag_tempQia3 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQia3, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQia3[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQia3[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQia3[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQia3[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQia3[mz1][mz2][mz3] = &_lin__flag_tempQia3[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQia3, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQia4 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQia4, ((N) * (N) * (M) * (M)), char);
	_flag_tempQia4 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQia4, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQia4[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQia4[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQia4[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQia4[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQia4[mz1][mz2][mz3] = &_lin__flag_tempQia4[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQia4, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQia5 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQia5, ((N) * (N) * (M) * (M)), char);
	_flag_tempQia5 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQia5, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQia5[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQia5[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQia5[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQia5[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQia5[mz1][mz2][mz3] = &_lin__flag_tempQia5[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQia5, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQia6 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQia6, ((N) * (N) * (M) * (M)), char);
	_flag_tempQia6 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQia6, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQia6[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQia6[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQia6[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQia6[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQia6[mz1][mz2][mz3] = &_lin__flag_tempQia6[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQia6, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQib001 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQib001, ((N) * (N) * (M) * (M)), char);
	_flag_tempQib001 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQib001, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQib001[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQib001[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQib001[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQib001[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQib001[mz1][mz2][mz3] = &_lin__flag_tempQib001[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQib001, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQib002 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQib002, ((N) * (N) * (M) * (M)), char);
	_flag_tempQib002 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQib002, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQib002[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQib002[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQib002[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQib002[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQib002[mz1][mz2][mz3] = &_lin__flag_tempQib002[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQib002, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQib011 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQib011, ((N) * (N) * (M) * (M)), char);
	_flag_tempQib011 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQib011, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQib011[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQib011[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQib011[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQib011[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQib011[mz1][mz2][mz3] = &_lin__flag_tempQib011[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQib011, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQib012 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQib012, ((N) * (N) * (M) * (M)), char);
	_flag_tempQib012 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQib012, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQib012[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQib012[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQib012[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQib012[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQib012[mz1][mz2][mz3] = &_lin__flag_tempQib012[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQib012, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQib101 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQib101, ((N) * (N) * (M) * (M)), char);
	_flag_tempQib101 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQib101, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQib101[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQib101[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQib101[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQib101[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQib101[mz1][mz2][mz3] = &_lin__flag_tempQib101[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQib101, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQib102 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQib102, ((N) * (N) * (M) * (M)), char);
	_flag_tempQib102 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQib102, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQib102[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQib102[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQib102[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQib102[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQib102[mz1][mz2][mz3] = &_lin__flag_tempQib102[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQib102, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQib111 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQib111, ((N) * (N) * (M) * (M)), char);
	_flag_tempQib111 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQib111, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQib111[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQib111[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQib111[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQib111[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQib111[mz1][mz2][mz3] = &_lin__flag_tempQib111[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQib111, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQib112 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQib112, ((N) * (N) * (M) * (M)), char);
	_flag_tempQib112 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQib112, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQib112[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQib112[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQib112[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQib112[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQib112[mz1][mz2][mz3] = &_lin__flag_tempQib112[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQib112, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQinn011 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQinn011, ((N) * (N) * (M) * (M)), char);
	_flag_tempQinn011 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQinn011, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQinn011[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQinn011[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQinn011[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQinn011[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQinn011[mz1][mz2][mz3] = &_lin__flag_tempQinn011[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQinn011, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQinn021 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQinn021, ((N) * (N) * (M) * (M)), char);
	_flag_tempQinn021 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQinn021, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQinn021[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQinn021[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQinn021[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQinn021[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQinn021[mz1][mz2][mz3] = &_lin__flag_tempQinn021[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQinn021, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQinn101 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQinn101, ((N) * (N) * (M) * (M)), char);
	_flag_tempQinn101 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQinn101, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQinn101[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQinn101[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQinn101[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQinn101[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQinn101[mz1][mz2][mz3] = &_lin__flag_tempQinn101[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQinn101, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQinn111 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQinn111, ((N) * (N) * (M) * (M)), char);
	_flag_tempQinn111 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQinn111, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQinn111[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQinn111[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQinn111[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQinn111[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQinn111[mz1][mz2][mz3] = &_lin__flag_tempQinn111[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQinn111, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQinn121 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQinn121, ((N) * (N) * (M) * (M)), char);
	_flag_tempQinn121 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQinn121, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQinn121[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQinn121[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQinn121[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQinn121[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQinn121[mz1][mz2][mz3] = &_lin__flag_tempQinn121[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQinn121, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQinn201 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQinn201, ((N) * (N) * (M) * (M)), char);
	_flag_tempQinn201 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQinn201, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQinn201[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQinn201[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQinn201[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQinn201[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQinn201[mz1][mz2][mz3] = &_lin__flag_tempQinn201[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQinn201, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQinn211 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQinn211, ((N) * (N) * (M) * (M)), char);
	_flag_tempQinn211 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQinn211, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQinn211[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQinn211[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQinn211[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQinn211[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQinn211[mz1][mz2][mz3] = &_lin__flag_tempQinn211[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQinn211, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQinn221 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQinn221, ((N) * (N) * (M) * (M)), char);
	_flag_tempQinn221 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQinn221, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQinn221[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQinn221[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQinn221[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQinn221[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQinn221[mz1][mz2][mz3] = &_lin__flag_tempQinn221[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQinn221, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQidd011 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQidd011, ((N) * (N) * (M) * (M)), char);
	_flag_tempQidd011 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQidd011, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQidd011[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQidd011[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQidd011[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQidd011[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQidd011[mz1][mz2][mz3] = &_lin__flag_tempQidd011[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQidd011, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQidd101 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQidd101, ((N) * (N) * (M) * (M)), char);
	_flag_tempQidd101 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQidd101, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQidd101[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQidd101[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQidd101[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQidd101[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQidd101[mz1][mz2][mz3] = &_lin__flag_tempQidd101[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQidd101, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQidd111 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQidd111, ((N) * (N) * (M) * (M)), char);
	_flag_tempQidd111 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQidd111, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQidd111[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQidd111[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQidd111[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQidd111[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQidd111[mz1][mz2][mz3] = &_lin__flag_tempQidd111[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQidd111, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQidd012 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQidd012, ((N) * (N) * (M) * (M)), char);
	_flag_tempQidd012 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQidd012, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQidd012[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQidd012[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQidd012[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQidd012[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQidd012[mz1][mz2][mz3] = &_lin__flag_tempQidd012[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQidd012, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQidd102 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQidd102, ((N) * (N) * (M) * (M)), char);
	_flag_tempQidd102 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQidd102, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQidd102[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQidd102[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQidd102[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQidd102[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQidd102[mz1][mz2][mz3] = &_lin__flag_tempQidd102[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQidd102, 'N', ((N) * (N) * (M) * (M)));
	
	char* _lin__flag_tempQidd112 = (char*)malloc(sizeof(char)*((N) * (N) * (M) * (M)));
	mallocCheck(_lin__flag_tempQidd112, ((N) * (N) * (M) * (M)), char);
	_flag_tempQidd112 = (char****)malloc(sizeof(char***)*(N));
	mallocCheck(_flag_tempQidd112, (N), char***);
	for (mz1=0;mz1 < N; mz1++) {
		_flag_tempQidd112[mz1] = (char***)malloc(sizeof(char**)*(N));
		mallocCheck(_flag_tempQidd112[mz1], (N), char**);
		for (mz2=0;mz2 < N; mz2++) {
			_flag_tempQidd112[mz1][mz2] = (char**)malloc(sizeof(char*)*(M));
			mallocCheck(_flag_tempQidd112[mz1][mz2], (M), char*);
			for (mz3=0;mz3 < M; mz3++) {
				_flag_tempQidd112[mz1][mz2][mz3] = &_lin__flag_tempQidd112[(mz1*((N) * (M) * (M))) + (mz2*((M) * (M))) + (mz3*(M))];
			}
		}
	}
	memset(_lin__flag_tempQidd112, 'N', ((N) * (N) * (M) * (M)));
	#define S0(i) eval_seq1(N,M,MHL,i)
	{
		//Domain
		//{i|i>=0 && M>=i+1 && N>=9 && M>=9 && MHL>=11}
		int c1;
		for(c1=0;c1 <= M-1;c1+=1)
		 {
		 	S0((c1));
		 }
	}
	#undef S0
	#define S0(i,j) eval_Q00(N,M,MHL,i,j)
	{
		//Domain
		//{i,j|i>=0 && N>=i+1 && j>=i && N>=j+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	S0((c1),(c2));
		 	 }
		 }
	}
	#undef S0
	#define S0(i,j) eval_Q10(N,M,MHL,i,j)
	{
		//Domain
		//{i,j|i>=0 && N>=i+1 && j>=i && N>=j+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	S0((c1),(c2));
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qi(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|N>=j1+1 && i2>=0 && M>=j2+1 && j2>=i2 && i1>=0 && j1>=i1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qiy(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qixm00(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qixm01(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qixm02(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qixm10(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qixm11(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qixm12(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qixk00(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qixk01(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qixk10(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qixk11(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qimm02(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qimm12(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qimm20(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qimm21(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qimm22(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qimk01(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qimk11(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qimk20(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qimk21(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qikm10(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qikm11(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qikm02(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qikm12(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qikk01(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qikk10(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qikk11(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qiann01(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qiann02(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qiann10(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qiann11(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qiann12(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qiann20(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qiann21(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qiann22(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qiand01(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qiand10(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qiand11(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qiand20(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qiand21(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qiadn01(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qiadn02(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qiadn10(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qiadn11(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qiadn12(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qiadd01(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qiadd10(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qiadd11(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qiar01(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qiar10(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qiar11(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qilr01(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qilr10(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qilr11(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qir01(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qir10(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qir11(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qia(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qib00(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qib01(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qib10(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qib11(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qinn01(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qinn02(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qinn10(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qinn11(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qinn12(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qinn20(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qinn21(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qinn22(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qind01(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qind10(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qind11(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qind20(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qind21(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qidn01(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qidn02(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qidn10(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qidn11(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qidn12(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qidd01(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qidd10(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qidd11(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qix00(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qix01(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qix10(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_Qix11(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_auxqiadd01(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_auxqiadd10(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_auxqiadd11(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_auxqia01(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_auxqia10(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	#define S0(i1,j1,i2,j2) eval_auxqia11(N,M,MHL,i1,j1,i2,j2)
	{
		//Domain
		//{i1,j1,i2,j2|i1>=0 && N>=i1+1 && j1>=i1 && N>=j1+1 && i2>=0 && M>=i2+1 && j2>=i2 && M>=j2+1 && N>=9 && M>=9 && MHL>=11}
		int c1,c2,c3,c4;
		for(c1=0;c1 <= N-1;c1+=1)
		 {
		 	for(c2=c1;c2 <= N-1;c2+=1)
		 	 {
		 	 	for(c3=0;c3 <= M-1;c3+=1)
		 	 	 {
		 	 	 	for(c4=c3;c4 <= M-1;c4+=1)
		 	 	 	 {
		 	 	 	 	S0((c1),(c2),(c3),(c4));
		 	 	 	 }
		 	 	 }
		 	 }
		 }
	}
	#undef S0
	
	//Memory Free
	free(_lin_Qb0);
	free(Qb0);
	
	free(_lin_Qg0);
	for (mz1=0;mz1 < N-6; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(Qg0[mz1][mz2]);
		}
		free(Qg0[mz1]);
	}
	free(Qg0);
	
	free(_lin_tempqg0);
	for (mz1=0;mz1 < N-8; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempqg0[mz1][mz2]);
		}
		free(tempqg0[mz1]);
	}
	free(tempqg0);
	
	free(_lin_tempqgk0);
	for (mz1=0;mz1 < N-4; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempqgk0[mz1][mz2]);
		}
		free(tempqgk0[mz1]);
	}
	free(tempqgk0);
	
	free(_lin_tempqgm0);
	for (mz1=0;mz1 < N-4; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempqgm0[mz1][mz2]);
		}
		free(tempqgm0[mz1]);
	}
	free(tempqgm0);
	
	free(_lin_Qbr);
	free(Qbr);
	
	free(_lin_Qgr);
	for (mz1=0;mz1 < M-6; mz1++) {
		for (mz2=0;mz2 < M; mz2++) {
			free(Qgr[mz1][mz2]);
		}
		free(Qgr[mz1]);
	}
	free(Qgr);
	
	free(_lin_tempqgr);
	for (mz1=0;mz1 < M-8; mz1++) {
		for (mz2=0;mz2 < M; mz2++) {
			free(tempqgr[mz1][mz2]);
		}
		free(tempqgr[mz1]);
	}
	free(tempqgr);
	
	free(_lin_tempqgkr);
	for (mz1=0;mz1 < M-4; mz1++) {
		for (mz2=0;mz2 < M; mz2++) {
			free(tempqgkr[mz1][mz2]);
		}
		free(tempqgkr[mz1]);
	}
	free(tempqgkr);
	
	free(_lin_tempqgmr);
	for (mz1=0;mz1 < M-4; mz1++) {
		for (mz2=0;mz2 < M; mz2++) {
			free(tempqgmr[mz1][mz2]);
		}
		free(tempqgmr[mz1]);
	}
	free(tempqgmr);
	
	free(_lin_Qm00);
	free(Qm00);
	
	free(_lin_Qm10);
	free(Qm10);
	
	free(_lin_Q0r);
	free(Q0r);
	
	free(_lin_Q1r);
	free(Q1r);
	
	free(_lin_Qm0r);
	free(Qm0r);
	
	free(_lin_Qm1r);
	free(Qm1r);
	
	free(_lin_Qgk1);
	for (mz1=0;mz1 < M-2; mz1++) {
		for (mz2=0;mz2 < M; mz2++) {
			free(Qgk1[mz1][mz2]);
		}
		free(Qgk1[mz1]);
	}
	free(Qgk1);
	
	free(_lin_Qgm1);
	for (mz1=0;mz1 < M-2; mz1++) {
		for (mz2=0;mz2 < M; mz2++) {
			free(Qgm1[mz1][mz2]);
		}
		free(Qgm1[mz1]);
	}
	free(Qgm1);
	
	free(_lin_Q01);
	free(Q01);
	
	free(_lin_Q11);
	free(Q11);
	
	free(_lin_Qm01);
	free(Qm01);
	
	free(_lin_Qm11);
	free(Qm11);
	
	free(_lin_Qih0);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(Qih0[mz1][mz2]);
		}
		free(Qih0[mz1]);
	}
	free(Qih0);
	
	free(_lin_Qih1);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(Qih1[mz1][mz2]);
		}
		free(Qih1[mz1]);
	}
	free(Qih1);
	
	free(_lin_Qihh00);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(Qihh00[mz1][mz2]);
		}
		free(Qihh00[mz1]);
	}
	free(Qihh00);
	
	free(_lin_Qihh01);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(Qihh01[mz1][mz2]);
		}
		free(Qihh01[mz1]);
	}
	free(Qihh01);
	
	free(_lin_Qihh10);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(Qihh10[mz1][mz2]);
		}
		free(Qihh10[mz1]);
	}
	free(Qihh10);
	
	free(_lin_Qihh11);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(Qihh11[mz1][mz2]);
		}
		free(Qihh11[mz1]);
	}
	free(Qihh11);
	
	free(_lin_Qihm00);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(Qihm00[mz1][mz2]);
		}
		free(Qihm00[mz1]);
	}
	free(Qihm00);
	
	free(_lin_Qihm01);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(Qihm01[mz1][mz2]);
		}
		free(Qihm01[mz1]);
	}
	free(Qihm01);
	
	free(_lin_Qihm10);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(Qihm10[mz1][mz2]);
		}
		free(Qihm10[mz1]);
	}
	free(Qihm10);
	
	free(_lin_Qihm11);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(Qihm11[mz1][mz2]);
		}
		free(Qihm11[mz1]);
	}
	free(Qihm11);
	
	free(_lin_Qgkr);
	for (mz1=0;mz1 < M-2; mz1++) {
		for (mz2=0;mz2 < M; mz2++) {
			free(Qgkr[mz1][mz2]);
		}
		free(Qgkr[mz1]);
	}
	free(Qgkr);
	
	free(_lin_Qgmr);
	for (mz1=0;mz1 < M-2; mz1++) {
		for (mz2=0;mz2 < M; mz2++) {
			free(Qgmr[mz1][mz2]);
		}
		free(Qgmr[mz1]);
	}
	free(Qgmr);
	
	free(_lin_Qgk0);
	for (mz1=0;mz1 < N-2; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(Qgk0[mz1][mz2]);
		}
		free(Qgk0[mz1]);
	}
	free(Qgk0);
	
	free(_lin_Qgm0);
	for (mz1=0;mz1 < N-2; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(Qgm0[mz1][mz2]);
		}
		free(Qgm0[mz1]);
	}
	free(Qgm0);
	
	free(_lin_Q20);
	free(Q20);
	
	free(_lin_Qm20);
	free(Qm20);
	
	free(_lin_Qm2r);
	free(Qm2r);
	
	free(_lin_Q2r);
	free(Q2r);
	
	free(_lin_Q21);
	free(Q21);
	
	free(_lin_tempQiy1);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiy1[mz1][mz2]);
		}
		free(tempQiy1[mz1]);
	}
	free(tempQiy1);
	
	free(_lin_tempQiy2);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiy2[mz1][mz2]);
		}
		free(tempQiy2[mz1]);
	}
	free(tempQiy2);
	
	free(_lin_tempQixm001);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQixm001[mz1][mz2]);
		}
		free(tempQixm001[mz1]);
	}
	free(tempQixm001);
	
	free(_lin_tempQixm002);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQixm002[mz1][mz2]);
		}
		free(tempQixm002[mz1]);
	}
	free(tempQixm002);
	
	free(_lin_tempQixm011);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQixm011[mz1][mz2]);
		}
		free(tempQixm011[mz1]);
	}
	free(tempQixm011);
	
	free(_lin_tempQixm012);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQixm012[mz1][mz2]);
		}
		free(tempQixm012[mz1]);
	}
	free(tempQixm012);
	
	free(_lin_tempQixm021);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQixm021[mz1][mz2]);
		}
		free(tempQixm021[mz1]);
	}
	free(tempQixm021);
	
	free(_lin_tempQixm022);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQixm022[mz1][mz2]);
		}
		free(tempQixm022[mz1]);
	}
	free(tempQixm022);
	
	free(_lin_tempQixm101);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQixm101[mz1][mz2]);
		}
		free(tempQixm101[mz1]);
	}
	free(tempQixm101);
	
	free(_lin_tempQixm102);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQixm102[mz1][mz2]);
		}
		free(tempQixm102[mz1]);
	}
	free(tempQixm102);
	
	free(_lin_tempQixm111);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQixm111[mz1][mz2]);
		}
		free(tempQixm111[mz1]);
	}
	free(tempQixm111);
	
	free(_lin_tempQixm112);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQixm112[mz1][mz2]);
		}
		free(tempQixm112[mz1]);
	}
	free(tempQixm112);
	
	free(_lin_tempQixm121);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQixm121[mz1][mz2]);
		}
		free(tempQixm121[mz1]);
	}
	free(tempQixm121);
	
	free(_lin_tempQixm122);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQixm122[mz1][mz2]);
		}
		free(tempQixm122[mz1]);
	}
	free(tempQixm122);
	
	free(_lin_tempQixk001);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQixk001[mz1][mz2]);
		}
		free(tempQixk001[mz1]);
	}
	free(tempQixk001);
	
	free(_lin_tempQixk002);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQixk002[mz1][mz2]);
		}
		free(tempQixk002[mz1]);
	}
	free(tempQixk002);
	
	free(_lin_tempQixk011);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQixk011[mz1][mz2]);
		}
		free(tempQixk011[mz1]);
	}
	free(tempQixk011);
	
	free(_lin_tempQixk012);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQixk012[mz1][mz2]);
		}
		free(tempQixk012[mz1]);
	}
	free(tempQixk012);
	
	free(_lin_tempQixk101);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQixk101[mz1][mz2]);
		}
		free(tempQixk101[mz1]);
	}
	free(tempQixk101);
	
	free(_lin_tempQixk102);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQixk102[mz1][mz2]);
		}
		free(tempQixk102[mz1]);
	}
	free(tempQixk102);
	
	free(_lin_tempQixk111);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQixk111[mz1][mz2]);
		}
		free(tempQixk111[mz1]);
	}
	free(tempQixk111);
	
	free(_lin_tempQixk112);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQixk112[mz1][mz2]);
		}
		free(tempQixk112[mz1]);
	}
	free(tempQixk112);
	
	free(_lin_tempQimm021);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQimm021[mz1][mz2]);
		}
		free(tempQimm021[mz1]);
	}
	free(tempQimm021);
	
	free(_lin_tempQimm022);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQimm022[mz1][mz2]);
		}
		free(tempQimm022[mz1]);
	}
	free(tempQimm022);
	
	free(_lin_tempQimm023);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQimm023[mz1][mz2]);
		}
		free(tempQimm023[mz1]);
	}
	free(tempQimm023);
	
	free(_lin_tempQimm121);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQimm121[mz1][mz2]);
		}
		free(tempQimm121[mz1]);
	}
	free(tempQimm121);
	
	free(_lin_tempQimm122);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQimm122[mz1][mz2]);
		}
		free(tempQimm122[mz1]);
	}
	free(tempQimm122);
	
	free(_lin_tempQimm123);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQimm123[mz1][mz2]);
		}
		free(tempQimm123[mz1]);
	}
	free(tempQimm123);
	
	free(_lin_tempQimm201);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQimm201[mz1][mz2]);
		}
		free(tempQimm201[mz1]);
	}
	free(tempQimm201);
	
	free(_lin_tempQimm202);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQimm202[mz1][mz2]);
		}
		free(tempQimm202[mz1]);
	}
	free(tempQimm202);
	
	free(_lin_tempQimm203);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQimm203[mz1][mz2]);
		}
		free(tempQimm203[mz1]);
	}
	free(tempQimm203);
	
	free(_lin_tempQimm211);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQimm211[mz1][mz2]);
		}
		free(tempQimm211[mz1]);
	}
	free(tempQimm211);
	
	free(_lin_tempQimm212);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQimm212[mz1][mz2]);
		}
		free(tempQimm212[mz1]);
	}
	free(tempQimm212);
	
	free(_lin_tempQimm213);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQimm213[mz1][mz2]);
		}
		free(tempQimm213[mz1]);
	}
	free(tempQimm213);
	
	free(_lin_tempQimm221);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQimm221[mz1][mz2]);
		}
		free(tempQimm221[mz1]);
	}
	free(tempQimm221);
	
	free(_lin_tempQimm222);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQimm222[mz1][mz2]);
		}
		free(tempQimm222[mz1]);
	}
	free(tempQimm222);
	
	free(_lin_tempQimm223);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQimm223[mz1][mz2]);
		}
		free(tempQimm223[mz1]);
	}
	free(tempQimm223);
	
	free(_lin_tempQimk011);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQimk011[mz1][mz2]);
		}
		free(tempQimk011[mz1]);
	}
	free(tempQimk011);
	
	free(_lin_tempQimk012);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQimk012[mz1][mz2]);
		}
		free(tempQimk012[mz1]);
	}
	free(tempQimk012);
	
	free(_lin_tempQimk013);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQimk013[mz1][mz2]);
		}
		free(tempQimk013[mz1]);
	}
	free(tempQimk013);
	
	free(_lin_tempQimk014);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQimk014[mz1][mz2]);
		}
		free(tempQimk014[mz1]);
	}
	free(tempQimk014);
	
	free(_lin_tempQimk111);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQimk111[mz1][mz2]);
		}
		free(tempQimk111[mz1]);
	}
	free(tempQimk111);
	
	free(_lin_tempQimk112);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQimk112[mz1][mz2]);
		}
		free(tempQimk112[mz1]);
	}
	free(tempQimk112);
	
	free(_lin_tempQimk113);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQimk113[mz1][mz2]);
		}
		free(tempQimk113[mz1]);
	}
	free(tempQimk113);
	
	free(_lin_tempQimk114);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQimk114[mz1][mz2]);
		}
		free(tempQimk114[mz1]);
	}
	free(tempQimk114);
	
	free(_lin_tempQimk201);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQimk201[mz1][mz2]);
		}
		free(tempQimk201[mz1]);
	}
	free(tempQimk201);
	
	free(_lin_tempQimk202);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQimk202[mz1][mz2]);
		}
		free(tempQimk202[mz1]);
	}
	free(tempQimk202);
	
	free(_lin_tempQimk203);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQimk203[mz1][mz2]);
		}
		free(tempQimk203[mz1]);
	}
	free(tempQimk203);
	
	free(_lin_tempQimk204);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQimk204[mz1][mz2]);
		}
		free(tempQimk204[mz1]);
	}
	free(tempQimk204);
	
	free(_lin_tempQimk211);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQimk211[mz1][mz2]);
		}
		free(tempQimk211[mz1]);
	}
	free(tempQimk211);
	
	free(_lin_tempQimk212);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQimk212[mz1][mz2]);
		}
		free(tempQimk212[mz1]);
	}
	free(tempQimk212);
	
	free(_lin_tempQimk213);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQimk213[mz1][mz2]);
		}
		free(tempQimk213[mz1]);
	}
	free(tempQimk213);
	
	free(_lin_tempQimk214);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQimk214[mz1][mz2]);
		}
		free(tempQimk214[mz1]);
	}
	free(tempQimk214);
	
	free(_lin_tempQikm101);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQikm101[mz1][mz2]);
		}
		free(tempQikm101[mz1]);
	}
	free(tempQikm101);
	
	free(_lin_tempQikm102);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQikm102[mz1][mz2]);
		}
		free(tempQikm102[mz1]);
	}
	free(tempQikm102);
	
	free(_lin_tempQikm103);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQikm103[mz1][mz2]);
		}
		free(tempQikm103[mz1]);
	}
	free(tempQikm103);
	
	free(_lin_tempQikm104);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQikm104[mz1][mz2]);
		}
		free(tempQikm104[mz1]);
	}
	free(tempQikm104);
	
	free(_lin_tempQikm111);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQikm111[mz1][mz2]);
		}
		free(tempQikm111[mz1]);
	}
	free(tempQikm111);
	
	free(_lin_tempQikm112);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQikm112[mz1][mz2]);
		}
		free(tempQikm112[mz1]);
	}
	free(tempQikm112);
	
	free(_lin_tempQikm113);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQikm113[mz1][mz2]);
		}
		free(tempQikm113[mz1]);
	}
	free(tempQikm113);
	
	free(_lin_tempQikm114);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQikm114[mz1][mz2]);
		}
		free(tempQikm114[mz1]);
	}
	free(tempQikm114);
	
	free(_lin_tempQikm021);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQikm021[mz1][mz2]);
		}
		free(tempQikm021[mz1]);
	}
	free(tempQikm021);
	
	free(_lin_tempQikm022);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQikm022[mz1][mz2]);
		}
		free(tempQikm022[mz1]);
	}
	free(tempQikm022);
	
	free(_lin_tempQikm023);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQikm023[mz1][mz2]);
		}
		free(tempQikm023[mz1]);
	}
	free(tempQikm023);
	
	free(_lin_tempQikm024);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQikm024[mz1][mz2]);
		}
		free(tempQikm024[mz1]);
	}
	free(tempQikm024);
	
	free(_lin_tempQikm121);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQikm121[mz1][mz2]);
		}
		free(tempQikm121[mz1]);
	}
	free(tempQikm121);
	
	free(_lin_tempQikm122);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQikm122[mz1][mz2]);
		}
		free(tempQikm122[mz1]);
	}
	free(tempQikm122);
	
	free(_lin_tempQikm123);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQikm123[mz1][mz2]);
		}
		free(tempQikm123[mz1]);
	}
	free(tempQikm123);
	
	free(_lin_tempQikm124);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQikm124[mz1][mz2]);
		}
		free(tempQikm124[mz1]);
	}
	free(tempQikm124);
	
	free(_lin_tempQikk011);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQikk011[mz1][mz2]);
		}
		free(tempQikk011[mz1]);
	}
	free(tempQikk011);
	
	free(_lin_tempQikk012);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQikk012[mz1][mz2]);
		}
		free(tempQikk012[mz1]);
	}
	free(tempQikk012);
	
	free(_lin_tempQikk013);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQikk013[mz1][mz2]);
		}
		free(tempQikk013[mz1]);
	}
	free(tempQikk013);
	
	free(_lin_tempQikk014);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQikk014[mz1][mz2]);
		}
		free(tempQikk014[mz1]);
	}
	free(tempQikk014);
	
	free(_lin_tempQikk015);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQikk015[mz1][mz2]);
		}
		free(tempQikk015[mz1]);
	}
	free(tempQikk015);
	
	free(_lin_tempQikk101);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQikk101[mz1][mz2]);
		}
		free(tempQikk101[mz1]);
	}
	free(tempQikk101);
	
	free(_lin_tempQikk102);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQikk102[mz1][mz2]);
		}
		free(tempQikk102[mz1]);
	}
	free(tempQikk102);
	
	free(_lin_tempQikk103);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQikk103[mz1][mz2]);
		}
		free(tempQikk103[mz1]);
	}
	free(tempQikk103);
	
	free(_lin_tempQikk104);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQikk104[mz1][mz2]);
		}
		free(tempQikk104[mz1]);
	}
	free(tempQikk104);
	
	free(_lin_tempQikk105);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQikk105[mz1][mz2]);
		}
		free(tempQikk105[mz1]);
	}
	free(tempQikk105);
	
	free(_lin_tempQikk111);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQikk111[mz1][mz2]);
		}
		free(tempQikk111[mz1]);
	}
	free(tempQikk111);
	
	free(_lin_tempQikk112);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQikk112[mz1][mz2]);
		}
		free(tempQikk112[mz1]);
	}
	free(tempQikk112);
	
	free(_lin_tempQikk113);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQikk113[mz1][mz2]);
		}
		free(tempQikk113[mz1]);
	}
	free(tempQikk113);
	
	free(_lin_tempQikk114);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQikk114[mz1][mz2]);
		}
		free(tempQikk114[mz1]);
	}
	free(tempQikk114);
	
	free(_lin_tempQikk115);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQikk115[mz1][mz2]);
		}
		free(tempQikk115[mz1]);
	}
	free(tempQikk115);
	
	free(_lin_tempQiann011);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann011[mz1][mz2]);
		}
		free(tempQiann011[mz1]);
	}
	free(tempQiann011);
	
	free(_lin_tempQiann012);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann012[mz1][mz2]);
		}
		free(tempQiann012[mz1]);
	}
	free(tempQiann012);
	
	free(_lin_tempQiann013);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann013[mz1][mz2]);
		}
		free(tempQiann013[mz1]);
	}
	free(tempQiann013);
	
	free(_lin_tempQiann014);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann014[mz1][mz2]);
		}
		free(tempQiann014[mz1]);
	}
	free(tempQiann014);
	
	free(_lin_tempQiann015);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann015[mz1][mz2]);
		}
		free(tempQiann015[mz1]);
	}
	free(tempQiann015);
	
	free(_lin_tempQiann016);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann016[mz1][mz2]);
		}
		free(tempQiann016[mz1]);
	}
	free(tempQiann016);
	
	free(_lin_tempQiann021);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann021[mz1][mz2]);
		}
		free(tempQiann021[mz1]);
	}
	free(tempQiann021);
	
	free(_lin_tempQiann022);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann022[mz1][mz2]);
		}
		free(tempQiann022[mz1]);
	}
	free(tempQiann022);
	
	free(_lin_tempQiann023);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann023[mz1][mz2]);
		}
		free(tempQiann023[mz1]);
	}
	free(tempQiann023);
	
	free(_lin_tempQiann024);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann024[mz1][mz2]);
		}
		free(tempQiann024[mz1]);
	}
	free(tempQiann024);
	
	free(_lin_tempQiann025);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann025[mz1][mz2]);
		}
		free(tempQiann025[mz1]);
	}
	free(tempQiann025);
	
	free(_lin_tempQiann026);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann026[mz1][mz2]);
		}
		free(tempQiann026[mz1]);
	}
	free(tempQiann026);
	
	free(_lin_tempQiann101);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann101[mz1][mz2]);
		}
		free(tempQiann101[mz1]);
	}
	free(tempQiann101);
	
	free(_lin_tempQiann102);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann102[mz1][mz2]);
		}
		free(tempQiann102[mz1]);
	}
	free(tempQiann102);
	
	free(_lin_tempQiann103);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann103[mz1][mz2]);
		}
		free(tempQiann103[mz1]);
	}
	free(tempQiann103);
	
	free(_lin_tempQiann104);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann104[mz1][mz2]);
		}
		free(tempQiann104[mz1]);
	}
	free(tempQiann104);
	
	free(_lin_tempQiann105);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann105[mz1][mz2]);
		}
		free(tempQiann105[mz1]);
	}
	free(tempQiann105);
	
	free(_lin_tempQiann106);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann106[mz1][mz2]);
		}
		free(tempQiann106[mz1]);
	}
	free(tempQiann106);
	
	free(_lin_tempQiann111);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann111[mz1][mz2]);
		}
		free(tempQiann111[mz1]);
	}
	free(tempQiann111);
	
	free(_lin_tempQiann112);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann112[mz1][mz2]);
		}
		free(tempQiann112[mz1]);
	}
	free(tempQiann112);
	
	free(_lin_tempQiann113);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann113[mz1][mz2]);
		}
		free(tempQiann113[mz1]);
	}
	free(tempQiann113);
	
	free(_lin_tempQiann114);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann114[mz1][mz2]);
		}
		free(tempQiann114[mz1]);
	}
	free(tempQiann114);
	
	free(_lin_tempQiann115);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann115[mz1][mz2]);
		}
		free(tempQiann115[mz1]);
	}
	free(tempQiann115);
	
	free(_lin_tempQiann116);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann116[mz1][mz2]);
		}
		free(tempQiann116[mz1]);
	}
	free(tempQiann116);
	
	free(_lin_tempQiann121);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann121[mz1][mz2]);
		}
		free(tempQiann121[mz1]);
	}
	free(tempQiann121);
	
	free(_lin_tempQiann122);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann122[mz1][mz2]);
		}
		free(tempQiann122[mz1]);
	}
	free(tempQiann122);
	
	free(_lin_tempQiann123);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann123[mz1][mz2]);
		}
		free(tempQiann123[mz1]);
	}
	free(tempQiann123);
	
	free(_lin_tempQiann124);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann124[mz1][mz2]);
		}
		free(tempQiann124[mz1]);
	}
	free(tempQiann124);
	
	free(_lin_tempQiann125);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann125[mz1][mz2]);
		}
		free(tempQiann125[mz1]);
	}
	free(tempQiann125);
	
	free(_lin_tempQiann126);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann126[mz1][mz2]);
		}
		free(tempQiann126[mz1]);
	}
	free(tempQiann126);
	
	free(_lin_tempQiann201);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann201[mz1][mz2]);
		}
		free(tempQiann201[mz1]);
	}
	free(tempQiann201);
	
	free(_lin_tempQiann202);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann202[mz1][mz2]);
		}
		free(tempQiann202[mz1]);
	}
	free(tempQiann202);
	
	free(_lin_tempQiann203);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann203[mz1][mz2]);
		}
		free(tempQiann203[mz1]);
	}
	free(tempQiann203);
	
	free(_lin_tempQiann204);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann204[mz1][mz2]);
		}
		free(tempQiann204[mz1]);
	}
	free(tempQiann204);
	
	free(_lin_tempQiann205);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann205[mz1][mz2]);
		}
		free(tempQiann205[mz1]);
	}
	free(tempQiann205);
	
	free(_lin_tempQiann206);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann206[mz1][mz2]);
		}
		free(tempQiann206[mz1]);
	}
	free(tempQiann206);
	
	free(_lin_tempQiann211);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann211[mz1][mz2]);
		}
		free(tempQiann211[mz1]);
	}
	free(tempQiann211);
	
	free(_lin_tempQiann212);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann212[mz1][mz2]);
		}
		free(tempQiann212[mz1]);
	}
	free(tempQiann212);
	
	free(_lin_tempQiann213);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann213[mz1][mz2]);
		}
		free(tempQiann213[mz1]);
	}
	free(tempQiann213);
	
	free(_lin_tempQiann214);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann214[mz1][mz2]);
		}
		free(tempQiann214[mz1]);
	}
	free(tempQiann214);
	
	free(_lin_tempQiann215);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann215[mz1][mz2]);
		}
		free(tempQiann215[mz1]);
	}
	free(tempQiann215);
	
	free(_lin_tempQiann216);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann216[mz1][mz2]);
		}
		free(tempQiann216[mz1]);
	}
	free(tempQiann216);
	
	free(_lin_tempQiann221);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann221[mz1][mz2]);
		}
		free(tempQiann221[mz1]);
	}
	free(tempQiann221);
	
	free(_lin_tempQiann222);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann222[mz1][mz2]);
		}
		free(tempQiann222[mz1]);
	}
	free(tempQiann222);
	
	free(_lin_tempQiann223);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann223[mz1][mz2]);
		}
		free(tempQiann223[mz1]);
	}
	free(tempQiann223);
	
	free(_lin_tempQiann224);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann224[mz1][mz2]);
		}
		free(tempQiann224[mz1]);
	}
	free(tempQiann224);
	
	free(_lin_tempQiann225);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann225[mz1][mz2]);
		}
		free(tempQiann225[mz1]);
	}
	free(tempQiann225);
	
	free(_lin_tempQiann226);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiann226[mz1][mz2]);
		}
		free(tempQiann226[mz1]);
	}
	free(tempQiann226);
	
	free(_lin_tempQiand011);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiand011[mz1][mz2]);
		}
		free(tempQiand011[mz1]);
	}
	free(tempQiand011);
	
	free(_lin_tempQiand012);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiand012[mz1][mz2]);
		}
		free(tempQiand012[mz1]);
	}
	free(tempQiand012);
	
	free(_lin_tempQiand013);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiand013[mz1][mz2]);
		}
		free(tempQiand013[mz1]);
	}
	free(tempQiand013);
	
	free(_lin_tempQiand014);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiand014[mz1][mz2]);
		}
		free(tempQiand014[mz1]);
	}
	free(tempQiand014);
	
	free(_lin_tempQiand015);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiand015[mz1][mz2]);
		}
		free(tempQiand015[mz1]);
	}
	free(tempQiand015);
	
	free(_lin_tempQiand101);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiand101[mz1][mz2]);
		}
		free(tempQiand101[mz1]);
	}
	free(tempQiand101);
	
	free(_lin_tempQiand102);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiand102[mz1][mz2]);
		}
		free(tempQiand102[mz1]);
	}
	free(tempQiand102);
	
	free(_lin_tempQiand103);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiand103[mz1][mz2]);
		}
		free(tempQiand103[mz1]);
	}
	free(tempQiand103);
	
	free(_lin_tempQiand104);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiand104[mz1][mz2]);
		}
		free(tempQiand104[mz1]);
	}
	free(tempQiand104);
	
	free(_lin_tempQiand105);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiand105[mz1][mz2]);
		}
		free(tempQiand105[mz1]);
	}
	free(tempQiand105);
	
	free(_lin_tempQiand111);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiand111[mz1][mz2]);
		}
		free(tempQiand111[mz1]);
	}
	free(tempQiand111);
	
	free(_lin_tempQiand112);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiand112[mz1][mz2]);
		}
		free(tempQiand112[mz1]);
	}
	free(tempQiand112);
	
	free(_lin_tempQiand113);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiand113[mz1][mz2]);
		}
		free(tempQiand113[mz1]);
	}
	free(tempQiand113);
	
	free(_lin_tempQiand114);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiand114[mz1][mz2]);
		}
		free(tempQiand114[mz1]);
	}
	free(tempQiand114);
	
	free(_lin_tempQiand115);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiand115[mz1][mz2]);
		}
		free(tempQiand115[mz1]);
	}
	free(tempQiand115);
	
	free(_lin_tempQiand201);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiand201[mz1][mz2]);
		}
		free(tempQiand201[mz1]);
	}
	free(tempQiand201);
	
	free(_lin_tempQiand202);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiand202[mz1][mz2]);
		}
		free(tempQiand202[mz1]);
	}
	free(tempQiand202);
	
	free(_lin_tempQiand203);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiand203[mz1][mz2]);
		}
		free(tempQiand203[mz1]);
	}
	free(tempQiand203);
	
	free(_lin_tempQiand204);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiand204[mz1][mz2]);
		}
		free(tempQiand204[mz1]);
	}
	free(tempQiand204);
	
	free(_lin_tempQiand205);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiand205[mz1][mz2]);
		}
		free(tempQiand205[mz1]);
	}
	free(tempQiand205);
	
	free(_lin_tempQiand211);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiand211[mz1][mz2]);
		}
		free(tempQiand211[mz1]);
	}
	free(tempQiand211);
	
	free(_lin_tempQiand212);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiand212[mz1][mz2]);
		}
		free(tempQiand212[mz1]);
	}
	free(tempQiand212);
	
	free(_lin_tempQiand213);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiand213[mz1][mz2]);
		}
		free(tempQiand213[mz1]);
	}
	free(tempQiand213);
	
	free(_lin_tempQiand214);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiand214[mz1][mz2]);
		}
		free(tempQiand214[mz1]);
	}
	free(tempQiand214);
	
	free(_lin_tempQiand215);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiand215[mz1][mz2]);
		}
		free(tempQiand215[mz1]);
	}
	free(tempQiand215);
	
	free(_lin_tempQiadn011);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadn011[mz1][mz2]);
		}
		free(tempQiadn011[mz1]);
	}
	free(tempQiadn011);
	
	free(_lin_tempQiadn012);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadn012[mz1][mz2]);
		}
		free(tempQiadn012[mz1]);
	}
	free(tempQiadn012);
	
	free(_lin_tempQiadn013);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadn013[mz1][mz2]);
		}
		free(tempQiadn013[mz1]);
	}
	free(tempQiadn013);
	
	free(_lin_tempQiadn014);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadn014[mz1][mz2]);
		}
		free(tempQiadn014[mz1]);
	}
	free(tempQiadn014);
	
	free(_lin_tempQiadn015);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadn015[mz1][mz2]);
		}
		free(tempQiadn015[mz1]);
	}
	free(tempQiadn015);
	
	free(_lin_tempQiadn021);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadn021[mz1][mz2]);
		}
		free(tempQiadn021[mz1]);
	}
	free(tempQiadn021);
	
	free(_lin_tempQiadn022);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadn022[mz1][mz2]);
		}
		free(tempQiadn022[mz1]);
	}
	free(tempQiadn022);
	
	free(_lin_tempQiadn023);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadn023[mz1][mz2]);
		}
		free(tempQiadn023[mz1]);
	}
	free(tempQiadn023);
	
	free(_lin_tempQiadn024);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadn024[mz1][mz2]);
		}
		free(tempQiadn024[mz1]);
	}
	free(tempQiadn024);
	
	free(_lin_tempQiadn025);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadn025[mz1][mz2]);
		}
		free(tempQiadn025[mz1]);
	}
	free(tempQiadn025);
	
	free(_lin_tempQiadn101);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadn101[mz1][mz2]);
		}
		free(tempQiadn101[mz1]);
	}
	free(tempQiadn101);
	
	free(_lin_tempQiadn102);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadn102[mz1][mz2]);
		}
		free(tempQiadn102[mz1]);
	}
	free(tempQiadn102);
	
	free(_lin_tempQiadn103);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadn103[mz1][mz2]);
		}
		free(tempQiadn103[mz1]);
	}
	free(tempQiadn103);
	
	free(_lin_tempQiadn104);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadn104[mz1][mz2]);
		}
		free(tempQiadn104[mz1]);
	}
	free(tempQiadn104);
	
	free(_lin_tempQiadn105);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadn105[mz1][mz2]);
		}
		free(tempQiadn105[mz1]);
	}
	free(tempQiadn105);
	
	free(_lin_tempQiadn111);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadn111[mz1][mz2]);
		}
		free(tempQiadn111[mz1]);
	}
	free(tempQiadn111);
	
	free(_lin_tempQiadn112);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadn112[mz1][mz2]);
		}
		free(tempQiadn112[mz1]);
	}
	free(tempQiadn112);
	
	free(_lin_tempQiadn113);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadn113[mz1][mz2]);
		}
		free(tempQiadn113[mz1]);
	}
	free(tempQiadn113);
	
	free(_lin_tempQiadn114);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadn114[mz1][mz2]);
		}
		free(tempQiadn114[mz1]);
	}
	free(tempQiadn114);
	
	free(_lin_tempQiadn115);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadn115[mz1][mz2]);
		}
		free(tempQiadn115[mz1]);
	}
	free(tempQiadn115);
	
	free(_lin_tempQiadn121);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadn121[mz1][mz2]);
		}
		free(tempQiadn121[mz1]);
	}
	free(tempQiadn121);
	
	free(_lin_tempQiadn122);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadn122[mz1][mz2]);
		}
		free(tempQiadn122[mz1]);
	}
	free(tempQiadn122);
	
	free(_lin_tempQiadn123);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadn123[mz1][mz2]);
		}
		free(tempQiadn123[mz1]);
	}
	free(tempQiadn123);
	
	free(_lin_tempQiadn124);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadn124[mz1][mz2]);
		}
		free(tempQiadn124[mz1]);
	}
	free(tempQiadn124);
	
	free(_lin_tempQiadn125);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadn125[mz1][mz2]);
		}
		free(tempQiadn125[mz1]);
	}
	free(tempQiadn125);
	
	free(_lin_tempQiadd011);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadd011[mz1][mz2]);
		}
		free(tempQiadd011[mz1]);
	}
	free(tempQiadd011);
	
	free(_lin_tempQiadd012);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadd012[mz1][mz2]);
		}
		free(tempQiadd012[mz1]);
	}
	free(tempQiadd012);
	
	free(_lin_tempQiadd013);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadd013[mz1][mz2]);
		}
		free(tempQiadd013[mz1]);
	}
	free(tempQiadd013);
	
	free(_lin_tempQiadd014);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadd014[mz1][mz2]);
		}
		free(tempQiadd014[mz1]);
	}
	free(tempQiadd014);
	
	free(_lin_tempQiadd015);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadd015[mz1][mz2]);
		}
		free(tempQiadd015[mz1]);
	}
	free(tempQiadd015);
	
	free(_lin_tempQiadd101);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadd101[mz1][mz2]);
		}
		free(tempQiadd101[mz1]);
	}
	free(tempQiadd101);
	
	free(_lin_tempQiadd102);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadd102[mz1][mz2]);
		}
		free(tempQiadd102[mz1]);
	}
	free(tempQiadd102);
	
	free(_lin_tempQiadd103);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadd103[mz1][mz2]);
		}
		free(tempQiadd103[mz1]);
	}
	free(tempQiadd103);
	
	free(_lin_tempQiadd104);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadd104[mz1][mz2]);
		}
		free(tempQiadd104[mz1]);
	}
	free(tempQiadd104);
	
	free(_lin_tempQiadd105);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadd105[mz1][mz2]);
		}
		free(tempQiadd105[mz1]);
	}
	free(tempQiadd105);
	
	free(_lin_tempQiadd111);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadd111[mz1][mz2]);
		}
		free(tempQiadd111[mz1]);
	}
	free(tempQiadd111);
	
	free(_lin_tempQiadd112);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadd112[mz1][mz2]);
		}
		free(tempQiadd112[mz1]);
	}
	free(tempQiadd112);
	
	free(_lin_tempQiadd113);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadd113[mz1][mz2]);
		}
		free(tempQiadd113[mz1]);
	}
	free(tempQiadd113);
	
	free(_lin_tempQiadd114);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadd114[mz1][mz2]);
		}
		free(tempQiadd114[mz1]);
	}
	free(tempQiadd114);
	
	free(_lin_tempQiadd115);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiadd115[mz1][mz2]);
		}
		free(tempQiadd115[mz1]);
	}
	free(tempQiadd115);
	
	free(_lin_tempQir011);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQir011[mz1][mz2]);
		}
		free(tempQir011[mz1]);
	}
	free(tempQir011);
	
	free(_lin_tempQir012);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQir012[mz1][mz2]);
		}
		free(tempQir012[mz1]);
	}
	free(tempQir012);
	
	free(_lin_tempQir101);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQir101[mz1][mz2]);
		}
		free(tempQir101[mz1]);
	}
	free(tempQir101);
	
	free(_lin_tempQir102);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQir102[mz1][mz2]);
		}
		free(tempQir102[mz1]);
	}
	free(tempQir102);
	
	free(_lin_tempQir111);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQir111[mz1][mz2]);
		}
		free(tempQir111[mz1]);
	}
	free(tempQir111);
	
	free(_lin_tempQir112);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQir112[mz1][mz2]);
		}
		free(tempQir112[mz1]);
	}
	free(tempQir112);
	
	free(_lin_tempQiar011);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiar011[mz1][mz2]);
		}
		free(tempQiar011[mz1]);
	}
	free(tempQiar011);
	
	free(_lin_tempQiar012);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiar012[mz1][mz2]);
		}
		free(tempQiar012[mz1]);
	}
	free(tempQiar012);
	
	free(_lin_tempQiar013);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiar013[mz1][mz2]);
		}
		free(tempQiar013[mz1]);
	}
	free(tempQiar013);
	
	free(_lin_tempQiar101);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiar101[mz1][mz2]);
		}
		free(tempQiar101[mz1]);
	}
	free(tempQiar101);
	
	free(_lin_tempQiar102);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiar102[mz1][mz2]);
		}
		free(tempQiar102[mz1]);
	}
	free(tempQiar102);
	
	free(_lin_tempQiar103);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiar103[mz1][mz2]);
		}
		free(tempQiar103[mz1]);
	}
	free(tempQiar103);
	
	free(_lin_tempQiar111);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiar111[mz1][mz2]);
		}
		free(tempQiar111[mz1]);
	}
	free(tempQiar111);
	
	free(_lin_tempQiar112);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiar112[mz1][mz2]);
		}
		free(tempQiar112[mz1]);
	}
	free(tempQiar112);
	
	free(_lin_tempQiar113);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQiar113[mz1][mz2]);
		}
		free(tempQiar113[mz1]);
	}
	free(tempQiar113);
	
	free(_lin_tempQilr011);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQilr011[mz1][mz2]);
		}
		free(tempQilr011[mz1]);
	}
	free(tempQilr011);
	
	free(_lin_tempQilr012);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQilr012[mz1][mz2]);
		}
		free(tempQilr012[mz1]);
	}
	free(tempQilr012);
	
	free(_lin_tempQilr101);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQilr101[mz1][mz2]);
		}
		free(tempQilr101[mz1]);
	}
	free(tempQilr101);
	
	free(_lin_tempQilr102);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQilr102[mz1][mz2]);
		}
		free(tempQilr102[mz1]);
	}
	free(tempQilr102);
	
	free(_lin_tempQilr111);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQilr111[mz1][mz2]);
		}
		free(tempQilr111[mz1]);
	}
	free(tempQilr111);
	
	free(_lin_tempQilr112);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQilr112[mz1][mz2]);
		}
		free(tempQilr112[mz1]);
	}
	free(tempQilr112);
	
	free(_lin_tempQi1);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQi1[mz1][mz2]);
		}
		free(tempQi1[mz1]);
	}
	free(tempQi1);
	
	free(_lin_tempQi2);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQi2[mz1][mz2]);
		}
		free(tempQi2[mz1]);
	}
	free(tempQi2);
	
	free(_lin_tempQia1);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQia1[mz1][mz2]);
		}
		free(tempQia1[mz1]);
	}
	free(tempQia1);
	
	free(_lin_tempQia2);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQia2[mz1][mz2]);
		}
		free(tempQia2[mz1]);
	}
	free(tempQia2);
	
	free(_lin_tempQia3);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQia3[mz1][mz2]);
		}
		free(tempQia3[mz1]);
	}
	free(tempQia3);
	
	free(_lin_tempQia4);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQia4[mz1][mz2]);
		}
		free(tempQia4[mz1]);
	}
	free(tempQia4);
	
	free(_lin_tempQia5);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQia5[mz1][mz2]);
		}
		free(tempQia5[mz1]);
	}
	free(tempQia5);
	
	free(_lin_tempQia6);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQia6[mz1][mz2]);
		}
		free(tempQia6[mz1]);
	}
	free(tempQia6);
	
	free(_lin_tempQib001);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQib001[mz1][mz2]);
		}
		free(tempQib001[mz1]);
	}
	free(tempQib001);
	
	free(_lin_tempQib002);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQib002[mz1][mz2]);
		}
		free(tempQib002[mz1]);
	}
	free(tempQib002);
	
	free(_lin_tempQib011);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQib011[mz1][mz2]);
		}
		free(tempQib011[mz1]);
	}
	free(tempQib011);
	
	free(_lin_tempQib012);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQib012[mz1][mz2]);
		}
		free(tempQib012[mz1]);
	}
	free(tempQib012);
	
	free(_lin_tempQib101);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQib101[mz1][mz2]);
		}
		free(tempQib101[mz1]);
	}
	free(tempQib101);
	
	free(_lin_tempQib102);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQib102[mz1][mz2]);
		}
		free(tempQib102[mz1]);
	}
	free(tempQib102);
	
	free(_lin_tempQib111);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQib111[mz1][mz2]);
		}
		free(tempQib111[mz1]);
	}
	free(tempQib111);
	
	free(_lin_tempQib112);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQib112[mz1][mz2]);
		}
		free(tempQib112[mz1]);
	}
	free(tempQib112);
	
	free(_lin_tempQinn011);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQinn011[mz1][mz2]);
		}
		free(tempQinn011[mz1]);
	}
	free(tempQinn011);
	
	free(_lin_tempQinn021);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQinn021[mz1][mz2]);
		}
		free(tempQinn021[mz1]);
	}
	free(tempQinn021);
	
	free(_lin_tempQinn101);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQinn101[mz1][mz2]);
		}
		free(tempQinn101[mz1]);
	}
	free(tempQinn101);
	
	free(_lin_tempQinn111);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQinn111[mz1][mz2]);
		}
		free(tempQinn111[mz1]);
	}
	free(tempQinn111);
	
	free(_lin_tempQinn121);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQinn121[mz1][mz2]);
		}
		free(tempQinn121[mz1]);
	}
	free(tempQinn121);
	
	free(_lin_tempQinn201);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQinn201[mz1][mz2]);
		}
		free(tempQinn201[mz1]);
	}
	free(tempQinn201);
	
	free(_lin_tempQinn211);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQinn211[mz1][mz2]);
		}
		free(tempQinn211[mz1]);
	}
	free(tempQinn211);
	
	free(_lin_tempQinn221);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQinn221[mz1][mz2]);
		}
		free(tempQinn221[mz1]);
	}
	free(tempQinn221);
	
	free(_lin_tempQidd011);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQidd011[mz1][mz2]);
		}
		free(tempQidd011[mz1]);
	}
	free(tempQidd011);
	
	free(_lin_tempQidd101);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQidd101[mz1][mz2]);
		}
		free(tempQidd101[mz1]);
	}
	free(tempQidd101);
	
	free(_lin_tempQidd111);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQidd111[mz1][mz2]);
		}
		free(tempQidd111[mz1]);
	}
	free(tempQidd111);
	
	free(_lin_tempQidd012);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQidd012[mz1][mz2]);
		}
		free(tempQidd012[mz1]);
	}
	free(tempQidd012);
	
	free(_lin_tempQidd102);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQidd102[mz1][mz2]);
		}
		free(tempQidd102[mz1]);
	}
	free(tempQidd102);
	
	free(_lin_tempQidd112);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(tempQidd112[mz1][mz2]);
		}
		free(tempQidd112[mz1]);
	}
	free(tempQidd112);
	
	free(_flag_seq1);
	free(_lin__flag_Q00);
	free(_flag_Q00);
	
	free(_lin__flag_Q10);
	free(_flag_Q10);
	
	free(_lin__flag_Qi);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qi[mz1][mz2]);
		}
		free(_flag_Qi[mz1]);
	}
	free(_flag_Qi);
	
	free(_lin__flag_Qiy);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qiy[mz1][mz2]);
		}
		free(_flag_Qiy[mz1]);
	}
	free(_flag_Qiy);
	
	free(_lin__flag_Qixm00);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qixm00[mz1][mz2]);
		}
		free(_flag_Qixm00[mz1]);
	}
	free(_flag_Qixm00);
	
	free(_lin__flag_Qixm01);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qixm01[mz1][mz2]);
		}
		free(_flag_Qixm01[mz1]);
	}
	free(_flag_Qixm01);
	
	free(_lin__flag_Qixm02);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qixm02[mz1][mz2]);
		}
		free(_flag_Qixm02[mz1]);
	}
	free(_flag_Qixm02);
	
	free(_lin__flag_Qixm10);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qixm10[mz1][mz2]);
		}
		free(_flag_Qixm10[mz1]);
	}
	free(_flag_Qixm10);
	
	free(_lin__flag_Qixm11);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qixm11[mz1][mz2]);
		}
		free(_flag_Qixm11[mz1]);
	}
	free(_flag_Qixm11);
	
	free(_lin__flag_Qixm12);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qixm12[mz1][mz2]);
		}
		free(_flag_Qixm12[mz1]);
	}
	free(_flag_Qixm12);
	
	free(_lin__flag_Qixk00);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qixk00[mz1][mz2]);
		}
		free(_flag_Qixk00[mz1]);
	}
	free(_flag_Qixk00);
	
	free(_lin__flag_Qixk01);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qixk01[mz1][mz2]);
		}
		free(_flag_Qixk01[mz1]);
	}
	free(_flag_Qixk01);
	
	free(_lin__flag_Qixk10);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qixk10[mz1][mz2]);
		}
		free(_flag_Qixk10[mz1]);
	}
	free(_flag_Qixk10);
	
	free(_lin__flag_Qixk11);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qixk11[mz1][mz2]);
		}
		free(_flag_Qixk11[mz1]);
	}
	free(_flag_Qixk11);
	
	free(_lin__flag_Qimm02);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qimm02[mz1][mz2]);
		}
		free(_flag_Qimm02[mz1]);
	}
	free(_flag_Qimm02);
	
	free(_lin__flag_Qimm12);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qimm12[mz1][mz2]);
		}
		free(_flag_Qimm12[mz1]);
	}
	free(_flag_Qimm12);
	
	free(_lin__flag_Qimm20);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qimm20[mz1][mz2]);
		}
		free(_flag_Qimm20[mz1]);
	}
	free(_flag_Qimm20);
	
	free(_lin__flag_Qimm21);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qimm21[mz1][mz2]);
		}
		free(_flag_Qimm21[mz1]);
	}
	free(_flag_Qimm21);
	
	free(_lin__flag_Qimm22);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qimm22[mz1][mz2]);
		}
		free(_flag_Qimm22[mz1]);
	}
	free(_flag_Qimm22);
	
	free(_lin__flag_Qimk01);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qimk01[mz1][mz2]);
		}
		free(_flag_Qimk01[mz1]);
	}
	free(_flag_Qimk01);
	
	free(_lin__flag_Qimk11);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qimk11[mz1][mz2]);
		}
		free(_flag_Qimk11[mz1]);
	}
	free(_flag_Qimk11);
	
	free(_lin__flag_Qimk20);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qimk20[mz1][mz2]);
		}
		free(_flag_Qimk20[mz1]);
	}
	free(_flag_Qimk20);
	
	free(_lin__flag_Qimk21);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qimk21[mz1][mz2]);
		}
		free(_flag_Qimk21[mz1]);
	}
	free(_flag_Qimk21);
	
	free(_lin__flag_Qikm10);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qikm10[mz1][mz2]);
		}
		free(_flag_Qikm10[mz1]);
	}
	free(_flag_Qikm10);
	
	free(_lin__flag_Qikm11);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qikm11[mz1][mz2]);
		}
		free(_flag_Qikm11[mz1]);
	}
	free(_flag_Qikm11);
	
	free(_lin__flag_Qikm02);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qikm02[mz1][mz2]);
		}
		free(_flag_Qikm02[mz1]);
	}
	free(_flag_Qikm02);
	
	free(_lin__flag_Qikm12);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qikm12[mz1][mz2]);
		}
		free(_flag_Qikm12[mz1]);
	}
	free(_flag_Qikm12);
	
	free(_lin__flag_Qikk01);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qikk01[mz1][mz2]);
		}
		free(_flag_Qikk01[mz1]);
	}
	free(_flag_Qikk01);
	
	free(_lin__flag_Qikk10);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qikk10[mz1][mz2]);
		}
		free(_flag_Qikk10[mz1]);
	}
	free(_flag_Qikk10);
	
	free(_lin__flag_Qikk11);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qikk11[mz1][mz2]);
		}
		free(_flag_Qikk11[mz1]);
	}
	free(_flag_Qikk11);
	
	free(_lin__flag_Qiann01);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qiann01[mz1][mz2]);
		}
		free(_flag_Qiann01[mz1]);
	}
	free(_flag_Qiann01);
	
	free(_lin__flag_Qiann02);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qiann02[mz1][mz2]);
		}
		free(_flag_Qiann02[mz1]);
	}
	free(_flag_Qiann02);
	
	free(_lin__flag_Qiann10);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qiann10[mz1][mz2]);
		}
		free(_flag_Qiann10[mz1]);
	}
	free(_flag_Qiann10);
	
	free(_lin__flag_Qiann11);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qiann11[mz1][mz2]);
		}
		free(_flag_Qiann11[mz1]);
	}
	free(_flag_Qiann11);
	
	free(_lin__flag_Qiann12);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qiann12[mz1][mz2]);
		}
		free(_flag_Qiann12[mz1]);
	}
	free(_flag_Qiann12);
	
	free(_lin__flag_Qiann20);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qiann20[mz1][mz2]);
		}
		free(_flag_Qiann20[mz1]);
	}
	free(_flag_Qiann20);
	
	free(_lin__flag_Qiann21);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qiann21[mz1][mz2]);
		}
		free(_flag_Qiann21[mz1]);
	}
	free(_flag_Qiann21);
	
	free(_lin__flag_Qiann22);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qiann22[mz1][mz2]);
		}
		free(_flag_Qiann22[mz1]);
	}
	free(_flag_Qiann22);
	
	free(_lin__flag_Qiand01);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qiand01[mz1][mz2]);
		}
		free(_flag_Qiand01[mz1]);
	}
	free(_flag_Qiand01);
	
	free(_lin__flag_Qiand10);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qiand10[mz1][mz2]);
		}
		free(_flag_Qiand10[mz1]);
	}
	free(_flag_Qiand10);
	
	free(_lin__flag_Qiand11);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qiand11[mz1][mz2]);
		}
		free(_flag_Qiand11[mz1]);
	}
	free(_flag_Qiand11);
	
	free(_lin__flag_Qiand20);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qiand20[mz1][mz2]);
		}
		free(_flag_Qiand20[mz1]);
	}
	free(_flag_Qiand20);
	
	free(_lin__flag_Qiand21);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qiand21[mz1][mz2]);
		}
		free(_flag_Qiand21[mz1]);
	}
	free(_flag_Qiand21);
	
	free(_lin__flag_Qiadn01);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qiadn01[mz1][mz2]);
		}
		free(_flag_Qiadn01[mz1]);
	}
	free(_flag_Qiadn01);
	
	free(_lin__flag_Qiadn02);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qiadn02[mz1][mz2]);
		}
		free(_flag_Qiadn02[mz1]);
	}
	free(_flag_Qiadn02);
	
	free(_lin__flag_Qiadn10);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qiadn10[mz1][mz2]);
		}
		free(_flag_Qiadn10[mz1]);
	}
	free(_flag_Qiadn10);
	
	free(_lin__flag_Qiadn11);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qiadn11[mz1][mz2]);
		}
		free(_flag_Qiadn11[mz1]);
	}
	free(_flag_Qiadn11);
	
	free(_lin__flag_Qiadn12);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qiadn12[mz1][mz2]);
		}
		free(_flag_Qiadn12[mz1]);
	}
	free(_flag_Qiadn12);
	
	free(_lin__flag_Qiadd01);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qiadd01[mz1][mz2]);
		}
		free(_flag_Qiadd01[mz1]);
	}
	free(_flag_Qiadd01);
	
	free(_lin__flag_Qiadd10);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qiadd10[mz1][mz2]);
		}
		free(_flag_Qiadd10[mz1]);
	}
	free(_flag_Qiadd10);
	
	free(_lin__flag_Qiadd11);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qiadd11[mz1][mz2]);
		}
		free(_flag_Qiadd11[mz1]);
	}
	free(_flag_Qiadd11);
	
	free(_lin__flag_Qiar01);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qiar01[mz1][mz2]);
		}
		free(_flag_Qiar01[mz1]);
	}
	free(_flag_Qiar01);
	
	free(_lin__flag_Qiar10);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qiar10[mz1][mz2]);
		}
		free(_flag_Qiar10[mz1]);
	}
	free(_flag_Qiar10);
	
	free(_lin__flag_Qiar11);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qiar11[mz1][mz2]);
		}
		free(_flag_Qiar11[mz1]);
	}
	free(_flag_Qiar11);
	
	free(_lin__flag_Qilr01);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qilr01[mz1][mz2]);
		}
		free(_flag_Qilr01[mz1]);
	}
	free(_flag_Qilr01);
	
	free(_lin__flag_Qilr10);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qilr10[mz1][mz2]);
		}
		free(_flag_Qilr10[mz1]);
	}
	free(_flag_Qilr10);
	
	free(_lin__flag_Qilr11);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qilr11[mz1][mz2]);
		}
		free(_flag_Qilr11[mz1]);
	}
	free(_flag_Qilr11);
	
	free(_lin__flag_Qir01);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qir01[mz1][mz2]);
		}
		free(_flag_Qir01[mz1]);
	}
	free(_flag_Qir01);
	
	free(_lin__flag_Qir10);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qir10[mz1][mz2]);
		}
		free(_flag_Qir10[mz1]);
	}
	free(_flag_Qir10);
	
	free(_lin__flag_Qir11);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qir11[mz1][mz2]);
		}
		free(_flag_Qir11[mz1]);
	}
	free(_flag_Qir11);
	
	free(_lin__flag_Qia);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qia[mz1][mz2]);
		}
		free(_flag_Qia[mz1]);
	}
	free(_flag_Qia);
	
	free(_lin__flag_Qib00);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qib00[mz1][mz2]);
		}
		free(_flag_Qib00[mz1]);
	}
	free(_flag_Qib00);
	
	free(_lin__flag_Qib01);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qib01[mz1][mz2]);
		}
		free(_flag_Qib01[mz1]);
	}
	free(_flag_Qib01);
	
	free(_lin__flag_Qib10);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qib10[mz1][mz2]);
		}
		free(_flag_Qib10[mz1]);
	}
	free(_flag_Qib10);
	
	free(_lin__flag_Qib11);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qib11[mz1][mz2]);
		}
		free(_flag_Qib11[mz1]);
	}
	free(_flag_Qib11);
	
	free(_lin__flag_Qinn01);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qinn01[mz1][mz2]);
		}
		free(_flag_Qinn01[mz1]);
	}
	free(_flag_Qinn01);
	
	free(_lin__flag_Qinn02);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qinn02[mz1][mz2]);
		}
		free(_flag_Qinn02[mz1]);
	}
	free(_flag_Qinn02);
	
	free(_lin__flag_Qinn10);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qinn10[mz1][mz2]);
		}
		free(_flag_Qinn10[mz1]);
	}
	free(_flag_Qinn10);
	
	free(_lin__flag_Qinn11);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qinn11[mz1][mz2]);
		}
		free(_flag_Qinn11[mz1]);
	}
	free(_flag_Qinn11);
	
	free(_lin__flag_Qinn12);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qinn12[mz1][mz2]);
		}
		free(_flag_Qinn12[mz1]);
	}
	free(_flag_Qinn12);
	
	free(_lin__flag_Qinn20);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qinn20[mz1][mz2]);
		}
		free(_flag_Qinn20[mz1]);
	}
	free(_flag_Qinn20);
	
	free(_lin__flag_Qinn21);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qinn21[mz1][mz2]);
		}
		free(_flag_Qinn21[mz1]);
	}
	free(_flag_Qinn21);
	
	free(_lin__flag_Qinn22);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qinn22[mz1][mz2]);
		}
		free(_flag_Qinn22[mz1]);
	}
	free(_flag_Qinn22);
	
	free(_lin__flag_Qind01);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qind01[mz1][mz2]);
		}
		free(_flag_Qind01[mz1]);
	}
	free(_flag_Qind01);
	
	free(_lin__flag_Qind10);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qind10[mz1][mz2]);
		}
		free(_flag_Qind10[mz1]);
	}
	free(_flag_Qind10);
	
	free(_lin__flag_Qind11);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qind11[mz1][mz2]);
		}
		free(_flag_Qind11[mz1]);
	}
	free(_flag_Qind11);
	
	free(_lin__flag_Qind20);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qind20[mz1][mz2]);
		}
		free(_flag_Qind20[mz1]);
	}
	free(_flag_Qind20);
	
	free(_lin__flag_Qind21);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qind21[mz1][mz2]);
		}
		free(_flag_Qind21[mz1]);
	}
	free(_flag_Qind21);
	
	free(_lin__flag_Qidn01);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qidn01[mz1][mz2]);
		}
		free(_flag_Qidn01[mz1]);
	}
	free(_flag_Qidn01);
	
	free(_lin__flag_Qidn02);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qidn02[mz1][mz2]);
		}
		free(_flag_Qidn02[mz1]);
	}
	free(_flag_Qidn02);
	
	free(_lin__flag_Qidn10);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qidn10[mz1][mz2]);
		}
		free(_flag_Qidn10[mz1]);
	}
	free(_flag_Qidn10);
	
	free(_lin__flag_Qidn11);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qidn11[mz1][mz2]);
		}
		free(_flag_Qidn11[mz1]);
	}
	free(_flag_Qidn11);
	
	free(_lin__flag_Qidn12);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qidn12[mz1][mz2]);
		}
		free(_flag_Qidn12[mz1]);
	}
	free(_flag_Qidn12);
	
	free(_lin__flag_Qidd01);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qidd01[mz1][mz2]);
		}
		free(_flag_Qidd01[mz1]);
	}
	free(_flag_Qidd01);
	
	free(_lin__flag_Qidd10);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qidd10[mz1][mz2]);
		}
		free(_flag_Qidd10[mz1]);
	}
	free(_flag_Qidd10);
	
	free(_lin__flag_Qidd11);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qidd11[mz1][mz2]);
		}
		free(_flag_Qidd11[mz1]);
	}
	free(_flag_Qidd11);
	
	free(_lin__flag_Qix00);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qix00[mz1][mz2]);
		}
		free(_flag_Qix00[mz1]);
	}
	free(_flag_Qix00);
	
	free(_lin__flag_Qix01);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qix01[mz1][mz2]);
		}
		free(_flag_Qix01[mz1]);
	}
	free(_flag_Qix01);
	
	free(_lin__flag_Qix10);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qix10[mz1][mz2]);
		}
		free(_flag_Qix10[mz1]);
	}
	free(_flag_Qix10);
	
	free(_lin__flag_Qix11);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qix11[mz1][mz2]);
		}
		free(_flag_Qix11[mz1]);
	}
	free(_flag_Qix11);
	
	free(_lin__flag_auxqiadd01);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_auxqiadd01[mz1][mz2]);
		}
		free(_flag_auxqiadd01[mz1]);
	}
	free(_flag_auxqiadd01);
	
	free(_lin__flag_auxqiadd10);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_auxqiadd10[mz1][mz2]);
		}
		free(_flag_auxqiadd10[mz1]);
	}
	free(_flag_auxqiadd10);
	
	free(_lin__flag_auxqiadd11);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_auxqiadd11[mz1][mz2]);
		}
		free(_flag_auxqiadd11[mz1]);
	}
	free(_flag_auxqiadd11);
	
	free(_lin__flag_auxqia01);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_auxqia01[mz1][mz2]);
		}
		free(_flag_auxqia01[mz1]);
	}
	free(_flag_auxqia01);
	
	free(_lin__flag_auxqia10);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_auxqia10[mz1][mz2]);
		}
		free(_flag_auxqia10[mz1]);
	}
	free(_flag_auxqia10);
	
	free(_lin__flag_auxqia11);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_auxqia11[mz1][mz2]);
		}
		free(_flag_auxqia11[mz1]);
	}
	free(_flag_auxqia11);
	
	free(_lin__flag_Qb0);
	free(_flag_Qb0);
	
	free(_lin__flag_Qg0);
	for (mz1=0;mz1 < N-6; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qg0[mz1][mz2]);
		}
		free(_flag_Qg0[mz1]);
	}
	free(_flag_Qg0);
	
	free(_lin__flag_tempqg0);
	for (mz1=0;mz1 < N-8; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempqg0[mz1][mz2]);
		}
		free(_flag_tempqg0[mz1]);
	}
	free(_flag_tempqg0);
	
	free(_lin__flag_tempqgk0);
	for (mz1=0;mz1 < N-4; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempqgk0[mz1][mz2]);
		}
		free(_flag_tempqgk0[mz1]);
	}
	free(_flag_tempqgk0);
	
	free(_lin__flag_tempqgm0);
	for (mz1=0;mz1 < N-4; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempqgm0[mz1][mz2]);
		}
		free(_flag_tempqgm0[mz1]);
	}
	free(_flag_tempqgm0);
	
	free(_lin__flag_Qbr);
	free(_flag_Qbr);
	
	free(_lin__flag_Qgr);
	for (mz1=0;mz1 < M-6; mz1++) {
		for (mz2=0;mz2 < M; mz2++) {
			free(_flag_Qgr[mz1][mz2]);
		}
		free(_flag_Qgr[mz1]);
	}
	free(_flag_Qgr);
	
	free(_lin__flag_tempqgr);
	for (mz1=0;mz1 < M-8; mz1++) {
		for (mz2=0;mz2 < M; mz2++) {
			free(_flag_tempqgr[mz1][mz2]);
		}
		free(_flag_tempqgr[mz1]);
	}
	free(_flag_tempqgr);
	
	free(_lin__flag_tempqgkr);
	for (mz1=0;mz1 < M-4; mz1++) {
		for (mz2=0;mz2 < M; mz2++) {
			free(_flag_tempqgkr[mz1][mz2]);
		}
		free(_flag_tempqgkr[mz1]);
	}
	free(_flag_tempqgkr);
	
	free(_lin__flag_tempqgmr);
	for (mz1=0;mz1 < M-4; mz1++) {
		for (mz2=0;mz2 < M; mz2++) {
			free(_flag_tempqgmr[mz1][mz2]);
		}
		free(_flag_tempqgmr[mz1]);
	}
	free(_flag_tempqgmr);
	
	free(_lin__flag_Qm00);
	free(_flag_Qm00);
	
	free(_lin__flag_Qm10);
	free(_flag_Qm10);
	
	free(_lin__flag_Q0r);
	free(_flag_Q0r);
	
	free(_lin__flag_Q1r);
	free(_flag_Q1r);
	
	free(_lin__flag_Qm0r);
	free(_flag_Qm0r);
	
	free(_lin__flag_Qm1r);
	free(_flag_Qm1r);
	
	free(_lin__flag_Qgk1);
	for (mz1=0;mz1 < M-2; mz1++) {
		for (mz2=0;mz2 < M; mz2++) {
			free(_flag_Qgk1[mz1][mz2]);
		}
		free(_flag_Qgk1[mz1]);
	}
	free(_flag_Qgk1);
	
	free(_lin__flag_Qgm1);
	for (mz1=0;mz1 < M-2; mz1++) {
		for (mz2=0;mz2 < M; mz2++) {
			free(_flag_Qgm1[mz1][mz2]);
		}
		free(_flag_Qgm1[mz1]);
	}
	free(_flag_Qgm1);
	
	free(_lin__flag_Q01);
	free(_flag_Q01);
	
	free(_lin__flag_Q11);
	free(_flag_Q11);
	
	free(_lin__flag_Qm01);
	free(_flag_Qm01);
	
	free(_lin__flag_Qm11);
	free(_flag_Qm11);
	
	free(_lin__flag_Qih0);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qih0[mz1][mz2]);
		}
		free(_flag_Qih0[mz1]);
	}
	free(_flag_Qih0);
	
	free(_lin__flag_Qih1);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qih1[mz1][mz2]);
		}
		free(_flag_Qih1[mz1]);
	}
	free(_flag_Qih1);
	
	free(_lin__flag_Qihh00);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qihh00[mz1][mz2]);
		}
		free(_flag_Qihh00[mz1]);
	}
	free(_flag_Qihh00);
	
	free(_lin__flag_Qihh01);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qihh01[mz1][mz2]);
		}
		free(_flag_Qihh01[mz1]);
	}
	free(_flag_Qihh01);
	
	free(_lin__flag_Qihh10);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qihh10[mz1][mz2]);
		}
		free(_flag_Qihh10[mz1]);
	}
	free(_flag_Qihh10);
	
	free(_lin__flag_Qihh11);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qihh11[mz1][mz2]);
		}
		free(_flag_Qihh11[mz1]);
	}
	free(_flag_Qihh11);
	
	free(_lin__flag_Qihm00);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qihm00[mz1][mz2]);
		}
		free(_flag_Qihm00[mz1]);
	}
	free(_flag_Qihm00);
	
	free(_lin__flag_Qihm01);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qihm01[mz1][mz2]);
		}
		free(_flag_Qihm01[mz1]);
	}
	free(_flag_Qihm01);
	
	free(_lin__flag_Qihm10);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qihm10[mz1][mz2]);
		}
		free(_flag_Qihm10[mz1]);
	}
	free(_flag_Qihm10);
	
	free(_lin__flag_Qihm11);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qihm11[mz1][mz2]);
		}
		free(_flag_Qihm11[mz1]);
	}
	free(_flag_Qihm11);
	
	free(_lin__flag_Qgkr);
	for (mz1=0;mz1 < M-2; mz1++) {
		for (mz2=0;mz2 < M; mz2++) {
			free(_flag_Qgkr[mz1][mz2]);
		}
		free(_flag_Qgkr[mz1]);
	}
	free(_flag_Qgkr);
	
	free(_lin__flag_Qgmr);
	for (mz1=0;mz1 < M-2; mz1++) {
		for (mz2=0;mz2 < M; mz2++) {
			free(_flag_Qgmr[mz1][mz2]);
		}
		free(_flag_Qgmr[mz1]);
	}
	free(_flag_Qgmr);
	
	free(_lin__flag_Qgk0);
	for (mz1=0;mz1 < N-2; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qgk0[mz1][mz2]);
		}
		free(_flag_Qgk0[mz1]);
	}
	free(_flag_Qgk0);
	
	free(_lin__flag_Qgm0);
	for (mz1=0;mz1 < N-2; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_Qgm0[mz1][mz2]);
		}
		free(_flag_Qgm0[mz1]);
	}
	free(_flag_Qgm0);
	
	free(_lin__flag_Q20);
	free(_flag_Q20);
	
	free(_lin__flag_Qm20);
	free(_flag_Qm20);
	
	free(_lin__flag_Qm2r);
	free(_flag_Qm2r);
	
	free(_lin__flag_Q2r);
	free(_flag_Q2r);
	
	free(_lin__flag_Q21);
	free(_flag_Q21);
	
	free(_lin__flag_tempQiy1);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiy1[mz1][mz2]);
		}
		free(_flag_tempQiy1[mz1]);
	}
	free(_flag_tempQiy1);
	
	free(_lin__flag_tempQiy2);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiy2[mz1][mz2]);
		}
		free(_flag_tempQiy2[mz1]);
	}
	free(_flag_tempQiy2);
	
	free(_lin__flag_tempQixm001);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQixm001[mz1][mz2]);
		}
		free(_flag_tempQixm001[mz1]);
	}
	free(_flag_tempQixm001);
	
	free(_lin__flag_tempQixm002);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQixm002[mz1][mz2]);
		}
		free(_flag_tempQixm002[mz1]);
	}
	free(_flag_tempQixm002);
	
	free(_lin__flag_tempQixm011);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQixm011[mz1][mz2]);
		}
		free(_flag_tempQixm011[mz1]);
	}
	free(_flag_tempQixm011);
	
	free(_lin__flag_tempQixm012);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQixm012[mz1][mz2]);
		}
		free(_flag_tempQixm012[mz1]);
	}
	free(_flag_tempQixm012);
	
	free(_lin__flag_tempQixm021);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQixm021[mz1][mz2]);
		}
		free(_flag_tempQixm021[mz1]);
	}
	free(_flag_tempQixm021);
	
	free(_lin__flag_tempQixm022);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQixm022[mz1][mz2]);
		}
		free(_flag_tempQixm022[mz1]);
	}
	free(_flag_tempQixm022);
	
	free(_lin__flag_tempQixm101);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQixm101[mz1][mz2]);
		}
		free(_flag_tempQixm101[mz1]);
	}
	free(_flag_tempQixm101);
	
	free(_lin__flag_tempQixm102);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQixm102[mz1][mz2]);
		}
		free(_flag_tempQixm102[mz1]);
	}
	free(_flag_tempQixm102);
	
	free(_lin__flag_tempQixm111);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQixm111[mz1][mz2]);
		}
		free(_flag_tempQixm111[mz1]);
	}
	free(_flag_tempQixm111);
	
	free(_lin__flag_tempQixm112);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQixm112[mz1][mz2]);
		}
		free(_flag_tempQixm112[mz1]);
	}
	free(_flag_tempQixm112);
	
	free(_lin__flag_tempQixm121);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQixm121[mz1][mz2]);
		}
		free(_flag_tempQixm121[mz1]);
	}
	free(_flag_tempQixm121);
	
	free(_lin__flag_tempQixm122);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQixm122[mz1][mz2]);
		}
		free(_flag_tempQixm122[mz1]);
	}
	free(_flag_tempQixm122);
	
	free(_lin__flag_tempQixk001);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQixk001[mz1][mz2]);
		}
		free(_flag_tempQixk001[mz1]);
	}
	free(_flag_tempQixk001);
	
	free(_lin__flag_tempQixk002);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQixk002[mz1][mz2]);
		}
		free(_flag_tempQixk002[mz1]);
	}
	free(_flag_tempQixk002);
	
	free(_lin__flag_tempQixk011);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQixk011[mz1][mz2]);
		}
		free(_flag_tempQixk011[mz1]);
	}
	free(_flag_tempQixk011);
	
	free(_lin__flag_tempQixk012);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQixk012[mz1][mz2]);
		}
		free(_flag_tempQixk012[mz1]);
	}
	free(_flag_tempQixk012);
	
	free(_lin__flag_tempQixk101);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQixk101[mz1][mz2]);
		}
		free(_flag_tempQixk101[mz1]);
	}
	free(_flag_tempQixk101);
	
	free(_lin__flag_tempQixk102);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQixk102[mz1][mz2]);
		}
		free(_flag_tempQixk102[mz1]);
	}
	free(_flag_tempQixk102);
	
	free(_lin__flag_tempQixk111);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQixk111[mz1][mz2]);
		}
		free(_flag_tempQixk111[mz1]);
	}
	free(_flag_tempQixk111);
	
	free(_lin__flag_tempQixk112);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQixk112[mz1][mz2]);
		}
		free(_flag_tempQixk112[mz1]);
	}
	free(_flag_tempQixk112);
	
	free(_lin__flag_tempQimm021);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQimm021[mz1][mz2]);
		}
		free(_flag_tempQimm021[mz1]);
	}
	free(_flag_tempQimm021);
	
	free(_lin__flag_tempQimm022);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQimm022[mz1][mz2]);
		}
		free(_flag_tempQimm022[mz1]);
	}
	free(_flag_tempQimm022);
	
	free(_lin__flag_tempQimm023);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQimm023[mz1][mz2]);
		}
		free(_flag_tempQimm023[mz1]);
	}
	free(_flag_tempQimm023);
	
	free(_lin__flag_tempQimm121);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQimm121[mz1][mz2]);
		}
		free(_flag_tempQimm121[mz1]);
	}
	free(_flag_tempQimm121);
	
	free(_lin__flag_tempQimm122);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQimm122[mz1][mz2]);
		}
		free(_flag_tempQimm122[mz1]);
	}
	free(_flag_tempQimm122);
	
	free(_lin__flag_tempQimm123);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQimm123[mz1][mz2]);
		}
		free(_flag_tempQimm123[mz1]);
	}
	free(_flag_tempQimm123);
	
	free(_lin__flag_tempQimm201);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQimm201[mz1][mz2]);
		}
		free(_flag_tempQimm201[mz1]);
	}
	free(_flag_tempQimm201);
	
	free(_lin__flag_tempQimm202);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQimm202[mz1][mz2]);
		}
		free(_flag_tempQimm202[mz1]);
	}
	free(_flag_tempQimm202);
	
	free(_lin__flag_tempQimm203);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQimm203[mz1][mz2]);
		}
		free(_flag_tempQimm203[mz1]);
	}
	free(_flag_tempQimm203);
	
	free(_lin__flag_tempQimm211);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQimm211[mz1][mz2]);
		}
		free(_flag_tempQimm211[mz1]);
	}
	free(_flag_tempQimm211);
	
	free(_lin__flag_tempQimm212);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQimm212[mz1][mz2]);
		}
		free(_flag_tempQimm212[mz1]);
	}
	free(_flag_tempQimm212);
	
	free(_lin__flag_tempQimm213);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQimm213[mz1][mz2]);
		}
		free(_flag_tempQimm213[mz1]);
	}
	free(_flag_tempQimm213);
	
	free(_lin__flag_tempQimm221);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQimm221[mz1][mz2]);
		}
		free(_flag_tempQimm221[mz1]);
	}
	free(_flag_tempQimm221);
	
	free(_lin__flag_tempQimm222);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQimm222[mz1][mz2]);
		}
		free(_flag_tempQimm222[mz1]);
	}
	free(_flag_tempQimm222);
	
	free(_lin__flag_tempQimm223);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQimm223[mz1][mz2]);
		}
		free(_flag_tempQimm223[mz1]);
	}
	free(_flag_tempQimm223);
	
	free(_lin__flag_tempQimk011);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQimk011[mz1][mz2]);
		}
		free(_flag_tempQimk011[mz1]);
	}
	free(_flag_tempQimk011);
	
	free(_lin__flag_tempQimk012);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQimk012[mz1][mz2]);
		}
		free(_flag_tempQimk012[mz1]);
	}
	free(_flag_tempQimk012);
	
	free(_lin__flag_tempQimk013);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQimk013[mz1][mz2]);
		}
		free(_flag_tempQimk013[mz1]);
	}
	free(_flag_tempQimk013);
	
	free(_lin__flag_tempQimk014);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQimk014[mz1][mz2]);
		}
		free(_flag_tempQimk014[mz1]);
	}
	free(_flag_tempQimk014);
	
	free(_lin__flag_tempQimk111);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQimk111[mz1][mz2]);
		}
		free(_flag_tempQimk111[mz1]);
	}
	free(_flag_tempQimk111);
	
	free(_lin__flag_tempQimk112);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQimk112[mz1][mz2]);
		}
		free(_flag_tempQimk112[mz1]);
	}
	free(_flag_tempQimk112);
	
	free(_lin__flag_tempQimk113);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQimk113[mz1][mz2]);
		}
		free(_flag_tempQimk113[mz1]);
	}
	free(_flag_tempQimk113);
	
	free(_lin__flag_tempQimk114);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQimk114[mz1][mz2]);
		}
		free(_flag_tempQimk114[mz1]);
	}
	free(_flag_tempQimk114);
	
	free(_lin__flag_tempQimk201);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQimk201[mz1][mz2]);
		}
		free(_flag_tempQimk201[mz1]);
	}
	free(_flag_tempQimk201);
	
	free(_lin__flag_tempQimk202);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQimk202[mz1][mz2]);
		}
		free(_flag_tempQimk202[mz1]);
	}
	free(_flag_tempQimk202);
	
	free(_lin__flag_tempQimk203);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQimk203[mz1][mz2]);
		}
		free(_flag_tempQimk203[mz1]);
	}
	free(_flag_tempQimk203);
	
	free(_lin__flag_tempQimk204);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQimk204[mz1][mz2]);
		}
		free(_flag_tempQimk204[mz1]);
	}
	free(_flag_tempQimk204);
	
	free(_lin__flag_tempQimk211);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQimk211[mz1][mz2]);
		}
		free(_flag_tempQimk211[mz1]);
	}
	free(_flag_tempQimk211);
	
	free(_lin__flag_tempQimk212);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQimk212[mz1][mz2]);
		}
		free(_flag_tempQimk212[mz1]);
	}
	free(_flag_tempQimk212);
	
	free(_lin__flag_tempQimk213);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQimk213[mz1][mz2]);
		}
		free(_flag_tempQimk213[mz1]);
	}
	free(_flag_tempQimk213);
	
	free(_lin__flag_tempQimk214);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQimk214[mz1][mz2]);
		}
		free(_flag_tempQimk214[mz1]);
	}
	free(_flag_tempQimk214);
	
	free(_lin__flag_tempQikm101);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQikm101[mz1][mz2]);
		}
		free(_flag_tempQikm101[mz1]);
	}
	free(_flag_tempQikm101);
	
	free(_lin__flag_tempQikm102);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQikm102[mz1][mz2]);
		}
		free(_flag_tempQikm102[mz1]);
	}
	free(_flag_tempQikm102);
	
	free(_lin__flag_tempQikm103);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQikm103[mz1][mz2]);
		}
		free(_flag_tempQikm103[mz1]);
	}
	free(_flag_tempQikm103);
	
	free(_lin__flag_tempQikm104);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQikm104[mz1][mz2]);
		}
		free(_flag_tempQikm104[mz1]);
	}
	free(_flag_tempQikm104);
	
	free(_lin__flag_tempQikm111);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQikm111[mz1][mz2]);
		}
		free(_flag_tempQikm111[mz1]);
	}
	free(_flag_tempQikm111);
	
	free(_lin__flag_tempQikm112);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQikm112[mz1][mz2]);
		}
		free(_flag_tempQikm112[mz1]);
	}
	free(_flag_tempQikm112);
	
	free(_lin__flag_tempQikm113);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQikm113[mz1][mz2]);
		}
		free(_flag_tempQikm113[mz1]);
	}
	free(_flag_tempQikm113);
	
	free(_lin__flag_tempQikm114);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQikm114[mz1][mz2]);
		}
		free(_flag_tempQikm114[mz1]);
	}
	free(_flag_tempQikm114);
	
	free(_lin__flag_tempQikm021);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQikm021[mz1][mz2]);
		}
		free(_flag_tempQikm021[mz1]);
	}
	free(_flag_tempQikm021);
	
	free(_lin__flag_tempQikm022);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQikm022[mz1][mz2]);
		}
		free(_flag_tempQikm022[mz1]);
	}
	free(_flag_tempQikm022);
	
	free(_lin__flag_tempQikm023);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQikm023[mz1][mz2]);
		}
		free(_flag_tempQikm023[mz1]);
	}
	free(_flag_tempQikm023);
	
	free(_lin__flag_tempQikm024);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQikm024[mz1][mz2]);
		}
		free(_flag_tempQikm024[mz1]);
	}
	free(_flag_tempQikm024);
	
	free(_lin__flag_tempQikm121);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQikm121[mz1][mz2]);
		}
		free(_flag_tempQikm121[mz1]);
	}
	free(_flag_tempQikm121);
	
	free(_lin__flag_tempQikm122);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQikm122[mz1][mz2]);
		}
		free(_flag_tempQikm122[mz1]);
	}
	free(_flag_tempQikm122);
	
	free(_lin__flag_tempQikm123);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQikm123[mz1][mz2]);
		}
		free(_flag_tempQikm123[mz1]);
	}
	free(_flag_tempQikm123);
	
	free(_lin__flag_tempQikm124);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQikm124[mz1][mz2]);
		}
		free(_flag_tempQikm124[mz1]);
	}
	free(_flag_tempQikm124);
	
	free(_lin__flag_tempQikk011);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQikk011[mz1][mz2]);
		}
		free(_flag_tempQikk011[mz1]);
	}
	free(_flag_tempQikk011);
	
	free(_lin__flag_tempQikk012);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQikk012[mz1][mz2]);
		}
		free(_flag_tempQikk012[mz1]);
	}
	free(_flag_tempQikk012);
	
	free(_lin__flag_tempQikk013);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQikk013[mz1][mz2]);
		}
		free(_flag_tempQikk013[mz1]);
	}
	free(_flag_tempQikk013);
	
	free(_lin__flag_tempQikk014);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQikk014[mz1][mz2]);
		}
		free(_flag_tempQikk014[mz1]);
	}
	free(_flag_tempQikk014);
	
	free(_lin__flag_tempQikk015);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQikk015[mz1][mz2]);
		}
		free(_flag_tempQikk015[mz1]);
	}
	free(_flag_tempQikk015);
	
	free(_lin__flag_tempQikk101);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQikk101[mz1][mz2]);
		}
		free(_flag_tempQikk101[mz1]);
	}
	free(_flag_tempQikk101);
	
	free(_lin__flag_tempQikk102);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQikk102[mz1][mz2]);
		}
		free(_flag_tempQikk102[mz1]);
	}
	free(_flag_tempQikk102);
	
	free(_lin__flag_tempQikk103);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQikk103[mz1][mz2]);
		}
		free(_flag_tempQikk103[mz1]);
	}
	free(_flag_tempQikk103);
	
	free(_lin__flag_tempQikk104);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQikk104[mz1][mz2]);
		}
		free(_flag_tempQikk104[mz1]);
	}
	free(_flag_tempQikk104);
	
	free(_lin__flag_tempQikk105);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQikk105[mz1][mz2]);
		}
		free(_flag_tempQikk105[mz1]);
	}
	free(_flag_tempQikk105);
	
	free(_lin__flag_tempQikk111);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQikk111[mz1][mz2]);
		}
		free(_flag_tempQikk111[mz1]);
	}
	free(_flag_tempQikk111);
	
	free(_lin__flag_tempQikk112);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQikk112[mz1][mz2]);
		}
		free(_flag_tempQikk112[mz1]);
	}
	free(_flag_tempQikk112);
	
	free(_lin__flag_tempQikk113);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQikk113[mz1][mz2]);
		}
		free(_flag_tempQikk113[mz1]);
	}
	free(_flag_tempQikk113);
	
	free(_lin__flag_tempQikk114);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQikk114[mz1][mz2]);
		}
		free(_flag_tempQikk114[mz1]);
	}
	free(_flag_tempQikk114);
	
	free(_lin__flag_tempQikk115);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQikk115[mz1][mz2]);
		}
		free(_flag_tempQikk115[mz1]);
	}
	free(_flag_tempQikk115);
	
	free(_lin__flag_tempQiann011);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann011[mz1][mz2]);
		}
		free(_flag_tempQiann011[mz1]);
	}
	free(_flag_tempQiann011);
	
	free(_lin__flag_tempQiann012);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann012[mz1][mz2]);
		}
		free(_flag_tempQiann012[mz1]);
	}
	free(_flag_tempQiann012);
	
	free(_lin__flag_tempQiann013);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann013[mz1][mz2]);
		}
		free(_flag_tempQiann013[mz1]);
	}
	free(_flag_tempQiann013);
	
	free(_lin__flag_tempQiann014);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann014[mz1][mz2]);
		}
		free(_flag_tempQiann014[mz1]);
	}
	free(_flag_tempQiann014);
	
	free(_lin__flag_tempQiann015);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann015[mz1][mz2]);
		}
		free(_flag_tempQiann015[mz1]);
	}
	free(_flag_tempQiann015);
	
	free(_lin__flag_tempQiann016);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann016[mz1][mz2]);
		}
		free(_flag_tempQiann016[mz1]);
	}
	free(_flag_tempQiann016);
	
	free(_lin__flag_tempQiann021);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann021[mz1][mz2]);
		}
		free(_flag_tempQiann021[mz1]);
	}
	free(_flag_tempQiann021);
	
	free(_lin__flag_tempQiann022);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann022[mz1][mz2]);
		}
		free(_flag_tempQiann022[mz1]);
	}
	free(_flag_tempQiann022);
	
	free(_lin__flag_tempQiann023);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann023[mz1][mz2]);
		}
		free(_flag_tempQiann023[mz1]);
	}
	free(_flag_tempQiann023);
	
	free(_lin__flag_tempQiann024);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann024[mz1][mz2]);
		}
		free(_flag_tempQiann024[mz1]);
	}
	free(_flag_tempQiann024);
	
	free(_lin__flag_tempQiann025);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann025[mz1][mz2]);
		}
		free(_flag_tempQiann025[mz1]);
	}
	free(_flag_tempQiann025);
	
	free(_lin__flag_tempQiann026);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann026[mz1][mz2]);
		}
		free(_flag_tempQiann026[mz1]);
	}
	free(_flag_tempQiann026);
	
	free(_lin__flag_tempQiann101);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann101[mz1][mz2]);
		}
		free(_flag_tempQiann101[mz1]);
	}
	free(_flag_tempQiann101);
	
	free(_lin__flag_tempQiann102);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann102[mz1][mz2]);
		}
		free(_flag_tempQiann102[mz1]);
	}
	free(_flag_tempQiann102);
	
	free(_lin__flag_tempQiann103);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann103[mz1][mz2]);
		}
		free(_flag_tempQiann103[mz1]);
	}
	free(_flag_tempQiann103);
	
	free(_lin__flag_tempQiann104);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann104[mz1][mz2]);
		}
		free(_flag_tempQiann104[mz1]);
	}
	free(_flag_tempQiann104);
	
	free(_lin__flag_tempQiann105);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann105[mz1][mz2]);
		}
		free(_flag_tempQiann105[mz1]);
	}
	free(_flag_tempQiann105);
	
	free(_lin__flag_tempQiann106);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann106[mz1][mz2]);
		}
		free(_flag_tempQiann106[mz1]);
	}
	free(_flag_tempQiann106);
	
	free(_lin__flag_tempQiann111);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann111[mz1][mz2]);
		}
		free(_flag_tempQiann111[mz1]);
	}
	free(_flag_tempQiann111);
	
	free(_lin__flag_tempQiann112);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann112[mz1][mz2]);
		}
		free(_flag_tempQiann112[mz1]);
	}
	free(_flag_tempQiann112);
	
	free(_lin__flag_tempQiann113);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann113[mz1][mz2]);
		}
		free(_flag_tempQiann113[mz1]);
	}
	free(_flag_tempQiann113);
	
	free(_lin__flag_tempQiann114);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann114[mz1][mz2]);
		}
		free(_flag_tempQiann114[mz1]);
	}
	free(_flag_tempQiann114);
	
	free(_lin__flag_tempQiann115);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann115[mz1][mz2]);
		}
		free(_flag_tempQiann115[mz1]);
	}
	free(_flag_tempQiann115);
	
	free(_lin__flag_tempQiann116);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann116[mz1][mz2]);
		}
		free(_flag_tempQiann116[mz1]);
	}
	free(_flag_tempQiann116);
	
	free(_lin__flag_tempQiann121);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann121[mz1][mz2]);
		}
		free(_flag_tempQiann121[mz1]);
	}
	free(_flag_tempQiann121);
	
	free(_lin__flag_tempQiann122);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann122[mz1][mz2]);
		}
		free(_flag_tempQiann122[mz1]);
	}
	free(_flag_tempQiann122);
	
	free(_lin__flag_tempQiann123);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann123[mz1][mz2]);
		}
		free(_flag_tempQiann123[mz1]);
	}
	free(_flag_tempQiann123);
	
	free(_lin__flag_tempQiann124);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann124[mz1][mz2]);
		}
		free(_flag_tempQiann124[mz1]);
	}
	free(_flag_tempQiann124);
	
	free(_lin__flag_tempQiann125);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann125[mz1][mz2]);
		}
		free(_flag_tempQiann125[mz1]);
	}
	free(_flag_tempQiann125);
	
	free(_lin__flag_tempQiann126);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann126[mz1][mz2]);
		}
		free(_flag_tempQiann126[mz1]);
	}
	free(_flag_tempQiann126);
	
	free(_lin__flag_tempQiann201);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann201[mz1][mz2]);
		}
		free(_flag_tempQiann201[mz1]);
	}
	free(_flag_tempQiann201);
	
	free(_lin__flag_tempQiann202);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann202[mz1][mz2]);
		}
		free(_flag_tempQiann202[mz1]);
	}
	free(_flag_tempQiann202);
	
	free(_lin__flag_tempQiann203);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann203[mz1][mz2]);
		}
		free(_flag_tempQiann203[mz1]);
	}
	free(_flag_tempQiann203);
	
	free(_lin__flag_tempQiann204);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann204[mz1][mz2]);
		}
		free(_flag_tempQiann204[mz1]);
	}
	free(_flag_tempQiann204);
	
	free(_lin__flag_tempQiann205);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann205[mz1][mz2]);
		}
		free(_flag_tempQiann205[mz1]);
	}
	free(_flag_tempQiann205);
	
	free(_lin__flag_tempQiann206);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann206[mz1][mz2]);
		}
		free(_flag_tempQiann206[mz1]);
	}
	free(_flag_tempQiann206);
	
	free(_lin__flag_tempQiann211);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann211[mz1][mz2]);
		}
		free(_flag_tempQiann211[mz1]);
	}
	free(_flag_tempQiann211);
	
	free(_lin__flag_tempQiann212);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann212[mz1][mz2]);
		}
		free(_flag_tempQiann212[mz1]);
	}
	free(_flag_tempQiann212);
	
	free(_lin__flag_tempQiann213);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann213[mz1][mz2]);
		}
		free(_flag_tempQiann213[mz1]);
	}
	free(_flag_tempQiann213);
	
	free(_lin__flag_tempQiann214);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann214[mz1][mz2]);
		}
		free(_flag_tempQiann214[mz1]);
	}
	free(_flag_tempQiann214);
	
	free(_lin__flag_tempQiann215);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann215[mz1][mz2]);
		}
		free(_flag_tempQiann215[mz1]);
	}
	free(_flag_tempQiann215);
	
	free(_lin__flag_tempQiann216);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann216[mz1][mz2]);
		}
		free(_flag_tempQiann216[mz1]);
	}
	free(_flag_tempQiann216);
	
	free(_lin__flag_tempQiann221);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann221[mz1][mz2]);
		}
		free(_flag_tempQiann221[mz1]);
	}
	free(_flag_tempQiann221);
	
	free(_lin__flag_tempQiann222);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann222[mz1][mz2]);
		}
		free(_flag_tempQiann222[mz1]);
	}
	free(_flag_tempQiann222);
	
	free(_lin__flag_tempQiann223);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann223[mz1][mz2]);
		}
		free(_flag_tempQiann223[mz1]);
	}
	free(_flag_tempQiann223);
	
	free(_lin__flag_tempQiann224);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann224[mz1][mz2]);
		}
		free(_flag_tempQiann224[mz1]);
	}
	free(_flag_tempQiann224);
	
	free(_lin__flag_tempQiann225);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann225[mz1][mz2]);
		}
		free(_flag_tempQiann225[mz1]);
	}
	free(_flag_tempQiann225);
	
	free(_lin__flag_tempQiann226);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiann226[mz1][mz2]);
		}
		free(_flag_tempQiann226[mz1]);
	}
	free(_flag_tempQiann226);
	
	free(_lin__flag_tempQiand011);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiand011[mz1][mz2]);
		}
		free(_flag_tempQiand011[mz1]);
	}
	free(_flag_tempQiand011);
	
	free(_lin__flag_tempQiand012);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiand012[mz1][mz2]);
		}
		free(_flag_tempQiand012[mz1]);
	}
	free(_flag_tempQiand012);
	
	free(_lin__flag_tempQiand013);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiand013[mz1][mz2]);
		}
		free(_flag_tempQiand013[mz1]);
	}
	free(_flag_tempQiand013);
	
	free(_lin__flag_tempQiand014);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiand014[mz1][mz2]);
		}
		free(_flag_tempQiand014[mz1]);
	}
	free(_flag_tempQiand014);
	
	free(_lin__flag_tempQiand015);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiand015[mz1][mz2]);
		}
		free(_flag_tempQiand015[mz1]);
	}
	free(_flag_tempQiand015);
	
	free(_lin__flag_tempQiand101);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiand101[mz1][mz2]);
		}
		free(_flag_tempQiand101[mz1]);
	}
	free(_flag_tempQiand101);
	
	free(_lin__flag_tempQiand102);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiand102[mz1][mz2]);
		}
		free(_flag_tempQiand102[mz1]);
	}
	free(_flag_tempQiand102);
	
	free(_lin__flag_tempQiand103);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiand103[mz1][mz2]);
		}
		free(_flag_tempQiand103[mz1]);
	}
	free(_flag_tempQiand103);
	
	free(_lin__flag_tempQiand104);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiand104[mz1][mz2]);
		}
		free(_flag_tempQiand104[mz1]);
	}
	free(_flag_tempQiand104);
	
	free(_lin__flag_tempQiand105);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiand105[mz1][mz2]);
		}
		free(_flag_tempQiand105[mz1]);
	}
	free(_flag_tempQiand105);
	
	free(_lin__flag_tempQiand111);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiand111[mz1][mz2]);
		}
		free(_flag_tempQiand111[mz1]);
	}
	free(_flag_tempQiand111);
	
	free(_lin__flag_tempQiand112);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiand112[mz1][mz2]);
		}
		free(_flag_tempQiand112[mz1]);
	}
	free(_flag_tempQiand112);
	
	free(_lin__flag_tempQiand113);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiand113[mz1][mz2]);
		}
		free(_flag_tempQiand113[mz1]);
	}
	free(_flag_tempQiand113);
	
	free(_lin__flag_tempQiand114);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiand114[mz1][mz2]);
		}
		free(_flag_tempQiand114[mz1]);
	}
	free(_flag_tempQiand114);
	
	free(_lin__flag_tempQiand115);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiand115[mz1][mz2]);
		}
		free(_flag_tempQiand115[mz1]);
	}
	free(_flag_tempQiand115);
	
	free(_lin__flag_tempQiand201);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiand201[mz1][mz2]);
		}
		free(_flag_tempQiand201[mz1]);
	}
	free(_flag_tempQiand201);
	
	free(_lin__flag_tempQiand202);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiand202[mz1][mz2]);
		}
		free(_flag_tempQiand202[mz1]);
	}
	free(_flag_tempQiand202);
	
	free(_lin__flag_tempQiand203);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiand203[mz1][mz2]);
		}
		free(_flag_tempQiand203[mz1]);
	}
	free(_flag_tempQiand203);
	
	free(_lin__flag_tempQiand204);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiand204[mz1][mz2]);
		}
		free(_flag_tempQiand204[mz1]);
	}
	free(_flag_tempQiand204);
	
	free(_lin__flag_tempQiand205);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiand205[mz1][mz2]);
		}
		free(_flag_tempQiand205[mz1]);
	}
	free(_flag_tempQiand205);
	
	free(_lin__flag_tempQiand211);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiand211[mz1][mz2]);
		}
		free(_flag_tempQiand211[mz1]);
	}
	free(_flag_tempQiand211);
	
	free(_lin__flag_tempQiand212);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiand212[mz1][mz2]);
		}
		free(_flag_tempQiand212[mz1]);
	}
	free(_flag_tempQiand212);
	
	free(_lin__flag_tempQiand213);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiand213[mz1][mz2]);
		}
		free(_flag_tempQiand213[mz1]);
	}
	free(_flag_tempQiand213);
	
	free(_lin__flag_tempQiand214);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiand214[mz1][mz2]);
		}
		free(_flag_tempQiand214[mz1]);
	}
	free(_flag_tempQiand214);
	
	free(_lin__flag_tempQiand215);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiand215[mz1][mz2]);
		}
		free(_flag_tempQiand215[mz1]);
	}
	free(_flag_tempQiand215);
	
	free(_lin__flag_tempQiadn011);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadn011[mz1][mz2]);
		}
		free(_flag_tempQiadn011[mz1]);
	}
	free(_flag_tempQiadn011);
	
	free(_lin__flag_tempQiadn012);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadn012[mz1][mz2]);
		}
		free(_flag_tempQiadn012[mz1]);
	}
	free(_flag_tempQiadn012);
	
	free(_lin__flag_tempQiadn013);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadn013[mz1][mz2]);
		}
		free(_flag_tempQiadn013[mz1]);
	}
	free(_flag_tempQiadn013);
	
	free(_lin__flag_tempQiadn014);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadn014[mz1][mz2]);
		}
		free(_flag_tempQiadn014[mz1]);
	}
	free(_flag_tempQiadn014);
	
	free(_lin__flag_tempQiadn015);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadn015[mz1][mz2]);
		}
		free(_flag_tempQiadn015[mz1]);
	}
	free(_flag_tempQiadn015);
	
	free(_lin__flag_tempQiadn021);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadn021[mz1][mz2]);
		}
		free(_flag_tempQiadn021[mz1]);
	}
	free(_flag_tempQiadn021);
	
	free(_lin__flag_tempQiadn022);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadn022[mz1][mz2]);
		}
		free(_flag_tempQiadn022[mz1]);
	}
	free(_flag_tempQiadn022);
	
	free(_lin__flag_tempQiadn023);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadn023[mz1][mz2]);
		}
		free(_flag_tempQiadn023[mz1]);
	}
	free(_flag_tempQiadn023);
	
	free(_lin__flag_tempQiadn024);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadn024[mz1][mz2]);
		}
		free(_flag_tempQiadn024[mz1]);
	}
	free(_flag_tempQiadn024);
	
	free(_lin__flag_tempQiadn025);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadn025[mz1][mz2]);
		}
		free(_flag_tempQiadn025[mz1]);
	}
	free(_flag_tempQiadn025);
	
	free(_lin__flag_tempQiadn101);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadn101[mz1][mz2]);
		}
		free(_flag_tempQiadn101[mz1]);
	}
	free(_flag_tempQiadn101);
	
	free(_lin__flag_tempQiadn102);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadn102[mz1][mz2]);
		}
		free(_flag_tempQiadn102[mz1]);
	}
	free(_flag_tempQiadn102);
	
	free(_lin__flag_tempQiadn103);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadn103[mz1][mz2]);
		}
		free(_flag_tempQiadn103[mz1]);
	}
	free(_flag_tempQiadn103);
	
	free(_lin__flag_tempQiadn104);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadn104[mz1][mz2]);
		}
		free(_flag_tempQiadn104[mz1]);
	}
	free(_flag_tempQiadn104);
	
	free(_lin__flag_tempQiadn105);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadn105[mz1][mz2]);
		}
		free(_flag_tempQiadn105[mz1]);
	}
	free(_flag_tempQiadn105);
	
	free(_lin__flag_tempQiadn111);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadn111[mz1][mz2]);
		}
		free(_flag_tempQiadn111[mz1]);
	}
	free(_flag_tempQiadn111);
	
	free(_lin__flag_tempQiadn112);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadn112[mz1][mz2]);
		}
		free(_flag_tempQiadn112[mz1]);
	}
	free(_flag_tempQiadn112);
	
	free(_lin__flag_tempQiadn113);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadn113[mz1][mz2]);
		}
		free(_flag_tempQiadn113[mz1]);
	}
	free(_flag_tempQiadn113);
	
	free(_lin__flag_tempQiadn114);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadn114[mz1][mz2]);
		}
		free(_flag_tempQiadn114[mz1]);
	}
	free(_flag_tempQiadn114);
	
	free(_lin__flag_tempQiadn115);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadn115[mz1][mz2]);
		}
		free(_flag_tempQiadn115[mz1]);
	}
	free(_flag_tempQiadn115);
	
	free(_lin__flag_tempQiadn121);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadn121[mz1][mz2]);
		}
		free(_flag_tempQiadn121[mz1]);
	}
	free(_flag_tempQiadn121);
	
	free(_lin__flag_tempQiadn122);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadn122[mz1][mz2]);
		}
		free(_flag_tempQiadn122[mz1]);
	}
	free(_flag_tempQiadn122);
	
	free(_lin__flag_tempQiadn123);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadn123[mz1][mz2]);
		}
		free(_flag_tempQiadn123[mz1]);
	}
	free(_flag_tempQiadn123);
	
	free(_lin__flag_tempQiadn124);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadn124[mz1][mz2]);
		}
		free(_flag_tempQiadn124[mz1]);
	}
	free(_flag_tempQiadn124);
	
	free(_lin__flag_tempQiadn125);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadn125[mz1][mz2]);
		}
		free(_flag_tempQiadn125[mz1]);
	}
	free(_flag_tempQiadn125);
	
	free(_lin__flag_tempQiadd011);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadd011[mz1][mz2]);
		}
		free(_flag_tempQiadd011[mz1]);
	}
	free(_flag_tempQiadd011);
	
	free(_lin__flag_tempQiadd012);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadd012[mz1][mz2]);
		}
		free(_flag_tempQiadd012[mz1]);
	}
	free(_flag_tempQiadd012);
	
	free(_lin__flag_tempQiadd013);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadd013[mz1][mz2]);
		}
		free(_flag_tempQiadd013[mz1]);
	}
	free(_flag_tempQiadd013);
	
	free(_lin__flag_tempQiadd014);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadd014[mz1][mz2]);
		}
		free(_flag_tempQiadd014[mz1]);
	}
	free(_flag_tempQiadd014);
	
	free(_lin__flag_tempQiadd015);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadd015[mz1][mz2]);
		}
		free(_flag_tempQiadd015[mz1]);
	}
	free(_flag_tempQiadd015);
	
	free(_lin__flag_tempQiadd101);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadd101[mz1][mz2]);
		}
		free(_flag_tempQiadd101[mz1]);
	}
	free(_flag_tempQiadd101);
	
	free(_lin__flag_tempQiadd102);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadd102[mz1][mz2]);
		}
		free(_flag_tempQiadd102[mz1]);
	}
	free(_flag_tempQiadd102);
	
	free(_lin__flag_tempQiadd103);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadd103[mz1][mz2]);
		}
		free(_flag_tempQiadd103[mz1]);
	}
	free(_flag_tempQiadd103);
	
	free(_lin__flag_tempQiadd104);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadd104[mz1][mz2]);
		}
		free(_flag_tempQiadd104[mz1]);
	}
	free(_flag_tempQiadd104);
	
	free(_lin__flag_tempQiadd105);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadd105[mz1][mz2]);
		}
		free(_flag_tempQiadd105[mz1]);
	}
	free(_flag_tempQiadd105);
	
	free(_lin__flag_tempQiadd111);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadd111[mz1][mz2]);
		}
		free(_flag_tempQiadd111[mz1]);
	}
	free(_flag_tempQiadd111);
	
	free(_lin__flag_tempQiadd112);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadd112[mz1][mz2]);
		}
		free(_flag_tempQiadd112[mz1]);
	}
	free(_flag_tempQiadd112);
	
	free(_lin__flag_tempQiadd113);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadd113[mz1][mz2]);
		}
		free(_flag_tempQiadd113[mz1]);
	}
	free(_flag_tempQiadd113);
	
	free(_lin__flag_tempQiadd114);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadd114[mz1][mz2]);
		}
		free(_flag_tempQiadd114[mz1]);
	}
	free(_flag_tempQiadd114);
	
	free(_lin__flag_tempQiadd115);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiadd115[mz1][mz2]);
		}
		free(_flag_tempQiadd115[mz1]);
	}
	free(_flag_tempQiadd115);
	
	free(_lin__flag_tempQir011);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQir011[mz1][mz2]);
		}
		free(_flag_tempQir011[mz1]);
	}
	free(_flag_tempQir011);
	
	free(_lin__flag_tempQir012);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQir012[mz1][mz2]);
		}
		free(_flag_tempQir012[mz1]);
	}
	free(_flag_tempQir012);
	
	free(_lin__flag_tempQir101);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQir101[mz1][mz2]);
		}
		free(_flag_tempQir101[mz1]);
	}
	free(_flag_tempQir101);
	
	free(_lin__flag_tempQir102);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQir102[mz1][mz2]);
		}
		free(_flag_tempQir102[mz1]);
	}
	free(_flag_tempQir102);
	
	free(_lin__flag_tempQir111);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQir111[mz1][mz2]);
		}
		free(_flag_tempQir111[mz1]);
	}
	free(_flag_tempQir111);
	
	free(_lin__flag_tempQir112);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQir112[mz1][mz2]);
		}
		free(_flag_tempQir112[mz1]);
	}
	free(_flag_tempQir112);
	
	free(_lin__flag_tempQiar011);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiar011[mz1][mz2]);
		}
		free(_flag_tempQiar011[mz1]);
	}
	free(_flag_tempQiar011);
	
	free(_lin__flag_tempQiar012);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiar012[mz1][mz2]);
		}
		free(_flag_tempQiar012[mz1]);
	}
	free(_flag_tempQiar012);
	
	free(_lin__flag_tempQiar013);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiar013[mz1][mz2]);
		}
		free(_flag_tempQiar013[mz1]);
	}
	free(_flag_tempQiar013);
	
	free(_lin__flag_tempQiar101);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiar101[mz1][mz2]);
		}
		free(_flag_tempQiar101[mz1]);
	}
	free(_flag_tempQiar101);
	
	free(_lin__flag_tempQiar102);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiar102[mz1][mz2]);
		}
		free(_flag_tempQiar102[mz1]);
	}
	free(_flag_tempQiar102);
	
	free(_lin__flag_tempQiar103);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiar103[mz1][mz2]);
		}
		free(_flag_tempQiar103[mz1]);
	}
	free(_flag_tempQiar103);
	
	free(_lin__flag_tempQiar111);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiar111[mz1][mz2]);
		}
		free(_flag_tempQiar111[mz1]);
	}
	free(_flag_tempQiar111);
	
	free(_lin__flag_tempQiar112);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiar112[mz1][mz2]);
		}
		free(_flag_tempQiar112[mz1]);
	}
	free(_flag_tempQiar112);
	
	free(_lin__flag_tempQiar113);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQiar113[mz1][mz2]);
		}
		free(_flag_tempQiar113[mz1]);
	}
	free(_flag_tempQiar113);
	
	free(_lin__flag_tempQilr011);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQilr011[mz1][mz2]);
		}
		free(_flag_tempQilr011[mz1]);
	}
	free(_flag_tempQilr011);
	
	free(_lin__flag_tempQilr012);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQilr012[mz1][mz2]);
		}
		free(_flag_tempQilr012[mz1]);
	}
	free(_flag_tempQilr012);
	
	free(_lin__flag_tempQilr101);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQilr101[mz1][mz2]);
		}
		free(_flag_tempQilr101[mz1]);
	}
	free(_flag_tempQilr101);
	
	free(_lin__flag_tempQilr102);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQilr102[mz1][mz2]);
		}
		free(_flag_tempQilr102[mz1]);
	}
	free(_flag_tempQilr102);
	
	free(_lin__flag_tempQilr111);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQilr111[mz1][mz2]);
		}
		free(_flag_tempQilr111[mz1]);
	}
	free(_flag_tempQilr111);
	
	free(_lin__flag_tempQilr112);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQilr112[mz1][mz2]);
		}
		free(_flag_tempQilr112[mz1]);
	}
	free(_flag_tempQilr112);
	
	free(_lin__flag_tempQi1);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQi1[mz1][mz2]);
		}
		free(_flag_tempQi1[mz1]);
	}
	free(_flag_tempQi1);
	
	free(_lin__flag_tempQi2);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQi2[mz1][mz2]);
		}
		free(_flag_tempQi2[mz1]);
	}
	free(_flag_tempQi2);
	
	free(_lin__flag_tempQia1);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQia1[mz1][mz2]);
		}
		free(_flag_tempQia1[mz1]);
	}
	free(_flag_tempQia1);
	
	free(_lin__flag_tempQia2);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQia2[mz1][mz2]);
		}
		free(_flag_tempQia2[mz1]);
	}
	free(_flag_tempQia2);
	
	free(_lin__flag_tempQia3);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQia3[mz1][mz2]);
		}
		free(_flag_tempQia3[mz1]);
	}
	free(_flag_tempQia3);
	
	free(_lin__flag_tempQia4);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQia4[mz1][mz2]);
		}
		free(_flag_tempQia4[mz1]);
	}
	free(_flag_tempQia4);
	
	free(_lin__flag_tempQia5);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQia5[mz1][mz2]);
		}
		free(_flag_tempQia5[mz1]);
	}
	free(_flag_tempQia5);
	
	free(_lin__flag_tempQia6);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQia6[mz1][mz2]);
		}
		free(_flag_tempQia6[mz1]);
	}
	free(_flag_tempQia6);
	
	free(_lin__flag_tempQib001);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQib001[mz1][mz2]);
		}
		free(_flag_tempQib001[mz1]);
	}
	free(_flag_tempQib001);
	
	free(_lin__flag_tempQib002);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQib002[mz1][mz2]);
		}
		free(_flag_tempQib002[mz1]);
	}
	free(_flag_tempQib002);
	
	free(_lin__flag_tempQib011);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQib011[mz1][mz2]);
		}
		free(_flag_tempQib011[mz1]);
	}
	free(_flag_tempQib011);
	
	free(_lin__flag_tempQib012);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQib012[mz1][mz2]);
		}
		free(_flag_tempQib012[mz1]);
	}
	free(_flag_tempQib012);
	
	free(_lin__flag_tempQib101);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQib101[mz1][mz2]);
		}
		free(_flag_tempQib101[mz1]);
	}
	free(_flag_tempQib101);
	
	free(_lin__flag_tempQib102);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQib102[mz1][mz2]);
		}
		free(_flag_tempQib102[mz1]);
	}
	free(_flag_tempQib102);
	
	free(_lin__flag_tempQib111);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQib111[mz1][mz2]);
		}
		free(_flag_tempQib111[mz1]);
	}
	free(_flag_tempQib111);
	
	free(_lin__flag_tempQib112);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQib112[mz1][mz2]);
		}
		free(_flag_tempQib112[mz1]);
	}
	free(_flag_tempQib112);
	
	free(_lin__flag_tempQinn011);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQinn011[mz1][mz2]);
		}
		free(_flag_tempQinn011[mz1]);
	}
	free(_flag_tempQinn011);
	
	free(_lin__flag_tempQinn021);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQinn021[mz1][mz2]);
		}
		free(_flag_tempQinn021[mz1]);
	}
	free(_flag_tempQinn021);
	
	free(_lin__flag_tempQinn101);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQinn101[mz1][mz2]);
		}
		free(_flag_tempQinn101[mz1]);
	}
	free(_flag_tempQinn101);
	
	free(_lin__flag_tempQinn111);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQinn111[mz1][mz2]);
		}
		free(_flag_tempQinn111[mz1]);
	}
	free(_flag_tempQinn111);
	
	free(_lin__flag_tempQinn121);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQinn121[mz1][mz2]);
		}
		free(_flag_tempQinn121[mz1]);
	}
	free(_flag_tempQinn121);
	
	free(_lin__flag_tempQinn201);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQinn201[mz1][mz2]);
		}
		free(_flag_tempQinn201[mz1]);
	}
	free(_flag_tempQinn201);
	
	free(_lin__flag_tempQinn211);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQinn211[mz1][mz2]);
		}
		free(_flag_tempQinn211[mz1]);
	}
	free(_flag_tempQinn211);
	
	free(_lin__flag_tempQinn221);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQinn221[mz1][mz2]);
		}
		free(_flag_tempQinn221[mz1]);
	}
	free(_flag_tempQinn221);
	
	free(_lin__flag_tempQidd011);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQidd011[mz1][mz2]);
		}
		free(_flag_tempQidd011[mz1]);
	}
	free(_flag_tempQidd011);
	
	free(_lin__flag_tempQidd101);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQidd101[mz1][mz2]);
		}
		free(_flag_tempQidd101[mz1]);
	}
	free(_flag_tempQidd101);
	
	free(_lin__flag_tempQidd111);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQidd111[mz1][mz2]);
		}
		free(_flag_tempQidd111[mz1]);
	}
	free(_flag_tempQidd111);
	
	free(_lin__flag_tempQidd012);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQidd012[mz1][mz2]);
		}
		free(_flag_tempQidd012[mz1]);
	}
	free(_flag_tempQidd012);
	
	free(_lin__flag_tempQidd102);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQidd102[mz1][mz2]);
		}
		free(_flag_tempQidd102[mz1]);
	}
	free(_flag_tempQidd102);
	
	free(_lin__flag_tempQidd112);
	for (mz1=0;mz1 < N; mz1++) {
		for (mz2=0;mz2 < N; mz2++) {
			free(_flag_tempQidd112[mz1][mz2]);
		}
		free(_flag_tempQidd112[mz1]);
	}
	free(_flag_tempQidd112);
}
double reduce_piRNAb2_Q00_1(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,i,d-1))*(eval_Qb0(N,M,MHL,d,e)))
	{
		//Domain
		//{i,j,d,e|MHL>=11 && jp>=ip+5 && ip>=0 && N>=ip+6 && N>=9 && M>=9 && N>=jp+1 && d>=i+1 && j>=d+4 && e>=d+4 && j>=e && j>=i+5 && N>=j+1 && d>=0 && i>=0 && N>=i+6 && N>=e+1 && N>=d+1 && ip==i && jp==j}
		int c3,c4;
		for(c3=ip+1;c3 <= jp-4;c3+=1)
		 {
		 	for(c4=c3+4;c4 <= jp;c4+=1)
		 	 {
		 	 	S0((ip),(jp),(c3),(c4));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Q00_2(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+(eval_Qb0(N,M,MHL,d,e))
	{
		//Domain
		//{i,j,d,e|d==i && N>=ip+6 && jp>=ip+5 && N>=9 && M>=9 && MHL>=11 && ip>=0 && N>=jp+1 && e>=i+4 && j>=e && j>=i+5 && N>=j+1 && N>=e+1 && i>=0 && N>=i+6 && ip==i && jp==j}
		int c4;
		for(c4=ip+4;c4 <= jp;c4+=1)
		 {
		 	S0((ip),(jp),(ip),(c4));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Q00_3(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+(eval_Qb0(N,M,MHL,d,e))
	{
		//Domain
		//{i,j,d,e|e==i+4 && d==i && j==i+4 && jp==ip+4 && N>=ip+5 && ip>=0 && N>=9 && M>=9 && MHL>=11 && N>=i+5 && i>=0 && ip==i && jp==j}
		S0((ip),(ip+4),(ip),(ip+4));
	}
	#undef S0
	return reduceVar;
}
double eval_Q00(long N, long M, long MHL, int i, int j){
	if ( _flag_Q00(i,j) == 'N' ) {
		_flag_Q00(i,j) = 'I';
	//Body for Q00
		Q00(i,j) = (((j >= i+5))?((1)+(reduce_piRNAb2_Q00_1(N,M,MHL,i,j)))+(reduce_piRNAb2_Q00_2(N,M,MHL,i,j)):(((j == i+4))?(1)+(reduce_piRNAb2_Q00_3(N,M,MHL,i,j)):(1)));
		_flag_Q00(i,j) = 'F';
	} else if ( _flag_Q00(i,j) == 'I' ) {
		printf("There is a self dependence on Q00 at (%d,%d) \n",i,j);
		exit(-1);
	}
	return Q00(i,j);
}
double reduce_piRNAb2_Q10_1(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+(((eval_Q10(N,M,MHL,i,d-1))*(eval_Qb0(N,M,MHL,d,e)))*(ekissing(0,(j)-(e),1)))
	{
		//Domain
		//{i,j,d,e|MHL>=11 && jp>=ip+5 && ip>=0 && N>=ip+6 && N>=9 && M>=9 && N>=jp+1 && d>=i+1 && j>=d+4 && e>=d+4 && j>=e && j>=i+5 && N>=j+1 && d>=0 && i>=0 && N>=i+6 && N>=e+1 && N>=d+1 && ip==i && jp==j}
		int c3,c4;
		for(c3=ip+1;c3 <= jp-4;c3+=1)
		 {
		 	for(c4=c3+4;c4 <= jp;c4+=1)
		 	 {
		 	 	S0((ip),(jp),(c3),(c4));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Q10_2(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+((eval_Qb0(N,M,MHL,d,e))*(ekissing(0,(j)-(e),1)))
	{
		//Domain
		//{i,j,d,e|d==i && N>=ip+6 && jp>=ip+5 && N>=9 && M>=9 && MHL>=11 && ip>=0 && N>=jp+1 && e>=i+4 && j>=e && j>=i+5 && N>=j+1 && N>=e+1 && i>=0 && N>=i+6 && ip==i && jp==j}
		int c4;
		for(c4=ip+4;c4 <= jp;c4+=1)
		 {
		 	S0((ip),(jp),(ip),(c4));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Q10_3(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+((eval_Qb0(N,M,MHL,d,e))*(ekissing(0,(j)-(e),1)))
	{
		//Domain
		//{i,j,d,e|e==i+4 && d==i && j==i+4 && jp==ip+4 && N>=ip+5 && ip>=0 && N>=9 && M>=9 && MHL>=11 && N>=i+5 && i>=0 && ip==i && jp==j}
		S0((ip),(ip+4),(ip),(ip+4));
	}
	#undef S0
	return reduceVar;
}
double eval_Q10(long N, long M, long MHL, int i, int j){
	if ( _flag_Q10(i,j) == 'N' ) {
		_flag_Q10(i,j) = 'I';
	//Body for Q10
		Q10(i,j) = (((j >= i+5))?((ekissing(0,((j)-(i))+(1),0))+(reduce_piRNAb2_Q10_1(N,M,MHL,i,j)))+(reduce_piRNAb2_Q10_2(N,M,MHL,i,j)):(((j == i+4))?(ekissing(0,((j)-(i))+(1),0))+(reduce_piRNAb2_Q10_3(N,M,MHL,i,j)):(ekissing(0,((j)-(i))+(1),0))));
		_flag_Q10(i,j) = 'F';
	} else if ( _flag_Q10(i,j) == 'I' ) {
		printf("There is a self dependence on Q10 at (%d,%d) \n",i,j);
		exit(-1);
	}
	return Q10(i,j);
}
double reduce_piRNAb2_Q20_1(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+(((eval_Q20(N,M,MHL,i,d-1))*(eval_Qb0(N,M,MHL,d,e)))*(emulti(0,(j)-(e),1)))
	{
		//Domain
		//{i,j,d,e|MHL>=11 && jp>=ip+5 && ip>=0 && N>=ip+6 && N>=9 && M>=9 && N>=jp+1 && d>=i+1 && j>=d+4 && e>=d+4 && j>=e && j>=i+5 && N>=j+1 && d>=0 && i>=0 && N>=i+6 && N>=e+1 && N>=d+1 && ip==i && jp==j}
		int c3,c4;
		for(c3=ip+1;c3 <= jp-4;c3+=1)
		 {
		 	for(c4=c3+4;c4 <= jp;c4+=1)
		 	 {
		 	 	S0((ip),(jp),(c3),(c4));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Q20_2(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+((eval_Qb0(N,M,MHL,d,e))*(emulti(0,(j)-(e),1)))
	{
		//Domain
		//{i,j,d,e|d==i && N>=ip+6 && jp>=ip+5 && N>=9 && M>=9 && MHL>=11 && ip>=0 && N>=jp+1 && e>=i+4 && j>=e && j>=i+5 && N>=j+1 && N>=e+1 && i>=0 && N>=i+6 && ip==i && jp==j}
		int c4;
		for(c4=ip+4;c4 <= jp;c4+=1)
		 {
		 	S0((ip),(jp),(ip),(c4));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Q20_3(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+((eval_Qb0(N,M,MHL,d,e))*(emulti(0,(j)-(e),1)))
	{
		//Domain
		//{i,j,d,e|e==i+4 && d==i && j==i+4 && jp==ip+4 && N>=ip+5 && ip>=0 && N>=9 && M>=9 && MHL>=11 && N>=i+5 && i>=0 && ip==i && jp==j}
		S0((ip),(ip+4),(ip),(ip+4));
	}
	#undef S0
	return reduceVar;
}
double eval_Q20(long N, long M, long MHL, int i, int j){
	if ( _flag_Q20(i,j) == 'N' ) {
		_flag_Q20(i,j) = 'I';
	//Body for Q20
		Q20(i,j) = (((j >= i+5))?((emulti(0,((j)-(i))+(1),0))+(reduce_piRNAb2_Q20_1(N,M,MHL,i,j)))+(reduce_piRNAb2_Q20_2(N,M,MHL,i,j)):(((j == i+4))?(emulti(0,((j)-(i))+(1),0))+(reduce_piRNAb2_Q20_3(N,M,MHL,i,j)):(emulti(0,((j)-(i))+(1),0))));
		_flag_Q20(i,j) = 'F';
	} else if ( _flag_Q20(i,j) == 'I' ) {
		printf("There is a self dependence on Q20 at (%d,%d) \n",i,j);
		exit(-1);
	}
	return Q20(i,j);
}
double reduce_piRNAb2_Qm00_1(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+(((eval_Qm00(N,M,MHL,i,d-1))*(eval_Qb0(N,M,MHL,d,e)))+(eval_Qb0(N,M,MHL,d,e)))
	{
		//Domain
		//{i,j,d,e|MHL>=11 && jp>=ip+5 && ip>=0 && N>=ip+6 && N>=9 && M>=9 && N>=jp+1 && d>=i+1 && j>=d+4 && e>=d+4 && j>=e && j>=i+5 && N>=j+1 && d>=0 && i>=0 && N>=i+6 && N>=e+1 && N>=d+1 && ip==i && jp==j}
		int c3,c4;
		for(c3=ip+1;c3 <= jp-4;c3+=1)
		 {
		 	for(c4=c3+4;c4 <= jp;c4+=1)
		 	 {
		 	 	S0((ip),(jp),(c3),(c4));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qm00_2(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+(eval_Qb0(N,M,MHL,d,e))
	{
		//Domain
		//{i,j,d,e|d==i && N>=ip+6 && jp>=ip+5 && N>=9 && M>=9 && MHL>=11 && ip>=0 && N>=jp+1 && e>=i+4 && j>=e && j>=i+5 && N>=j+1 && N>=e+1 && i>=0 && N>=i+6 && ip==i && jp==j}
		int c4;
		for(c4=ip+4;c4 <= jp;c4+=1)
		 {
		 	S0((ip),(jp),(ip),(c4));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qm00_3(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+(eval_Qb0(N,M,MHL,d,e))
	{
		//Domain
		//{i,j,d,e|e==i+4 && d==i && j==i+4 && jp==ip+4 && N>=ip+5 && ip>=0 && N>=9 && M>=9 && MHL>=11 && N>=i+5 && i>=0 && ip==i && jp==j}
		S0((ip),(ip+4),(ip),(ip+4));
	}
	#undef S0
	return reduceVar;
}
double eval_Qm00(long N, long M, long MHL, int i, int j){
	if ( _flag_Qm00(i,j) == 'N' ) {
		_flag_Qm00(i,j) = 'I';
	//Body for Qm00
		Qm00(i,j) = (((j >= i+5))?(reduce_piRNAb2_Qm00_1(N,M,MHL,i,j))+(reduce_piRNAb2_Qm00_2(N,M,MHL,i,j)):(((j == i+4))?reduce_piRNAb2_Qm00_3(N,M,MHL,i,j):(0)));
		_flag_Qm00(i,j) = 'F';
	} else if ( _flag_Qm00(i,j) == 'I' ) {
		printf("There is a self dependence on Qm00 at (%d,%d) \n",i,j);
		exit(-1);
	}
	return Qm00(i,j);
}
double reduce_piRNAb2_Qm10_1(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+((((eval_Qm10(N,M,MHL,i,d-1))*(eval_Qb0(N,M,MHL,d,e)))*(ekissing(0,(j)-(e),1)))+((eval_Qb0(N,M,MHL,d,e))*(ekissing(0,((j)-(i))-((e)-(d)),1))))
	{
		//Domain
		//{i,j,d,e|MHL>=11 && jp>=ip+5 && ip>=0 && N>=ip+6 && N>=9 && M>=9 && N>=jp+1 && d>=i+1 && j>=d+4 && e>=d+4 && j>=e && j>=i+5 && N>=j+1 && d>=0 && i>=0 && N>=i+6 && N>=e+1 && N>=d+1 && ip==i && jp==j}
		int c3,c4;
		for(c3=ip+1;c3 <= jp-4;c3+=1)
		 {
		 	for(c4=c3+4;c4 <= jp;c4+=1)
		 	 {
		 	 	S0((ip),(jp),(c3),(c4));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qm10_2(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+((eval_Qb0(N,M,MHL,d,e))*(ekissing(0,((j)-(i))-((e)-(d)),1)))
	{
		//Domain
		//{i,j,d,e|d==i && N>=ip+6 && jp>=ip+5 && N>=9 && M>=9 && MHL>=11 && ip>=0 && N>=jp+1 && e>=i+4 && j>=e && j>=i+5 && N>=j+1 && N>=e+1 && i>=0 && N>=i+6 && ip==i && jp==j}
		int c4;
		for(c4=ip+4;c4 <= jp;c4+=1)
		 {
		 	S0((ip),(jp),(ip),(c4));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qm10_3(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+((eval_Qb0(N,M,MHL,d,e))*(ekissing(0,((j)-(i))-((e)-(d)),1)))
	{
		//Domain
		//{i,j,d,e|e==i+4 && d==i && j==i+4 && jp==ip+4 && N>=ip+5 && ip>=0 && N>=9 && M>=9 && MHL>=11 && N>=i+5 && i>=0 && ip==i && jp==j}
		S0((ip),(ip+4),(ip),(ip+4));
	}
	#undef S0
	return reduceVar;
}
double eval_Qm10(long N, long M, long MHL, int i, int j){
	if ( _flag_Qm10(i,j) == 'N' ) {
		_flag_Qm10(i,j) = 'I';
	//Body for Qm10
		Qm10(i,j) = (((j >= i+5))?(reduce_piRNAb2_Qm10_1(N,M,MHL,i,j))+(reduce_piRNAb2_Qm10_2(N,M,MHL,i,j)):(((j == i+4))?reduce_piRNAb2_Qm10_3(N,M,MHL,i,j):(0)));
		_flag_Qm10(i,j) = 'F';
	} else if ( _flag_Qm10(i,j) == 'I' ) {
		printf("There is a self dependence on Qm10 at (%d,%d) \n",i,j);
		exit(-1);
	}
	return Qm10(i,j);
}
double reduce_piRNAb2_Qm20_1(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+((((eval_Qm20(N,M,MHL,i,d-1))*(eval_Qb0(N,M,MHL,d,e)))*(emulti(0,(j)-(e),1)))+((eval_Qb0(N,M,MHL,d,e))*(emulti(0,((j)-(i))-((e)-(d)),1))))
	{
		//Domain
		//{i,j,d,e|MHL>=11 && jp>=ip+5 && ip>=0 && N>=ip+6 && N>=9 && M>=9 && N>=jp+1 && d>=i+1 && j>=d+4 && e>=d+4 && j>=e && j>=i+5 && N>=j+1 && d>=0 && i>=0 && N>=i+6 && N>=e+1 && N>=d+1 && ip==i && jp==j}
		int c3,c4;
		for(c3=ip+1;c3 <= jp-4;c3+=1)
		 {
		 	for(c4=c3+4;c4 <= jp;c4+=1)
		 	 {
		 	 	S0((ip),(jp),(c3),(c4));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qm20_2(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+((eval_Qb0(N,M,MHL,d,e))*(emulti(0,((j)-(i))-((e)-(d)),1)))
	{
		//Domain
		//{i,j,d,e|d==i && N>=ip+6 && jp>=ip+5 && N>=9 && M>=9 && MHL>=11 && ip>=0 && N>=jp+1 && e>=i+4 && j>=e && j>=i+5 && N>=j+1 && N>=e+1 && i>=0 && N>=i+6 && ip==i && jp==j}
		int c4;
		for(c4=ip+4;c4 <= jp;c4+=1)
		 {
		 	S0((ip),(jp),(ip),(c4));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qm20_3(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+((eval_Qb0(N,M,MHL,d,e))*(emulti(0,((j)-(i))-((e)-(d)),1)))
	{
		//Domain
		//{i,j,d,e|e==i+4 && d==i && j==i+4 && jp==ip+4 && N>=ip+5 && ip>=0 && N>=9 && M>=9 && MHL>=11 && N>=i+5 && i>=0 && ip==i && jp==j}
		S0((ip),(ip+4),(ip),(ip+4));
	}
	#undef S0
	return reduceVar;
}
double eval_Qm20(long N, long M, long MHL, int i, int j){
	if ( _flag_Qm20(i,j) == 'N' ) {
		_flag_Qm20(i,j) = 'I';
	//Body for Qm20
		Qm20(i,j) = (((j >= i+5))?(reduce_piRNAb2_Qm20_1(N,M,MHL,i,j))+(reduce_piRNAb2_Qm20_2(N,M,MHL,i,j)):(((j == i+4))?reduce_piRNAb2_Qm20_3(N,M,MHL,i,j):(0)));
		_flag_Qm20(i,j) = 'F';
	} else if ( _flag_Qm20(i,j) == 'I' ) {
		printf("There is a self dependence on Qm20 at (%d,%d) \n",i,j);
		exit(-1);
	}
	return Qm20(i,j);
}
double reduce_piRNAb2_Qb0_1(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+((((eval_Qm20(N,M,MHL,i+1,d-1))*(eval_Qb0(N,M,MHL,d,e)))*(emulti(1,((j)-(e))-(1),1)))+((esbi0(i,j,d,e))*(eval_Qb0(N,M,MHL,d,e))))
	{
		//Domain
		//{i,j,d,e|MHL>=11 && jp>=ip+7 && ip>=0 && N>=ip+7 && N>=9 && M>=9 && N>=jp+1 && d>=i+2 && j>=d+5 && e>=d+4 && j>=e+1 && j>=i+7 && N>=j+1 && d>=0 && i>=0 && N>=i+7 && N>=e+1 && N>=d+1 && ip==i && jp==j}
		int c3,c4;
		for(c3=ip+2;c3 <= jp-5;c3+=1)
		 {
		 	for(c4=c3+4;c4 <= jp-1;c4+=1)
		 	 {
		 	 	S0((ip),(jp),(c3),(c4));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qb0_2(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+((esbi0(i,j,d,e))*(eval_Qb0(N,M,MHL,d,e)))
	{
		//Domain
		//{i,j,d,e|d==i+1 && N>=ip+7 && jp>=ip+7 && N>=9 && M>=9 && MHL>=11 && ip>=0 && N>=jp+1 && e>=i+5 && j>=e+1 && j>=i+7 && N>=j+1 && N>=e+1 && i>=0 && N>=i+7 && ip==i && jp==j}
		int c4;
		for(c4=ip+5;c4 <= jp-1;c4+=1)
		 {
		 	S0((ip),(jp),(ip+1),(c4));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qb0_3(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+((esbi0(i,j,d,e))*(eval_Qb0(N,M,MHL,d,e)))
	{
		//Domain
		//{i,j,d,e|e==i+5 && d==i+1 && j==i+6 && jp==ip+6 && N>=ip+7 && ip>=0 && N>=9 && M>=9 && MHL>=11 && N>=i+7 && i>=0 && ip==i && jp==j}
		S0((ip),(ip+6),(ip+1),(ip+5));
	}
	#undef S0
	return reduceVar;
}
double eval_Qb0(long N, long M, long MHL, int i, int j){
	if ( _flag_Qb0(i,j) == 'N' ) {
		_flag_Qb0(i,j) = 'I';
	//Body for Qb0
		Qb0(i,j) = ((base_pair(seq0(i),seq0(j)))?((((j >= i+7))?((eh0(i,j))+(reduce_piRNAb2_Qb0_1(N,M,MHL,i,j)))+(reduce_piRNAb2_Qb0_2(N,M,MHL,i,j)):(((j == i+6))?(eh0(i,j))+(reduce_piRNAb2_Qb0_3(N,M,MHL,i,j)):(((i >= j-5 && j >= i+4))?eh0(i,j):(0))))):(0));
		_flag_Qb0(i,j) = 'F';
	} else if ( _flag_Qb0(i,j) == 'I' ) {
		printf("There is a self dependence on Qb0 at (%d,%d) \n",i,j);
		exit(-1);
	}
	return Qb0(i,j);
}
double eval_Qg0(long N, long M, long MHL, int i, int j, int d, int e){
	if ( _flag_Qg0(i,j,d,e) == 'N' ) {
		_flag_Qg0(i,j,d,e) = 'I';
	//Body for Qg0
		Qg0(i,j,d,e) = (((base_pair(seq0(i),seq0(j)))&&(base_pair(seq0(d),seq0(e))))?((((e == j-1 && d >= i+2))?(esbi0(i,j,d,e))+((eval_Qm20(N,M,MHL,i+1,d-1))*(emulti(1,((j)-(e))-(1),1))):(((d == i+1 && j >= e+2))?(esbi0(i,j,d,e))+((eval_Qm20(N,M,MHL,e+1,j-1))*(emulti(1,((d)-(i))-(1),1))):(((j >= e+2 && d >= i+2))?(((((esbi0(i,j,d,e))+((eval_Qm20(N,M,MHL,e+1,j-1))*(emulti(1,((d)-(i))-(1),1))))+((eval_Qm20(N,M,MHL,i+1,d-1))*(emulti(1,((j)-(e))-(1),1))))+(((eval_Qm20(N,M,MHL,i+1,d-1))*(eval_Qm20(N,M,MHL,e+1,j-1)))*(emulti(1,0,1))))+((eval_Qg0(N,M,MHL,i+1,j-1,d,e))*(esbi0(i,j,i+1,j-1))))+(eval_tempqg0(N,M,MHL,i,j,d,e)):(((e == j-1 && d == i+1 && j >= i+7))?esbi0(i,j,d,e):(((e == i+5 && d == i+1 && j == i+6))?esbi0(i,j,d,e):(0))))))):((((base_pair(seq0(i),seq0(j)))&&(!(base_pair(seq0(d),seq0(e)))))?((((e == j-1 && d == i+1))?esbi0(i,j,d,e):(0))):(0))));
		_flag_Qg0(i,j,d,e) = 'F';
	} else if ( _flag_Qg0(i,j,d,e) == 'I' ) {
		printf("There is a self dependence on Qg0 at (%d,%d,%d,%d) \n",i,j,d,e);
		exit(-1);
	}
	return Qg0(i,j,d,e);
}
double reduce_piRNAb2_tempqg0_1(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((((eval_Qg0(N,M,MHL,h,f,d,e))*(esbi0(i,j,h,f)))+((((eval_Qm20(N,M,MHL,i+1,h-1))*(eval_Qm20(N,M,MHL,f+1,j-1)))*(emulti(1,0,1)))*(eval_Qg0(N,M,MHL,h,f,d,e))))+(((eval_Qm20(N,M,MHL,f+1,j-1))*(emulti(1,((h)-(i))-(1),1)))*(eval_Qg0(N,M,MHL,h,f,d,e))))+(((eval_Qm20(N,M,MHL,i+1,h-1))*(emulti(1,((j)-(f))-(1),1)))*(eval_Qg0(N,M,MHL,h,f,d,e))))
	{
		//Domain
		//{i,j,d,e,h,f|ep>=dp+4 && dp>=ip+3 && N>=jp+1 && jp>=ep+3 && ip>=0 && M>=9 && MHL>=11 && N>=9 && h>=i+2 && d>=h+1 && f>=e+1 && j>=f+2 && d>=i+3 && j>=e+3 && i>=0 && h>=0 && N>=h+1 && f>=h && N>=f+2 && f>=-1 && f>=d+5 && e>=d+4 && N>=j+1 && N>=i+2 && ip==i && jp==j && dp==d && ep==e}
		int c5,c6;
		for(c5=ip+2;c5 <= dp-1;c5+=1)
		 {
		 	for(c6=ep+1;c6 <= jp-2;c6+=1)
		 	 {
		 	 	S0((ip),(jp),(dp),(ep),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqg0_2(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Qg0(N,M,MHL,h,f,d,e))*(esbi0(i,j,h,f)))+(((eval_Qm20(N,M,MHL,f+1,j-1))*(emulti(1,((h)-(i))-(1),1)))*(eval_Qg0(N,M,MHL,h,f,d,e))))
	{
		//Domain
		//{i,j,d,e,h,f|h==i+1 && ep>=dp+4 && jp>=ep+3 && N>=9 && M>=9 && MHL>=11 && ip>=0 && dp>=ip+3 && N>=jp+1 && f>=e+1 && j>=f+2 && j>=e+3 && f>=-1 && N>=j+1 && i>=0 && N>=i+2 && f>=i+1 && N>=f+2 && d>=i+3 && f>=d+5 && e>=d+4 && ip==i && jp==j && dp==d && ep==e}
		int c6;
		for(c6=ep+1;c6 <= jp-2;c6+=1)
		 {
		 	S0((ip),(jp),(dp),(ep),(ip+1),(c6));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqg0_3(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Qg0(N,M,MHL,h,f,d,e))*(esbi0(i,j,h,f)))+(((eval_Qm20(N,M,MHL,i+1,h-1))*(emulti(1,((j)-(f))-(1),1)))*(eval_Qg0(N,M,MHL,h,f,d,e))))
	{
		//Domain
		//{i,j,d,e,h,f|f==j-1 && N>=jp+1 && dp>=ip+3 && N>=9 && M>=9 && MHL>=11 && ip>=0 && jp>=ep+3 && ep>=dp+4 && h>=i+2 && d>=h+1 && d>=i+3 && i>=0 && j>=e+3 && h>=0 && N>=h+1 && j>=h+1 && N>=j+1 && N>=i+2 && j>=d+6 && e>=d+4 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+2;c5 <= dp-1;c5+=1)
		 {
		 	S0((ip),(jp),(dp),(ep),(c5),(jp-1));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqg0_4(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Qg0(N,M,MHL,h,f,d,e))*(esbi0(i,j,h,f)))+(((eval_Qm20(N,M,MHL,f+1,j-1))*(emulti(1,((h)-(i))-(1),1)))*(eval_Qg0(N,M,MHL,h,f,d,e))))
	{
		//Domain
		//{i,j,d,e,h,f|h==i+1 && d==i+2 && dp==ip+2 && ep>=ip+6 && jp>=ep+3 && N>=9 && M>=9 && MHL>=11 && ip>=0 && N>=jp+1 && f>=e+1 && j>=f+2 && j>=e+3 && e>=i+6 && N>=j+1 && i>=0 && N>=i+2 && f>=i+7 && N>=f+2 && f>=-1 && ip==i && jp==j && dp==d && ep==e}
		int c6;
		for(c6=ep+1;c6 <= jp-2;c6+=1)
		 {
		 	S0((ip),(jp),(ip+2),(ep),(ip+1),(c6));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqg0_5(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Qg0(N,M,MHL,h,f,d,e))*(esbi0(i,j,h,f)))+(((eval_Qm20(N,M,MHL,i+1,h-1))*(emulti(1,((j)-(f))-(1),1)))*(eval_Qg0(N,M,MHL,h,f,d,e))))
	{
		//Domain
		//{i,j,d,e,h,f|f==j-1 && e==j-2 && ep==jp-2 && N>=jp+1 && dp>=ip+3 && N>=9 && M>=9 && MHL>=11 && ip>=0 && jp>=dp+6 && h>=i+2 && d>=h+1 && d>=i+3 && i>=0 && j>=d+6 && h>=0 && N>=h+1 && j>=h+1 && N>=j+1 && N>=i+2 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+2;c5 <= dp-1;c5+=1)
		 {
		 	S0((ip),(jp),(dp),(jp-2),(c5),(jp-1));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempqg0(long N, long M, long MHL, int i, int j, int d, int e){
	if ( _flag_tempqg0(i,j,d,e) == 'N' ) {
		_flag_tempqg0(i,j,d,e) = 'I';
	//Body for tempqg0
		tempqg0(i,j,d,e) = (((d >= i+3 && j >= e+3))?((reduce_piRNAb2_tempqg0_1(N,M,MHL,i,j,d,e))+(reduce_piRNAb2_tempqg0_2(N,M,MHL,i,j,d,e)))+(reduce_piRNAb2_tempqg0_3(N,M,MHL,i,j,d,e)):(((d == i+2 && j >= e+3))?reduce_piRNAb2_tempqg0_4(N,M,MHL,i,j,d,e):(((e == j-2 && d >= i+3))?reduce_piRNAb2_tempqg0_5(N,M,MHL,i,j,d,e):(0))));
		_flag_tempqg0(i,j,d,e) = 'F';
	} else if ( _flag_tempqg0(i,j,d,e) == 'I' ) {
		printf("There is a self dependence on tempqg0 at (%d,%d,%d,%d) \n",i,j,d,e);
		exit(-1);
	}
	return tempqg0(i,j,d,e);
}
double eval_Qgk0(long N, long M, long MHL, int i, int j, int d, int e){
	if ( _flag_Qgk0(i,j,d,e) == 'N' ) {
		_flag_Qgk0(i,j,d,e) = 'I';
	//Body for Qgk0
		Qgk0(i,j,d,e) = (((base_pair(seq0(i),seq0(j)))&&((j)>((i)+(3))))?((((j >= e+1 && d >= i+1))?(((eval_Q10(N,M,MHL,i+1,d))*(eval_Q10(N,M,MHL,e,j-1)))*(ekissing(0,0,1)))+(eval_tempqgk0(N,M,MHL,i,j,d,e)):(((e == j && d >= i+1))?(eval_Q10(N,M,MHL,i+1,d))*(ekissing(0,0,1)):(((d == i && j >= e+1))?(eval_Q10(N,M,MHL,e,j-1))*(ekissing(0,0,1)):(ekissing(0,0,1)))))):(0));
		_flag_Qgk0(i,j,d,e) = 'F';
	} else if ( _flag_Qgk0(i,j,d,e) == 'I' ) {
		printf("There is a self dependence on Qgk0 at (%d,%d,%d,%d) \n",i,j,d,e);
		exit(-1);
	}
	return Qgk0(i,j,d,e);
}
double reduce_piRNAb2_tempqgk0_1(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q10(N,M,MHL,e,f-1))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|h==i+1 && d==i+1 && dp==ip+1 && ip>=0 && jp>=ip+6 && N>=9 && M>=9 && MHL>=11 && ep>=0 && ep>=ip+3 && jp>=ep+2 && N>=jp+1 && ip>=ep-4 && f>=i+5 && j>=f+1 && j>=e+2 && i>=e-4 && N>=i+1 && e>=0 && N>=e+1 && f>=e+1 && N>=f && j>=i+6 && e>=i+3 && N>=j+1 && i>=0 && ip==i && jp==j && dp==d && ep==e}
		int c6;
		for(c6=ip+5;c6 <= jp-1;c6+=1)
		 {
		 	S0((ip),(jp),(ip+1),(ep),(ip+1),(c6));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgk0_2(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+((((eval_Q10(N,M,MHL,h+1,d))*(eval_Q10(N,M,MHL,e,f-1)))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==i+5 && h==i+1 && e==i+4 && d==i+2 && j==i+6 && ep==ip+4 && dp==ip+2 && jp==ip+6 && N>=ip+7 && ip>=0 && MHL>=11 && M>=9 && N>=9 && N>=i+7 && i>=0 && ip==i && jp==j && dp==d && ep==e}
		S0((ip),(ip+6),(ip+2),(ip+4),(ip+1),(ip+5));
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgk0_3(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+((((eval_Q10(N,M,MHL,h+1,d))*(eval_Q10(N,M,MHL,e,f-1)))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|h==i+1 && e==i+4 && d==i+2 && ep==ip+4 && dp==ip+2 && N>=ip+3 && ip>=0 && N>=jp+1 && jp>=ip+7 && N>=9 && M>=9 && MHL>=11 && N>=f && f>=i+5 && i>=0 && j>=f+1 && N>=j+1 && N>=i+5 && j>=i+7 && ip==i && jp==j && dp==d && ep==e}
		int c6;
		for(c6=ip+5;c6 <= jp-1;c6+=1)
		 {
		 	S0((ip),(jp),(ip+2),(ip+4),(ip+1),(c6));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgk0_4(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q10(N,M,MHL,e,f-1))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|h==i+2 && e==i+4 && d==i+2 && ep==ip+4 && dp==ip+2 && ip>=0 && jp>=ip+7 && N>=9 && M>=9 && MHL>=11 && N>=jp+1 && N>=ip+3 && f>=i+6 && j>=f+1 && j>=i+7 && N>=f && N>=j+1 && i>=0 && N>=i+5 && ip==i && jp==j && dp==d && ep==e}
		int c6;
		for(c6=ip+6;c6 <= jp-1;c6+=1)
		 {
		 	S0((ip),(jp),(ip+2),(ip+4),(ip+2),(c6));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgk0_5(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+((((eval_Q10(N,M,MHL,h+1,d))*(eval_Q10(N,M,MHL,e,f-1)))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|ip>=0 && dp>=ip+2 && N>=dp+1 && jp>=ep+2 && jp>=ip+6 && N>=9 && M>=9 && MHL>=11 && N>=jp+1 && ep>=0 && ep>=ip+5 && N>=ip+1 && ep>=dp+4 && jp>=dp+5 && h>=i+1 && d>=h+1 && f>=e+1 && j>=f+1 && f>=h+4 && e>=i+5 && j>=e+2 && e>=d+4 && h>=-1 && N>=h+2 && j>=h+5 && N>=d+1 && N>=j+1 && j>=i+6 && N>=i+1 && e>=0 && N>=e+1 && i>=0 && N>=f && j>=d+5 && d>=i+2 && ip==i && jp==j && dp==d && ep==e}
		int c5,c6;
		for(c5=ip+1;c5 <= dp-1;c5+=1)
		 {
		 	for(c6=ep+1;c6 <= jp-1;c6+=1)
		 	 {
		 	 	S0((ip),(jp),(dp),(ep),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgk0_6(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q10(N,M,MHL,e,f-1))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|h==d && N>=jp+1 && jp>=ep+2 && jp>=dp+5 && N>=9 && M>=9 && MHL>=11 && ep>=0 && dp>=ip+2 && ip>=0 && ep>=ip+5 && N>=ip+1 && N>=dp+1 && ep>=dp+4 && jp>=ip+6 && f>=e+1 && j>=f+1 && f>=d+4 && e>=i+5 && N>=d+1 && j>=e+2 && e>=0 && N>=e+1 && j>=d+5 && N>=f && d>=i+2 && N>=j+1 && j>=i+6 && i>=0 && N>=i+1 && e>=d+4 && ip==i && jp==j && dp==d && ep==e}
		int c6;
		for(c6=ep+1;c6 <= jp-1;c6+=1)
		 {
		 	S0((ip),(jp),(dp),(ep),(dp),(c6));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgk0_7(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q10(N,M,MHL,h+1,d))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==e && N>=dp+1 && dp>=ip+2 && ep>=ip+5 && N>=9 && M>=9 && MHL>=11 && ip>=0 && N>=jp+1 && jp>=ep+2 && ep>=dp+4 && N>=ip+1 && jp>=dp+5 && ep>=0 && jp>=ip+6 && h>=i+1 && d>=h+1 && e>=h+4 && e>=d+4 && j>=d+5 && e>=i+5 && h>=-1 && N>=h+2 && j>=e+2 && N>=d+1 && j>=h+5 && N>=j+1 && j>=i+6 && i>=0 && N>=i+1 && e>=0 && d>=i+2 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+1;c5 <= dp-1;c5+=1)
		 {
		 	S0((ip),(jp),(dp),(ep),(c5),(ep));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgk0_8(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q10(N,M,MHL,e,f-1))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|h==i+1 && d==i+1 && dp==ip+1 && N>=jp+1 && jp>=ep+2 && jp>=ip+6 && N>=9 && M>=9 && MHL>=11 && ep>=0 && N>=ip+1 && ip>=0 && ep>=ip+5 && f>=e+1 && j>=f+1 && f>=i+5 && N>=i+1 && i>=0 && e>=i+5 && e>=0 && N>=e+1 && j>=i+6 && N>=f && j>=e+2 && N>=j+1 && ip==i && jp==j && dp==d && ep==e}
		int c6;
		for(c6=ep+1;c6 <= jp-1;c6+=1)
		 {
		 	S0((ip),(jp),(ip+1),(ep),(ip+1),(c6));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgk0_9(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q10(N,M,MHL,h+1,d))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==j-1 && e==j-1 && ep==jp-1 && N>=dp+1 && dp>=ip+2 && jp>=ip+6 && N>=9 && M>=9 && MHL>=11 && ip>=0 && N>=jp+1 && N>=ip+1 && jp>=dp+5 && h>=i+1 && d>=h+1 && j>=h+5 && N>=i+1 && i>=0 && j>=i+6 && h>=-1 && N>=h+2 && d>=i+2 && N>=d+1 && j>=d+5 && N>=j+1 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+1;c5 <= dp-1;c5+=1)
		 {
		 	S0((ip),(jp),(dp),(jp-1),(c5),(jp-1));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgk0_10(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+((((eval_Q10(N,M,MHL,h+1,d))*(eval_Q10(N,M,MHL,e,f-1)))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|e==d+3 && ep==dp+3 && ip>=0 && dp>=ip+2 && N>=dp+1 && jp>=dp+5 && jp>=ip+6 && N>=9 && M>=9 && MHL>=11 && N>=jp+1 && dp>=-3 && h>=i+1 && d>=h+1 && f>=d+4 && j>=f+1 && f>=h+4 && d>=i+2 && N>=f && i>=0 && h>=-1 && N>=h+2 && j>=h+5 && N>=d+4 && N>=j+1 && j>=i+6 && N>=i+1 && d>=-3 && j>=d+5 && ip==i && jp==j && dp==d && ep==e}
		int c5,c6;
		for(c5=ip+1;c5 <= dp-1;c5+=1)
		 {
		 	for(c6=dp+4;c6 <= jp-1;c6+=1)
		 	 {
		 	 	S0((ip),(jp),(dp),(dp+3),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgk0_11(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q10(N,M,MHL,e,f-1))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|h==d && e==d+3 && ep==dp+3 && N>=jp+1 && jp>=dp+5 && dp>=-3 && N>=9 && M>=9 && MHL>=11 && jp>=ip+6 && dp>=ip+2 && ip>=0 && N>=dp+1 && f>=d+4 && j>=f+1 && N>=d+4 && N>=i+1 && j>=i+6 && N>=j+1 && d>=-3 && i>=0 && j>=d+5 && N>=f && d>=i+2 && ip==i && jp==j && dp==d && ep==e}
		int c6;
		for(c6=dp+4;c6 <= jp-1;c6+=1)
		 {
		 	S0((ip),(jp),(dp),(dp+3),(dp),(c6));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgk0_12(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q10(N,M,MHL,h+1,d))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==d+3 && e==d+3 && ep==dp+3 && N>=dp+1 && dp>=ip+2 && dp>=-3 && N>=9 && M>=9 && MHL>=11 && ip>=0 && N>=jp+1 && jp>=dp+5 && jp>=ip+6 && h>=i+1 && d>=h+1 && j>=i+6 && d>=i+2 && N>=i+1 && d>=-3 && h>=-1 && N>=h+2 && j>=d+5 && N>=d+1 && j>=h+5 && N>=j+1 && i>=0 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+1;c5 <= dp-1;c5+=1)
		 {
		 	S0((ip),(jp),(dp),(dp+3),(c5),(dp+3));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgk0_13(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q10(N,M,MHL,h+1,d))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==j-1 && e==j-1 && d==j-4 && ep==jp-1 && dp==jp-4 && N>=jp+1 && jp>=ip+6 && ip>=0 && N>=9 && M>=9 && MHL>=11 && h>=i+1 && j>=h+5 && j>=i+6 && N>=j+1 && N>=i+1 && i>=0 && h>=-1 && N>=h+2 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+1;c5 <= jp-5;c5+=1)
		 {
		 	S0((ip),(jp),(jp-4),(jp-1),(c5),(jp-1));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgk0_14(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+((((eval_Q10(N,M,MHL,h+1,d))*(eval_Q10(N,M,MHL,e,f-1)))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==j-1 && e==j-2 && d==j-4 && ep==jp-2 && dp==jp-4 && ip>=0 && jp>=ip+7 && N>=jp+1 && MHL>=11 && M>=9 && N>=9 && jp>=2 && h>=i+1 && j>=h+5 && N>=i+1 && N>=j+1 && i>=0 && j>=i+7 && j>=2 && N>=h+2 && h>=-1 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+1;c5 <= jp-5;c5+=1)
		 {
		 	S0((ip),(jp),(jp-4),(jp-2),(c5),(jp-1));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgk0_15(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q10(N,M,MHL,h+1,d))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==j-2 && e==j-2 && d==j-4 && ep==jp-2 && dp==jp-4 && N>=jp+1 && jp>=ip+7 && M>=9 && N>=9 && jp>=2 && MHL>=11 && ip>=0 && h>=i+1 && j>=h+6 && i>=0 && j>=i+7 && j>=2 && N>=j+1 && h>=-1 && N>=h+2 && N>=i+1 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+1;c5 <= jp-6;c5+=1)
		 {
		 	S0((ip),(jp),(jp-4),(jp-2),(c5),(jp-2));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgk0_16(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+((((eval_Q10(N,M,MHL,h+1,d))*(eval_Q10(N,M,MHL,e,f-1)))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|e==d+2 && ep==dp+2 && ip>=0 && dp>=ip+3 && N>=dp+1 && jp>=dp+5 && jp>=ip+6 && N>=9 && M>=9 && MHL>=11 && N>=jp+1 && dp>=-2 && h>=i+1 && d>=h+1 && f>=d+3 && j>=f+1 && f>=h+4 && d>=i+3 && N>=f && i>=0 && h>=-1 && N>=h+2 && j>=h+5 && N>=d+3 && N>=j+1 && j>=i+6 && N>=i+1 && d>=-2 && j>=d+5 && ip==i && jp==j && dp==d && ep==e}
		int c5,c6;
		for(c5=ip+1;c5 <= dp-1;c5+=1)
		 {
		 	for(c6=dp+3;c6 <= jp-1;c6+=1)
		 	 {
		 	 	S0((ip),(jp),(dp),(dp+2),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgk0_17(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q10(N,M,MHL,h+1,d))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==d+2 && e==d+2 && ep==dp+2 && N>=dp+1 && dp>=ip+3 && dp>=-2 && N>=9 && M>=9 && MHL>=11 && ip>=0 && N>=jp+1 && jp>=dp+5 && jp>=ip+6 && h>=i+1 && d>=h+2 && j>=i+6 && d>=i+3 && N>=i+1 && d>=-2 && h>=-1 && N>=h+2 && j>=d+5 && N>=d+1 && j>=h+5 && N>=j+1 && i>=0 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+1;c5 <= dp-2;c5+=1)
		 {
		 	S0((ip),(jp),(dp),(dp+2),(c5),(dp+2));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgk0_18(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q10(N,M,MHL,e,f-1))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|h==d && e==d+2 && ep==dp+2 && N>=jp+1 && jp>=dp+5 && dp>=-2 && N>=9 && M>=9 && MHL>=11 && jp>=ip+6 && dp>=ip+3 && ip>=0 && N>=dp+1 && f>=d+4 && j>=f+1 && N>=d+3 && N>=i+1 && j>=i+6 && N>=j+1 && d>=-2 && i>=0 && j>=d+5 && N>=f && d>=i+3 && ip==i && jp==j && dp==d && ep==e}
		int c6;
		for(c6=dp+4;c6 <= jp-1;c6+=1)
		 {
		 	S0((ip),(jp),(dp),(dp+2),(dp),(c6));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgk0_19(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q10(N,M,MHL,h+1,d))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==j-1 && e==j-1 && d==j-3 && ep==jp-1 && dp==jp-3 && N>=jp+1 && jp>=ip+6 && ip>=0 && N>=9 && M>=9 && MHL>=11 && h>=i+1 && j>=h+5 && j>=i+6 && N>=j+1 && N>=i+1 && i>=0 && h>=-1 && N>=h+2 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+1;c5 <= jp-5;c5+=1)
		 {
		 	S0((ip),(jp),(jp-3),(jp-1),(c5),(jp-1));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempqgk0(long N, long M, long MHL, int i, int j, int d, int e){
	if ( _flag_tempqgk0(i,j,d,e) == 'N' ) {
		_flag_tempqgk0(i,j,d,e) = 'I';
	//Body for tempqgk0
		tempqgk0(i,j,d,e) = (((i >= j-5))?0:(((d == i+1 && j >= i+6 && i >= e-4))?reduce_piRNAb2_tempqgk0_1(N,M,MHL,i,j,d,e):(((e == i+4 && d == i+2 && j == i+6))?reduce_piRNAb2_tempqgk0_2(N,M,MHL,i,j,d,e):(((e == i+4 && d == i+2 && j >= i+7))?(reduce_piRNAb2_tempqgk0_3(N,M,MHL,i,j,d,e))+(reduce_piRNAb2_tempqgk0_4(N,M,MHL,i,j,d,e)):(((j >= e+2 && e >= d+4 && d >= i+2))?(((reduce_piRNAb2_tempqgk0_5(N,M,MHL,i,j,d,e))+(reduce_piRNAb2_tempqgk0_6(N,M,MHL,i,j,d,e)))+(reduce_piRNAb2_tempqgk0_7(N,M,MHL,i,j,d,e)))+((eval_Qg0(N,M,MHL,i,j,d,e))*(ekissing(0,0,1))):(((d == i+1 && e >= i+5 && j >= e+2))?(reduce_piRNAb2_tempqgk0_8(N,M,MHL,i,j,d,e))+((eval_Qg0(N,M,MHL,i,j,d,e))*(ekissing(0,0,1))):(((e == j-1 && d >= i+2 && j >= d+5))?(reduce_piRNAb2_tempqgk0_9(N,M,MHL,i,j,d,e))+((eval_Qg0(N,M,MHL,i,j,d,e))*(ekissing(0,0,1))):(((e == j-1 && d == i+1 && j >= i+6))?(eval_Qg0(N,M,MHL,i,j,d,e))*(ekissing(0,0,1)):(((e == d+3 && d >= i+2 && j >= d+5))?((reduce_piRNAb2_tempqgk0_10(N,M,MHL,i,j,d,e))+(reduce_piRNAb2_tempqgk0_11(N,M,MHL,i,j,d,e)))+(reduce_piRNAb2_tempqgk0_12(N,M,MHL,i,j,d,e)):(((e == j-1 && d == j-4 && j >= i+6))?reduce_piRNAb2_tempqgk0_13(N,M,MHL,i,j,d,e):(((e == j-2 && d == j-4 && j >= i+7))?(reduce_piRNAb2_tempqgk0_14(N,M,MHL,i,j,d,e))+(reduce_piRNAb2_tempqgk0_15(N,M,MHL,i,j,d,e)):(((e == d+2 && d >= i+3 && j >= d+5))?((reduce_piRNAb2_tempqgk0_16(N,M,MHL,i,j,d,e))+(reduce_piRNAb2_tempqgk0_17(N,M,MHL,i,j,d,e)))+(reduce_piRNAb2_tempqgk0_18(N,M,MHL,i,j,d,e)):(reduce_piRNAb2_tempqgk0_19(N,M,MHL,i,j,d,e))))))))))))));
		_flag_tempqgk0(i,j,d,e) = 'F';
	} else if ( _flag_tempqgk0(i,j,d,e) == 'I' ) {
		printf("There is a self dependence on tempqgk0 at (%d,%d,%d,%d) \n",i,j,d,e);
		exit(-1);
	}
	return tempqgk0(i,j,d,e);
}
double eval_Qgm0(long N, long M, long MHL, int i, int j, int d, int e){
	if ( _flag_Qgm0(i,j,d,e) == 'N' ) {
		_flag_Qgm0(i,j,d,e) = 'I';
	//Body for Qgm0
		Qgm0(i,j,d,e) = (((base_pair(seq0(i),seq0(j)))&&((j)>((i)+(3))))?((((j >= e+1 && d >= i+1))?(((eval_Q20(N,M,MHL,i+1,d))*(eval_Q20(N,M,MHL,e,j-1)))*(emulti(0,0,1)))+(eval_tempqgm0(N,M,MHL,i,j,d,e)):(((e == j && d >= i+1))?(eval_Q20(N,M,MHL,i+1,d))*(emulti(0,0,1)):(((d == i && j >= e+1))?(eval_Q20(N,M,MHL,e,j-1))*(emulti(0,0,1)):(emulti(0,0,1)))))):(0));
		_flag_Qgm0(i,j,d,e) = 'F';
	} else if ( _flag_Qgm0(i,j,d,e) == 'I' ) {
		printf("There is a self dependence on Qgm0 at (%d,%d,%d,%d) \n",i,j,d,e);
		exit(-1);
	}
	return Qgm0(i,j,d,e);
}
double reduce_piRNAb2_tempqgm0_1(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q20(N,M,MHL,e,f-1))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|h==i+1 && d==i+1 && dp==ip+1 && ip>=0 && jp>=ip+6 && N>=9 && M>=9 && MHL>=11 && ep>=0 && ep>=ip+3 && jp>=ep+2 && N>=jp+1 && ip>=ep-4 && f>=i+5 && j>=f+1 && j>=e+2 && i>=e-4 && N>=i+1 && e>=0 && N>=e+1 && f>=e+1 && N>=f && j>=i+6 && e>=i+3 && N>=j+1 && i>=0 && ip==i && jp==j && dp==d && ep==e}
		int c6;
		for(c6=ip+5;c6 <= jp-1;c6+=1)
		 {
		 	S0((ip),(jp),(ip+1),(ep),(ip+1),(c6));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgm0_2(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+((((eval_Q20(N,M,MHL,h+1,d))*(eval_Q20(N,M,MHL,e,f-1)))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==i+5 && h==i+1 && e==i+4 && d==i+2 && j==i+6 && ep==ip+4 && dp==ip+2 && jp==ip+6 && N>=ip+7 && ip>=0 && MHL>=11 && M>=9 && N>=9 && N>=i+7 && i>=0 && ip==i && jp==j && dp==d && ep==e}
		S0((ip),(ip+6),(ip+2),(ip+4),(ip+1),(ip+5));
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgm0_3(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+((((eval_Q20(N,M,MHL,h+1,d))*(eval_Q20(N,M,MHL,e,f-1)))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|h==i+1 && e==i+4 && d==i+2 && ep==ip+4 && dp==ip+2 && N>=ip+3 && ip>=0 && N>=jp+1 && jp>=ip+7 && N>=9 && M>=9 && MHL>=11 && N>=f && f>=i+5 && i>=0 && j>=f+1 && N>=j+1 && N>=i+5 && j>=i+7 && ip==i && jp==j && dp==d && ep==e}
		int c6;
		for(c6=ip+5;c6 <= jp-1;c6+=1)
		 {
		 	S0((ip),(jp),(ip+2),(ip+4),(ip+1),(c6));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgm0_4(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q20(N,M,MHL,e,f-1))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|h==i+2 && e==i+4 && d==i+2 && ep==ip+4 && dp==ip+2 && ip>=0 && jp>=ip+7 && N>=9 && M>=9 && MHL>=11 && N>=jp+1 && N>=ip+3 && f>=i+6 && j>=f+1 && j>=i+7 && N>=f && N>=j+1 && i>=0 && N>=i+5 && ip==i && jp==j && dp==d && ep==e}
		int c6;
		for(c6=ip+6;c6 <= jp-1;c6+=1)
		 {
		 	S0((ip),(jp),(ip+2),(ip+4),(ip+2),(c6));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgm0_5(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+((((eval_Q20(N,M,MHL,h+1,d))*(eval_Q20(N,M,MHL,e,f-1)))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|ip>=0 && dp>=ip+2 && N>=dp+1 && jp>=ep+2 && jp>=ip+6 && N>=9 && M>=9 && MHL>=11 && N>=jp+1 && ep>=0 && ep>=ip+5 && N>=ip+1 && ep>=dp+4 && jp>=dp+5 && h>=i+1 && d>=h+1 && f>=e+1 && j>=f+1 && f>=h+4 && e>=i+5 && j>=e+2 && e>=d+4 && h>=-1 && N>=h+2 && j>=h+5 && N>=d+1 && N>=j+1 && j>=i+6 && N>=i+1 && e>=0 && N>=e+1 && i>=0 && N>=f && j>=d+5 && d>=i+2 && ip==i && jp==j && dp==d && ep==e}
		int c5,c6;
		for(c5=ip+1;c5 <= dp-1;c5+=1)
		 {
		 	for(c6=ep+1;c6 <= jp-1;c6+=1)
		 	 {
		 	 	S0((ip),(jp),(dp),(ep),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgm0_6(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q20(N,M,MHL,e,f-1))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|h==d && N>=jp+1 && jp>=ep+2 && jp>=dp+5 && N>=9 && M>=9 && MHL>=11 && ep>=0 && dp>=ip+2 && ip>=0 && ep>=ip+5 && N>=ip+1 && N>=dp+1 && ep>=dp+4 && jp>=ip+6 && f>=e+1 && j>=f+1 && f>=d+4 && e>=i+5 && N>=d+1 && j>=e+2 && e>=0 && N>=e+1 && j>=d+5 && N>=f && d>=i+2 && N>=j+1 && j>=i+6 && i>=0 && N>=i+1 && e>=d+4 && ip==i && jp==j && dp==d && ep==e}
		int c6;
		for(c6=ep+1;c6 <= jp-1;c6+=1)
		 {
		 	S0((ip),(jp),(dp),(ep),(dp),(c6));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgm0_7(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q20(N,M,MHL,h+1,d))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==e && N>=dp+1 && dp>=ip+2 && ep>=ip+5 && N>=9 && M>=9 && MHL>=11 && ip>=0 && N>=jp+1 && jp>=ep+2 && ep>=dp+4 && N>=ip+1 && jp>=dp+5 && ep>=0 && jp>=ip+6 && h>=i+1 && d>=h+1 && e>=h+4 && e>=d+4 && j>=d+5 && e>=i+5 && h>=-1 && N>=h+2 && j>=e+2 && N>=d+1 && j>=h+5 && N>=j+1 && j>=i+6 && i>=0 && N>=i+1 && e>=0 && d>=i+2 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+1;c5 <= dp-1;c5+=1)
		 {
		 	S0((ip),(jp),(dp),(ep),(c5),(ep));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgm0_8(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q20(N,M,MHL,e,f-1))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|h==i+1 && d==i+1 && dp==ip+1 && N>=jp+1 && jp>=ep+2 && jp>=ip+6 && N>=9 && M>=9 && MHL>=11 && ep>=0 && N>=ip+1 && ip>=0 && ep>=ip+5 && f>=e+1 && j>=f+1 && f>=i+5 && N>=i+1 && i>=0 && e>=i+5 && e>=0 && N>=e+1 && j>=i+6 && N>=f && j>=e+2 && N>=j+1 && ip==i && jp==j && dp==d && ep==e}
		int c6;
		for(c6=ep+1;c6 <= jp-1;c6+=1)
		 {
		 	S0((ip),(jp),(ip+1),(ep),(ip+1),(c6));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgm0_9(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q20(N,M,MHL,h+1,d))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==j-1 && e==j-1 && ep==jp-1 && N>=dp+1 && dp>=ip+2 && jp>=ip+6 && N>=9 && M>=9 && MHL>=11 && ip>=0 && N>=jp+1 && N>=ip+1 && jp>=dp+5 && h>=i+1 && d>=h+1 && j>=h+5 && N>=i+1 && i>=0 && j>=i+6 && h>=-1 && N>=h+2 && d>=i+2 && N>=d+1 && j>=d+5 && N>=j+1 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+1;c5 <= dp-1;c5+=1)
		 {
		 	S0((ip),(jp),(dp),(jp-1),(c5),(jp-1));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgm0_10(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+((((eval_Q20(N,M,MHL,h+1,d))*(eval_Q20(N,M,MHL,e,f-1)))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|e==d+3 && ep==dp+3 && ip>=0 && dp>=ip+2 && N>=dp+1 && jp>=dp+5 && jp>=ip+6 && N>=9 && M>=9 && MHL>=11 && N>=jp+1 && dp>=-3 && h>=i+1 && d>=h+1 && f>=d+4 && j>=f+1 && f>=h+4 && d>=i+2 && N>=f && i>=0 && h>=-1 && N>=h+2 && j>=h+5 && N>=d+4 && N>=j+1 && j>=i+6 && N>=i+1 && d>=-3 && j>=d+5 && ip==i && jp==j && dp==d && ep==e}
		int c5,c6;
		for(c5=ip+1;c5 <= dp-1;c5+=1)
		 {
		 	for(c6=dp+4;c6 <= jp-1;c6+=1)
		 	 {
		 	 	S0((ip),(jp),(dp),(dp+3),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgm0_11(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q20(N,M,MHL,e,f-1))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|h==d && e==d+3 && ep==dp+3 && N>=jp+1 && jp>=dp+5 && dp>=-3 && N>=9 && M>=9 && MHL>=11 && jp>=ip+6 && dp>=ip+2 && ip>=0 && N>=dp+1 && f>=d+4 && j>=f+1 && N>=d+4 && N>=i+1 && j>=i+6 && N>=j+1 && d>=-3 && i>=0 && j>=d+5 && N>=f && d>=i+2 && ip==i && jp==j && dp==d && ep==e}
		int c6;
		for(c6=dp+4;c6 <= jp-1;c6+=1)
		 {
		 	S0((ip),(jp),(dp),(dp+3),(dp),(c6));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgm0_12(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q20(N,M,MHL,h+1,d))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==d+3 && e==d+3 && ep==dp+3 && N>=dp+1 && dp>=ip+2 && dp>=-3 && N>=9 && M>=9 && MHL>=11 && ip>=0 && N>=jp+1 && jp>=dp+5 && jp>=ip+6 && h>=i+1 && d>=h+1 && j>=i+6 && d>=i+2 && N>=i+1 && d>=-3 && h>=-1 && N>=h+2 && j>=d+5 && N>=d+1 && j>=h+5 && N>=j+1 && i>=0 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+1;c5 <= dp-1;c5+=1)
		 {
		 	S0((ip),(jp),(dp),(dp+3),(c5),(dp+3));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgm0_13(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q20(N,M,MHL,h+1,d))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==j-1 && e==j-1 && d==j-4 && ep==jp-1 && dp==jp-4 && N>=jp+1 && jp>=ip+6 && ip>=0 && N>=9 && M>=9 && MHL>=11 && h>=i+1 && j>=h+5 && j>=i+6 && N>=j+1 && N>=i+1 && i>=0 && h>=-1 && N>=h+2 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+1;c5 <= jp-5;c5+=1)
		 {
		 	S0((ip),(jp),(jp-4),(jp-1),(c5),(jp-1));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgm0_14(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+((((eval_Q20(N,M,MHL,h+1,d))*(eval_Q20(N,M,MHL,e,f-1)))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==j-1 && e==j-2 && d==j-4 && ep==jp-2 && dp==jp-4 && ip>=0 && jp>=ip+7 && N>=jp+1 && MHL>=11 && M>=9 && N>=9 && jp>=2 && h>=i+1 && j>=h+5 && N>=i+1 && N>=j+1 && i>=0 && j>=i+7 && j>=2 && N>=h+2 && h>=-1 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+1;c5 <= jp-5;c5+=1)
		 {
		 	S0((ip),(jp),(jp-4),(jp-2),(c5),(jp-1));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgm0_15(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q20(N,M,MHL,h+1,d))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==j-2 && e==j-2 && d==j-4 && ep==jp-2 && dp==jp-4 && N>=jp+1 && jp>=ip+7 && M>=9 && N>=9 && jp>=2 && MHL>=11 && ip>=0 && h>=i+1 && j>=h+6 && i>=0 && j>=i+7 && j>=2 && N>=j+1 && h>=-1 && N>=h+2 && N>=i+1 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+1;c5 <= jp-6;c5+=1)
		 {
		 	S0((ip),(jp),(jp-4),(jp-2),(c5),(jp-2));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgm0_16(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+((((eval_Q20(N,M,MHL,h+1,d))*(eval_Q20(N,M,MHL,e,f-1)))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|e==d+2 && ep==dp+2 && ip>=0 && dp>=ip+3 && N>=dp+1 && jp>=dp+5 && jp>=ip+6 && N>=9 && M>=9 && MHL>=11 && N>=jp+1 && dp>=-2 && h>=i+1 && d>=h+1 && f>=d+3 && j>=f+1 && f>=h+4 && d>=i+3 && N>=f && i>=0 && h>=-1 && N>=h+2 && j>=h+5 && N>=d+3 && N>=j+1 && j>=i+6 && N>=i+1 && d>=-2 && j>=d+5 && ip==i && jp==j && dp==d && ep==e}
		int c5,c6;
		for(c5=ip+1;c5 <= dp-1;c5+=1)
		 {
		 	for(c6=dp+3;c6 <= jp-1;c6+=1)
		 	 {
		 	 	S0((ip),(jp),(dp),(dp+2),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgm0_17(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q20(N,M,MHL,h+1,d))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==d+2 && e==d+2 && ep==dp+2 && N>=dp+1 && dp>=ip+3 && dp>=-2 && N>=9 && M>=9 && MHL>=11 && ip>=0 && N>=jp+1 && jp>=dp+5 && jp>=ip+6 && h>=i+1 && d>=h+2 && j>=i+6 && d>=i+3 && N>=i+1 && d>=-2 && h>=-1 && N>=h+2 && j>=d+5 && N>=d+1 && j>=h+5 && N>=j+1 && i>=0 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+1;c5 <= dp-2;c5+=1)
		 {
		 	S0((ip),(jp),(dp),(dp+2),(c5),(dp+2));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgm0_18(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q20(N,M,MHL,e,f-1))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|h==d && e==d+2 && ep==dp+2 && N>=jp+1 && jp>=dp+5 && dp>=-2 && N>=9 && M>=9 && MHL>=11 && jp>=ip+6 && dp>=ip+3 && ip>=0 && N>=dp+1 && f>=d+4 && j>=f+1 && N>=d+3 && N>=i+1 && j>=i+6 && N>=j+1 && d>=-2 && i>=0 && j>=d+5 && N>=f && d>=i+3 && ip==i && jp==j && dp==d && ep==e}
		int c6;
		for(c6=dp+4;c6 <= jp-1;c6+=1)
		 {
		 	S0((ip),(jp),(dp),(dp+2),(dp),(c6));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgm0_19(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q20(N,M,MHL,h+1,d))*(eval_Qg0(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==j-1 && e==j-1 && d==j-3 && ep==jp-1 && dp==jp-3 && N>=jp+1 && jp>=ip+6 && ip>=0 && N>=9 && M>=9 && MHL>=11 && h>=i+1 && j>=h+5 && j>=i+6 && N>=j+1 && N>=i+1 && i>=0 && h>=-1 && N>=h+2 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+1;c5 <= jp-5;c5+=1)
		 {
		 	S0((ip),(jp),(jp-3),(jp-1),(c5),(jp-1));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempqgm0(long N, long M, long MHL, int i, int j, int d, int e){
	if ( _flag_tempqgm0(i,j,d,e) == 'N' ) {
		_flag_tempqgm0(i,j,d,e) = 'I';
	//Body for tempqgm0
		tempqgm0(i,j,d,e) = (((i >= j-5))?0:(((d == i+1 && j >= i+6 && i >= e-4))?reduce_piRNAb2_tempqgm0_1(N,M,MHL,i,j,d,e):(((e == i+4 && d == i+2 && j == i+6))?reduce_piRNAb2_tempqgm0_2(N,M,MHL,i,j,d,e):(((e == i+4 && d == i+2 && j >= i+7))?(reduce_piRNAb2_tempqgm0_3(N,M,MHL,i,j,d,e))+(reduce_piRNAb2_tempqgm0_4(N,M,MHL,i,j,d,e)):(((j >= e+2 && e >= d+4 && d >= i+2))?(((reduce_piRNAb2_tempqgm0_5(N,M,MHL,i,j,d,e))+(reduce_piRNAb2_tempqgm0_6(N,M,MHL,i,j,d,e)))+(reduce_piRNAb2_tempqgm0_7(N,M,MHL,i,j,d,e)))+((eval_Qg0(N,M,MHL,i,j,d,e))*(emulti(0,0,1))):(((d == i+1 && e >= i+5 && j >= e+2))?(reduce_piRNAb2_tempqgm0_8(N,M,MHL,i,j,d,e))+((eval_Qg0(N,M,MHL,i,j,d,e))*(emulti(0,0,1))):(((e == j-1 && d >= i+2 && j >= d+5))?(reduce_piRNAb2_tempqgm0_9(N,M,MHL,i,j,d,e))+((eval_Qg0(N,M,MHL,i,j,d,e))*(emulti(0,0,1))):(((e == j-1 && d == i+1 && j >= i+6))?(eval_Qg0(N,M,MHL,i,j,d,e))*(emulti(0,0,1)):(((e == d+3 && d >= i+2 && j >= d+5))?((reduce_piRNAb2_tempqgm0_10(N,M,MHL,i,j,d,e))+(reduce_piRNAb2_tempqgm0_11(N,M,MHL,i,j,d,e)))+(reduce_piRNAb2_tempqgm0_12(N,M,MHL,i,j,d,e)):(((e == j-1 && d == j-4 && j >= i+6))?reduce_piRNAb2_tempqgm0_13(N,M,MHL,i,j,d,e):(((e == j-2 && d == j-4 && j >= i+7))?(reduce_piRNAb2_tempqgm0_14(N,M,MHL,i,j,d,e))+(reduce_piRNAb2_tempqgm0_15(N,M,MHL,i,j,d,e)):(((e == d+2 && d >= i+3 && j >= d+5))?((reduce_piRNAb2_tempqgm0_16(N,M,MHL,i,j,d,e))+(reduce_piRNAb2_tempqgm0_17(N,M,MHL,i,j,d,e)))+(reduce_piRNAb2_tempqgm0_18(N,M,MHL,i,j,d,e)):(reduce_piRNAb2_tempqgm0_19(N,M,MHL,i,j,d,e))))))))))))));
		_flag_tempqgm0(i,j,d,e) = 'F';
	} else if ( _flag_tempqgm0(i,j,d,e) == 'I' ) {
		printf("There is a self dependence on tempqgm0 at (%d,%d,%d,%d) \n",i,j,d,e);
		exit(-1);
	}
	return tempqgm0(i,j,d,e);
}
double reduce_piRNAb2_Q0r_1(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+((eval_Q0r(N,M,MHL,i,d-1))*(eval_Qbr(N,M,MHL,d,e)))
	{
		//Domain
		//{i,j,d,e|MHL>=11 && jp>=ip+5 && ip>=0 && M>=ip+6 && N>=9 && M>=9 && M>=jp+1 && d>=i+1 && j>=d+4 && e>=d+4 && j>=e && j>=i+5 && M>=j+1 && d>=0 && i>=0 && M>=i+6 && M>=e+1 && M>=d+1 && ip==i && jp==j}
		int c3,c4;
		for(c3=ip+1;c3 <= jp-4;c3+=1)
		 {
		 	for(c4=c3+4;c4 <= jp;c4+=1)
		 	 {
		 	 	S0((ip),(jp),(c3),(c4));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Q0r_2(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+(eval_Qbr(N,M,MHL,d,e))
	{
		//Domain
		//{i,j,d,e|d==i && M>=ip+6 && jp>=ip+5 && N>=9 && M>=9 && MHL>=11 && ip>=0 && M>=jp+1 && e>=i+4 && j>=e && j>=i+5 && M>=j+1 && M>=e+1 && i>=0 && M>=i+6 && ip==i && jp==j}
		int c4;
		for(c4=ip+4;c4 <= jp;c4+=1)
		 {
		 	S0((ip),(jp),(ip),(c4));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Q0r_3(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+(eval_Qbr(N,M,MHL,d,e))
	{
		//Domain
		//{i,j,d,e|e==i+4 && d==i && j==i+4 && jp==ip+4 && M>=ip+5 && ip>=0 && N>=9 && M>=9 && MHL>=11 && M>=i+5 && i>=0 && ip==i && jp==j}
		S0((ip),(ip+4),(ip),(ip+4));
	}
	#undef S0
	return reduceVar;
}
double eval_Q0r(long N, long M, long MHL, int i, int j){
	if ( _flag_Q0r(i,j) == 'N' ) {
		_flag_Q0r(i,j) = 'I';
	//Body for Q0r
		Q0r(i,j) = (((j >= i+5))?((1)+(reduce_piRNAb2_Q0r_1(N,M,MHL,i,j)))+(reduce_piRNAb2_Q0r_2(N,M,MHL,i,j)):(((j == i+4))?(1)+(reduce_piRNAb2_Q0r_3(N,M,MHL,i,j)):(1)));
		_flag_Q0r(i,j) = 'F';
	} else if ( _flag_Q0r(i,j) == 'I' ) {
		printf("There is a self dependence on Q0r at (%d,%d) \n",i,j);
		exit(-1);
	}
	return Q0r(i,j);
}
double reduce_piRNAb2_Q1r_1(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+(((eval_Q1r(N,M,MHL,i,d-1))*(eval_Qbr(N,M,MHL,d,e)))*(ekissing(0,(j)-(e),1)))
	{
		//Domain
		//{i,j,d,e|MHL>=11 && jp>=ip+5 && ip>=0 && M>=ip+6 && N>=9 && M>=9 && M>=jp+1 && d>=i+1 && j>=d+4 && e>=d+4 && j>=e && j>=i+5 && M>=j+1 && d>=0 && i>=0 && M>=i+6 && M>=e+1 && M>=d+1 && ip==i && jp==j}
		int c3,c4;
		for(c3=ip+1;c3 <= jp-4;c3+=1)
		 {
		 	for(c4=c3+4;c4 <= jp;c4+=1)
		 	 {
		 	 	S0((ip),(jp),(c3),(c4));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Q1r_2(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+((eval_Qbr(N,M,MHL,d,e))*(ekissing(0,(j)-(e),1)))
	{
		//Domain
		//{i,j,d,e|d==i && M>=ip+6 && jp>=ip+5 && N>=9 && M>=9 && MHL>=11 && ip>=0 && M>=jp+1 && e>=i+4 && j>=e && j>=i+5 && M>=j+1 && M>=e+1 && i>=0 && M>=i+6 && ip==i && jp==j}
		int c4;
		for(c4=ip+4;c4 <= jp;c4+=1)
		 {
		 	S0((ip),(jp),(ip),(c4));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Q1r_3(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+((eval_Qbr(N,M,MHL,d,e))*(ekissing(0,(j)-(e),1)))
	{
		//Domain
		//{i,j,d,e|e==i+4 && d==i && j==i+4 && jp==ip+4 && M>=ip+5 && ip>=0 && N>=9 && M>=9 && MHL>=11 && M>=i+5 && i>=0 && ip==i && jp==j}
		S0((ip),(ip+4),(ip),(ip+4));
	}
	#undef S0
	return reduceVar;
}
double eval_Q1r(long N, long M, long MHL, int i, int j){
	if ( _flag_Q1r(i,j) == 'N' ) {
		_flag_Q1r(i,j) = 'I';
	//Body for Q1r
		Q1r(i,j) = (((j >= i+5))?((ekissing(0,((j)-(i))+(1),0))+(reduce_piRNAb2_Q1r_1(N,M,MHL,i,j)))+(reduce_piRNAb2_Q1r_2(N,M,MHL,i,j)):(((j == i+4))?(ekissing(0,((j)-(i))+(1),0))+(reduce_piRNAb2_Q1r_3(N,M,MHL,i,j)):(ekissing(0,((j)-(i))+(1),0))));
		_flag_Q1r(i,j) = 'F';
	} else if ( _flag_Q1r(i,j) == 'I' ) {
		printf("There is a self dependence on Q1r at (%d,%d) \n",i,j);
		exit(-1);
	}
	return Q1r(i,j);
}
double reduce_piRNAb2_Q2r_1(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+(((eval_Q2r(N,M,MHL,i,d-1))*(eval_Qbr(N,M,MHL,d,e)))*(emulti(0,(j)-(e),1)))
	{
		//Domain
		//{i,j,d,e|MHL>=11 && jp>=ip+5 && ip>=0 && M>=ip+6 && N>=9 && M>=9 && M>=jp+1 && d>=i+1 && j>=d+4 && e>=d+4 && j>=e && j>=i+5 && M>=j+1 && d>=0 && i>=0 && M>=i+6 && M>=e+1 && M>=d+1 && ip==i && jp==j}
		int c3,c4;
		for(c3=ip+1;c3 <= jp-4;c3+=1)
		 {
		 	for(c4=c3+4;c4 <= jp;c4+=1)
		 	 {
		 	 	S0((ip),(jp),(c3),(c4));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Q2r_2(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+((eval_Qbr(N,M,MHL,d,e))*(emulti(0,(j)-(e),1)))
	{
		//Domain
		//{i,j,d,e|d==i && M>=ip+6 && jp>=ip+5 && N>=9 && M>=9 && MHL>=11 && ip>=0 && M>=jp+1 && e>=i+4 && j>=e && j>=i+5 && M>=j+1 && M>=e+1 && i>=0 && M>=i+6 && ip==i && jp==j}
		int c4;
		for(c4=ip+4;c4 <= jp;c4+=1)
		 {
		 	S0((ip),(jp),(ip),(c4));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Q2r_3(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+((eval_Qbr(N,M,MHL,d,e))*(emulti(0,(j)-(e),1)))
	{
		//Domain
		//{i,j,d,e|e==i+4 && d==i && j==i+4 && jp==ip+4 && M>=ip+5 && ip>=0 && N>=9 && M>=9 && MHL>=11 && M>=i+5 && i>=0 && ip==i && jp==j}
		S0((ip),(ip+4),(ip),(ip+4));
	}
	#undef S0
	return reduceVar;
}
double eval_Q2r(long N, long M, long MHL, int i, int j){
	if ( _flag_Q2r(i,j) == 'N' ) {
		_flag_Q2r(i,j) = 'I';
	//Body for Q2r
		Q2r(i,j) = (((j >= i+5))?((emulti(0,((j)-(i))+(1),0))+(reduce_piRNAb2_Q2r_1(N,M,MHL,i,j)))+(reduce_piRNAb2_Q2r_2(N,M,MHL,i,j)):(((j == i+4))?(emulti(0,((j)-(i))+(1),0))+(reduce_piRNAb2_Q2r_3(N,M,MHL,i,j)):(emulti(0,((j)-(i))+(1),0))));
		_flag_Q2r(i,j) = 'F';
	} else if ( _flag_Q2r(i,j) == 'I' ) {
		printf("There is a self dependence on Q2r at (%d,%d) \n",i,j);
		exit(-1);
	}
	return Q2r(i,j);
}
double reduce_piRNAb2_Qm0r_1(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+(((eval_Qm0r(N,M,MHL,i,d-1))*(eval_Qbr(N,M,MHL,d,e)))+(eval_Qbr(N,M,MHL,d,e)))
	{
		//Domain
		//{i,j,d,e|MHL>=11 && jp>=ip+5 && ip>=0 && M>=ip+6 && N>=9 && M>=9 && M>=jp+1 && d>=i+1 && j>=d+4 && e>=d+4 && j>=e && j>=i+5 && M>=j+1 && d>=0 && i>=0 && M>=i+6 && M>=e+1 && M>=d+1 && ip==i && jp==j}
		int c3,c4;
		for(c3=ip+1;c3 <= jp-4;c3+=1)
		 {
		 	for(c4=c3+4;c4 <= jp;c4+=1)
		 	 {
		 	 	S0((ip),(jp),(c3),(c4));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qm0r_2(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+(eval_Qbr(N,M,MHL,d,e))
	{
		//Domain
		//{i,j,d,e|d==i && M>=ip+6 && jp>=ip+5 && N>=9 && M>=9 && MHL>=11 && ip>=0 && M>=jp+1 && e>=i+4 && j>=e && j>=i+5 && M>=j+1 && M>=e+1 && i>=0 && M>=i+6 && ip==i && jp==j}
		int c4;
		for(c4=ip+4;c4 <= jp;c4+=1)
		 {
		 	S0((ip),(jp),(ip),(c4));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qm0r_3(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+(eval_Qbr(N,M,MHL,d,e))
	{
		//Domain
		//{i,j,d,e|e==i+4 && d==i && j==i+4 && jp==ip+4 && M>=ip+5 && ip>=0 && N>=9 && M>=9 && MHL>=11 && M>=i+5 && i>=0 && ip==i && jp==j}
		S0((ip),(ip+4),(ip),(ip+4));
	}
	#undef S0
	return reduceVar;
}
double eval_Qm0r(long N, long M, long MHL, int i, int j){
	if ( _flag_Qm0r(i,j) == 'N' ) {
		_flag_Qm0r(i,j) = 'I';
	//Body for Qm0r
		Qm0r(i,j) = (((j >= i+5))?(reduce_piRNAb2_Qm0r_1(N,M,MHL,i,j))+(reduce_piRNAb2_Qm0r_2(N,M,MHL,i,j)):(((j == i+4))?reduce_piRNAb2_Qm0r_3(N,M,MHL,i,j):(0)));
		_flag_Qm0r(i,j) = 'F';
	} else if ( _flag_Qm0r(i,j) == 'I' ) {
		printf("There is a self dependence on Qm0r at (%d,%d) \n",i,j);
		exit(-1);
	}
	return Qm0r(i,j);
}
double reduce_piRNAb2_Qm1r_1(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+((((eval_Qm1r(N,M,MHL,i,d-1))*(eval_Qbr(N,M,MHL,d,e)))*(ekissing(0,(j)-(e),1)))+((eval_Qbr(N,M,MHL,d,e))*(ekissing(0,((j)-(i))-((e)-(d)),1))))
	{
		//Domain
		//{i,j,d,e|MHL>=11 && jp>=ip+5 && ip>=0 && M>=ip+6 && N>=9 && M>=9 && M>=jp+1 && d>=i+1 && j>=d+4 && e>=d+4 && j>=e && j>=i+5 && M>=j+1 && d>=0 && i>=0 && M>=i+6 && M>=e+1 && M>=d+1 && ip==i && jp==j}
		int c3,c4;
		for(c3=ip+1;c3 <= jp-4;c3+=1)
		 {
		 	for(c4=c3+4;c4 <= jp;c4+=1)
		 	 {
		 	 	S0((ip),(jp),(c3),(c4));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qm1r_2(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+((eval_Qbr(N,M,MHL,d,e))*(ekissing(0,((j)-(i))-((e)-(d)),1)))
	{
		//Domain
		//{i,j,d,e|d==i && M>=ip+6 && jp>=ip+5 && N>=9 && M>=9 && MHL>=11 && ip>=0 && M>=jp+1 && e>=i+4 && j>=e && j>=i+5 && M>=j+1 && M>=e+1 && i>=0 && M>=i+6 && ip==i && jp==j}
		int c4;
		for(c4=ip+4;c4 <= jp;c4+=1)
		 {
		 	S0((ip),(jp),(ip),(c4));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qm1r_3(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+((eval_Qbr(N,M,MHL,d,e))*(ekissing(0,((j)-(i))-((e)-(d)),1)))
	{
		//Domain
		//{i,j,d,e|e==i+4 && d==i && j==i+4 && jp==ip+4 && M>=ip+5 && ip>=0 && N>=9 && M>=9 && MHL>=11 && M>=i+5 && i>=0 && ip==i && jp==j}
		S0((ip),(ip+4),(ip),(ip+4));
	}
	#undef S0
	return reduceVar;
}
double eval_Qm1r(long N, long M, long MHL, int i, int j){
	if ( _flag_Qm1r(i,j) == 'N' ) {
		_flag_Qm1r(i,j) = 'I';
	//Body for Qm1r
		Qm1r(i,j) = (((j >= i+5))?(reduce_piRNAb2_Qm1r_1(N,M,MHL,i,j))+(reduce_piRNAb2_Qm1r_2(N,M,MHL,i,j)):(((j == i+4))?reduce_piRNAb2_Qm1r_3(N,M,MHL,i,j):(0)));
		_flag_Qm1r(i,j) = 'F';
	} else if ( _flag_Qm1r(i,j) == 'I' ) {
		printf("There is a self dependence on Qm1r at (%d,%d) \n",i,j);
		exit(-1);
	}
	return Qm1r(i,j);
}
double reduce_piRNAb2_Qm2r_1(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+((((eval_Qm2r(N,M,MHL,i,d-1))*(eval_Qbr(N,M,MHL,d,e)))*(emulti(0,(j)-(e),1)))+((eval_Qbr(N,M,MHL,d,e))*(emulti(0,((j)-(i))-((e)-(d)),1))))
	{
		//Domain
		//{i,j,d,e|MHL>=11 && jp>=ip+5 && ip>=0 && M>=ip+6 && N>=9 && M>=9 && M>=jp+1 && d>=i+1 && j>=d+4 && e>=d+4 && j>=e && j>=i+5 && M>=j+1 && d>=0 && i>=0 && M>=i+6 && M>=e+1 && M>=d+1 && ip==i && jp==j}
		int c3,c4;
		for(c3=ip+1;c3 <= jp-4;c3+=1)
		 {
		 	for(c4=c3+4;c4 <= jp;c4+=1)
		 	 {
		 	 	S0((ip),(jp),(c3),(c4));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qm2r_2(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+((eval_Qbr(N,M,MHL,d,e))*(emulti(0,((j)-(i))-((e)-(d)),1)))
	{
		//Domain
		//{i,j,d,e|d==i && M>=ip+6 && jp>=ip+5 && N>=9 && M>=9 && MHL>=11 && ip>=0 && M>=jp+1 && e>=i+4 && j>=e && j>=i+5 && M>=j+1 && M>=e+1 && i>=0 && M>=i+6 && ip==i && jp==j}
		int c4;
		for(c4=ip+4;c4 <= jp;c4+=1)
		 {
		 	S0((ip),(jp),(ip),(c4));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qm2r_3(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+((eval_Qbr(N,M,MHL,d,e))*(emulti(0,((j)-(i))-((e)-(d)),1)))
	{
		//Domain
		//{i,j,d,e|e==i+4 && d==i && j==i+4 && jp==ip+4 && M>=ip+5 && ip>=0 && N>=9 && M>=9 && MHL>=11 && M>=i+5 && i>=0 && ip==i && jp==j}
		S0((ip),(ip+4),(ip),(ip+4));
	}
	#undef S0
	return reduceVar;
}
double eval_Qm2r(long N, long M, long MHL, int i, int j){
	if ( _flag_Qm2r(i,j) == 'N' ) {
		_flag_Qm2r(i,j) = 'I';
	//Body for Qm2r
		Qm2r(i,j) = (((j >= i+5))?(reduce_piRNAb2_Qm2r_1(N,M,MHL,i,j))+(reduce_piRNAb2_Qm2r_2(N,M,MHL,i,j)):(((j == i+4))?reduce_piRNAb2_Qm2r_3(N,M,MHL,i,j):(0)));
		_flag_Qm2r(i,j) = 'F';
	} else if ( _flag_Qm2r(i,j) == 'I' ) {
		printf("There is a self dependence on Qm2r at (%d,%d) \n",i,j);
		exit(-1);
	}
	return Qm2r(i,j);
}
double reduce_piRNAb2_Qbr_1(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+((((eval_Qm2r(N,M,MHL,i+1,d-1))*(eval_Qbr(N,M,MHL,d,e)))*(emulti(1,((j)-(e))-(1),1)))+((esbir(i,j,d,e))*(eval_Qbr(N,M,MHL,d,e))))
	{
		//Domain
		//{i,j,d,e|MHL>=11 && jp>=ip+7 && ip>=0 && M>=ip+7 && N>=9 && M>=9 && M>=jp+1 && d>=i+2 && j>=d+5 && e>=d+4 && j>=e+1 && j>=i+7 && M>=j+1 && d>=0 && i>=0 && M>=i+7 && M>=e+1 && M>=d+1 && ip==i && jp==j}
		int c3,c4;
		for(c3=ip+2;c3 <= jp-5;c3+=1)
		 {
		 	for(c4=c3+4;c4 <= jp-1;c4+=1)
		 	 {
		 	 	S0((ip),(jp),(c3),(c4));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qbr_2(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+((esbir(i,j,d,e))*(eval_Qbr(N,M,MHL,d,e)))
	{
		//Domain
		//{i,j,d,e|d==i+1 && M>=ip+7 && jp>=ip+7 && N>=9 && M>=9 && MHL>=11 && ip>=0 && M>=jp+1 && e>=i+5 && j>=e+1 && j>=i+7 && M>=j+1 && M>=e+1 && i>=0 && M>=i+7 && ip==i && jp==j}
		int c4;
		for(c4=ip+5;c4 <= jp-1;c4+=1)
		 {
		 	S0((ip),(jp),(ip+1),(c4));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qbr_3(long N, long M, long MHL, int ip, int jp){
	double reduceVar = 0;
	#define S0(i,j,d,e) reduceVar = (reduceVar)+((esbir(i,j,d,e))*(eval_Qbr(N,M,MHL,d,e)))
	{
		//Domain
		//{i,j,d,e|e==i+5 && d==i+1 && j==i+6 && jp==ip+6 && M>=ip+7 && ip>=0 && N>=9 && M>=9 && MHL>=11 && M>=i+7 && i>=0 && ip==i && jp==j}
		S0((ip),(ip+6),(ip+1),(ip+5));
	}
	#undef S0
	return reduceVar;
}
double eval_Qbr(long N, long M, long MHL, int i, int j){
	if ( _flag_Qbr(i,j) == 'N' ) {
		_flag_Qbr(i,j) = 'I';
	//Body for Qbr
		Qbr(i,j) = ((base_pair(seqr(i),seqr(j)))?((((j >= i+7))?((ehr(i,j))+(reduce_piRNAb2_Qbr_1(N,M,MHL,i,j)))+(reduce_piRNAb2_Qbr_2(N,M,MHL,i,j)):(((j == i+6))?(ehr(i,j))+(reduce_piRNAb2_Qbr_3(N,M,MHL,i,j)):(((i >= j-5 && j >= i+4))?ehr(i,j):(0))))):(0));
		_flag_Qbr(i,j) = 'F';
	} else if ( _flag_Qbr(i,j) == 'I' ) {
		printf("There is a self dependence on Qbr at (%d,%d) \n",i,j);
		exit(-1);
	}
	return Qbr(i,j);
}
double eval_Qgr(long N, long M, long MHL, int i, int j, int d, int e){
	if ( _flag_Qgr(i,j,d,e) == 'N' ) {
		_flag_Qgr(i,j,d,e) = 'I';
	//Body for Qgr
		Qgr(i,j,d,e) = (((base_pair(seqr(i),seqr(j)))&&(base_pair(seqr(d),seqr(e))))?((((e == j-1 && d >= i+2))?(esbir(i,j,d,e))+((eval_Qm2r(N,M,MHL,i+1,d-1))*(emulti(1,((j)-(e))-(1),1))):(((d == i+1 && j >= e+2))?(esbir(i,j,d,e))+((eval_Qm2r(N,M,MHL,e+1,j-1))*(emulti(1,((d)-(i))-(1),1))):(((j >= e+2 && d >= i+2))?(((((esbir(i,j,d,e))+((eval_Qm2r(N,M,MHL,e+1,j-1))*(emulti(1,((d)-(i))-(1),1))))+((eval_Qm2r(N,M,MHL,i+1,d-1))*(emulti(1,((j)-(e))-(1),1))))+(((eval_Qm2r(N,M,MHL,i+1,d-1))*(eval_Qm2r(N,M,MHL,e+1,j-1)))*(emulti(1,0,1))))+((eval_Qgr(N,M,MHL,i+1,j-1,d,e))*(esbir(i,j,i+1,j-1))))+(eval_tempqgr(N,M,MHL,i,j,d,e)):(((e == j-1 && d == i+1 && j >= i+7))?esbir(i,j,d,e):(((e == i+5 && d == i+1 && j == i+6))?esbir(i,j,d,e):(0))))))):((((base_pair(seqr(i),seqr(j)))&&(!(base_pair(seqr(d),seqr(e)))))?((((e == j-1 && d == i+1))?esbir(i,j,d,e):(0))):(0))));
		_flag_Qgr(i,j,d,e) = 'F';
	} else if ( _flag_Qgr(i,j,d,e) == 'I' ) {
		printf("There is a self dependence on Qgr at (%d,%d,%d,%d) \n",i,j,d,e);
		exit(-1);
	}
	return Qgr(i,j,d,e);
}
double reduce_piRNAb2_tempqgr_1(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((((eval_Qgr(N,M,MHL,h,f,d,e))*(esbir(i,j,h,f)))+((((eval_Qm2r(N,M,MHL,i+1,h-1))*(eval_Qm2r(N,M,MHL,f+1,j-1)))*(emulti(1,0,1)))*(eval_Qgr(N,M,MHL,h,f,d,e))))+(((eval_Qm2r(N,M,MHL,f+1,j-1))*(emulti(1,((h)-(i))-(1),1)))*(eval_Qgr(N,M,MHL,h,f,d,e))))+(((eval_Qm2r(N,M,MHL,i+1,h-1))*(emulti(1,((j)-(f))-(1),1)))*(eval_Qgr(N,M,MHL,h,f,d,e))))
	{
		//Domain
		//{i,j,d,e,h,f|ep>=dp+4 && dp>=ip+3 && M>=jp+1 && jp>=ep+3 && N>=9 && ip>=0 && MHL>=11 && M>=9 && h>=i+2 && d>=h+1 && f>=e+1 && j>=f+2 && d>=i+3 && j>=e+3 && i>=0 && h>=0 && M>=h+1 && f>=h && M>=f+2 && f>=-1 && f>=d+5 && e>=d+4 && M>=j+1 && M>=i+2 && ip==i && jp==j && dp==d && ep==e}
		int c5,c6;
		for(c5=ip+2;c5 <= dp-1;c5+=1)
		 {
		 	for(c6=ep+1;c6 <= jp-2;c6+=1)
		 	 {
		 	 	S0((ip),(jp),(dp),(ep),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgr_2(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Qgr(N,M,MHL,h,f,d,e))*(esbir(i,j,h,f)))+(((eval_Qm2r(N,M,MHL,f+1,j-1))*(emulti(1,((h)-(i))-(1),1)))*(eval_Qgr(N,M,MHL,h,f,d,e))))
	{
		//Domain
		//{i,j,d,e,h,f|h==i+1 && ep>=dp+4 && jp>=ep+3 && N>=9 && M>=9 && MHL>=11 && ip>=0 && dp>=ip+3 && M>=jp+1 && f>=e+1 && j>=f+2 && j>=e+3 && f>=-1 && M>=j+1 && i>=0 && M>=i+2 && f>=i+1 && M>=f+2 && d>=i+3 && f>=d+5 && e>=d+4 && ip==i && jp==j && dp==d && ep==e}
		int c6;
		for(c6=ep+1;c6 <= jp-2;c6+=1)
		 {
		 	S0((ip),(jp),(dp),(ep),(ip+1),(c6));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgr_3(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Qgr(N,M,MHL,h,f,d,e))*(esbir(i,j,h,f)))+(((eval_Qm2r(N,M,MHL,i+1,h-1))*(emulti(1,((j)-(f))-(1),1)))*(eval_Qgr(N,M,MHL,h,f,d,e))))
	{
		//Domain
		//{i,j,d,e,h,f|f==j-1 && M>=jp+1 && dp>=ip+3 && N>=9 && M>=9 && MHL>=11 && ip>=0 && jp>=ep+3 && ep>=dp+4 && h>=i+2 && d>=h+1 && d>=i+3 && i>=0 && j>=e+3 && h>=0 && M>=h+1 && j>=h+1 && M>=j+1 && M>=i+2 && j>=d+6 && e>=d+4 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+2;c5 <= dp-1;c5+=1)
		 {
		 	S0((ip),(jp),(dp),(ep),(c5),(jp-1));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgr_4(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Qgr(N,M,MHL,h,f,d,e))*(esbir(i,j,h,f)))+(((eval_Qm2r(N,M,MHL,f+1,j-1))*(emulti(1,((h)-(i))-(1),1)))*(eval_Qgr(N,M,MHL,h,f,d,e))))
	{
		//Domain
		//{i,j,d,e,h,f|h==i+1 && d==i+2 && dp==ip+2 && ep>=ip+6 && jp>=ep+3 && N>=9 && M>=9 && MHL>=11 && ip>=0 && M>=jp+1 && f>=e+1 && j>=f+2 && j>=e+3 && e>=i+6 && M>=j+1 && i>=0 && M>=i+2 && f>=i+7 && M>=f+2 && f>=-1 && ip==i && jp==j && dp==d && ep==e}
		int c6;
		for(c6=ep+1;c6 <= jp-2;c6+=1)
		 {
		 	S0((ip),(jp),(ip+2),(ep),(ip+1),(c6));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgr_5(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Qgr(N,M,MHL,h,f,d,e))*(esbir(i,j,h,f)))+(((eval_Qm2r(N,M,MHL,i+1,h-1))*(emulti(1,((j)-(f))-(1),1)))*(eval_Qgr(N,M,MHL,h,f,d,e))))
	{
		//Domain
		//{i,j,d,e,h,f|f==j-1 && e==j-2 && ep==jp-2 && M>=jp+1 && dp>=ip+3 && N>=9 && M>=9 && MHL>=11 && ip>=0 && jp>=dp+6 && h>=i+2 && d>=h+1 && d>=i+3 && i>=0 && j>=d+6 && h>=0 && M>=h+1 && j>=h+1 && M>=j+1 && M>=i+2 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+2;c5 <= dp-1;c5+=1)
		 {
		 	S0((ip),(jp),(dp),(jp-2),(c5),(jp-1));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempqgr(long N, long M, long MHL, int i, int j, int d, int e){
	if ( _flag_tempqgr(i,j,d,e) == 'N' ) {
		_flag_tempqgr(i,j,d,e) = 'I';
	//Body for tempqgr
		tempqgr(i,j,d,e) = (((d >= i+3 && j >= e+3))?((reduce_piRNAb2_tempqgr_1(N,M,MHL,i,j,d,e))+(reduce_piRNAb2_tempqgr_2(N,M,MHL,i,j,d,e)))+(reduce_piRNAb2_tempqgr_3(N,M,MHL,i,j,d,e)):(((d == i+2 && j >= e+3))?reduce_piRNAb2_tempqgr_4(N,M,MHL,i,j,d,e):(((e == j-2 && d >= i+3))?reduce_piRNAb2_tempqgr_5(N,M,MHL,i,j,d,e):(0))));
		_flag_tempqgr(i,j,d,e) = 'F';
	} else if ( _flag_tempqgr(i,j,d,e) == 'I' ) {
		printf("There is a self dependence on tempqgr at (%d,%d,%d,%d) \n",i,j,d,e);
		exit(-1);
	}
	return tempqgr(i,j,d,e);
}
double eval_Qgkr(long N, long M, long MHL, int i, int j, int d, int e){
	if ( _flag_Qgkr(i,j,d,e) == 'N' ) {
		_flag_Qgkr(i,j,d,e) = 'I';
	//Body for Qgkr
		Qgkr(i,j,d,e) = (((base_pair(seqr(i),seqr(j)))&&((j)>((i)+(3))))?((((j >= e+1 && d >= i+1))?(((eval_Q1r(N,M,MHL,i+1,d))*(eval_Q1r(N,M,MHL,e,j-1)))*(ekissing(0,0,1)))+(eval_tempqgkr(N,M,MHL,i,j,d,e)):(((e == j && d >= i+1))?(eval_Q1r(N,M,MHL,i+1,d))*(ekissing(0,0,1)):(((d == i && j >= e+1))?(eval_Q1r(N,M,MHL,e,j-1))*(ekissing(0,0,1)):(ekissing(0,0,1)))))):(0));
		_flag_Qgkr(i,j,d,e) = 'F';
	} else if ( _flag_Qgkr(i,j,d,e) == 'I' ) {
		printf("There is a self dependence on Qgkr at (%d,%d,%d,%d) \n",i,j,d,e);
		exit(-1);
	}
	return Qgkr(i,j,d,e);
}
double reduce_piRNAb2_tempqgkr_1(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q1r(N,M,MHL,e,f-1))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|h==i+1 && d==i+1 && dp==ip+1 && ip>=0 && jp>=ip+6 && N>=9 && M>=9 && MHL>=11 && ep>=0 && ep>=ip+3 && jp>=ep+2 && M>=jp+1 && ip>=ep-4 && f>=i+5 && j>=f+1 && j>=e+2 && i>=e-4 && M>=i+1 && e>=0 && M>=e+1 && f>=e+1 && M>=f && j>=i+6 && e>=i+3 && M>=j+1 && i>=0 && ip==i && jp==j && dp==d && ep==e}
		int c6;
		for(c6=ip+5;c6 <= jp-1;c6+=1)
		 {
		 	S0((ip),(jp),(ip+1),(ep),(ip+1),(c6));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgkr_2(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+((((eval_Q1r(N,M,MHL,h+1,d))*(eval_Q1r(N,M,MHL,e,f-1)))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==i+5 && h==i+1 && e==i+4 && d==i+2 && j==i+6 && ep==ip+4 && dp==ip+2 && jp==ip+6 && M>=ip+7 && ip>=0 && MHL>=11 && M>=9 && N>=9 && M>=i+7 && i>=0 && ip==i && jp==j && dp==d && ep==e}
		S0((ip),(ip+6),(ip+2),(ip+4),(ip+1),(ip+5));
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgkr_3(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+((((eval_Q1r(N,M,MHL,h+1,d))*(eval_Q1r(N,M,MHL,e,f-1)))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|h==i+1 && e==i+4 && d==i+2 && ep==ip+4 && dp==ip+2 && M>=ip+3 && ip>=0 && M>=jp+1 && jp>=ip+7 && N>=9 && M>=9 && MHL>=11 && M>=f && f>=i+5 && i>=0 && j>=f+1 && M>=j+1 && M>=i+5 && j>=i+7 && ip==i && jp==j && dp==d && ep==e}
		int c6;
		for(c6=ip+5;c6 <= jp-1;c6+=1)
		 {
		 	S0((ip),(jp),(ip+2),(ip+4),(ip+1),(c6));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgkr_4(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q1r(N,M,MHL,e,f-1))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|h==i+2 && e==i+4 && d==i+2 && ep==ip+4 && dp==ip+2 && ip>=0 && jp>=ip+7 && N>=9 && M>=9 && MHL>=11 && M>=jp+1 && M>=ip+3 && f>=i+6 && j>=f+1 && j>=i+7 && M>=f && M>=j+1 && i>=0 && M>=i+5 && ip==i && jp==j && dp==d && ep==e}
		int c6;
		for(c6=ip+6;c6 <= jp-1;c6+=1)
		 {
		 	S0((ip),(jp),(ip+2),(ip+4),(ip+2),(c6));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgkr_5(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+((((eval_Q1r(N,M,MHL,h+1,d))*(eval_Q1r(N,M,MHL,e,f-1)))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|ip>=0 && dp>=ip+2 && M>=dp+1 && jp>=ep+2 && jp>=ip+6 && N>=9 && M>=9 && MHL>=11 && M>=jp+1 && ep>=0 && ep>=ip+5 && M>=ip+1 && ep>=dp+4 && jp>=dp+5 && h>=i+1 && d>=h+1 && f>=e+1 && j>=f+1 && f>=h+4 && e>=i+5 && j>=e+2 && e>=d+4 && h>=-1 && M>=h+2 && j>=h+5 && M>=d+1 && M>=j+1 && j>=i+6 && M>=i+1 && e>=0 && M>=e+1 && i>=0 && M>=f && j>=d+5 && d>=i+2 && ip==i && jp==j && dp==d && ep==e}
		int c5,c6;
		for(c5=ip+1;c5 <= dp-1;c5+=1)
		 {
		 	for(c6=ep+1;c6 <= jp-1;c6+=1)
		 	 {
		 	 	S0((ip),(jp),(dp),(ep),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgkr_6(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q1r(N,M,MHL,e,f-1))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|h==d && M>=jp+1 && jp>=ep+2 && jp>=dp+5 && N>=9 && M>=9 && MHL>=11 && ep>=0 && dp>=ip+2 && ip>=0 && ep>=ip+5 && M>=ip+1 && M>=dp+1 && ep>=dp+4 && jp>=ip+6 && f>=e+1 && j>=f+1 && f>=d+4 && e>=i+5 && M>=d+1 && j>=e+2 && e>=0 && M>=e+1 && j>=d+5 && M>=f && d>=i+2 && M>=j+1 && j>=i+6 && i>=0 && M>=i+1 && e>=d+4 && ip==i && jp==j && dp==d && ep==e}
		int c6;
		for(c6=ep+1;c6 <= jp-1;c6+=1)
		 {
		 	S0((ip),(jp),(dp),(ep),(dp),(c6));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgkr_7(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q1r(N,M,MHL,h+1,d))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==e && M>=dp+1 && dp>=ip+2 && ep>=ip+5 && N>=9 && M>=9 && MHL>=11 && ip>=0 && M>=jp+1 && jp>=ep+2 && ep>=dp+4 && M>=ip+1 && jp>=dp+5 && ep>=0 && jp>=ip+6 && h>=i+1 && d>=h+1 && e>=h+4 && e>=d+4 && j>=d+5 && e>=i+5 && h>=-1 && M>=h+2 && j>=e+2 && M>=d+1 && j>=h+5 && M>=j+1 && j>=i+6 && i>=0 && M>=i+1 && e>=0 && d>=i+2 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+1;c5 <= dp-1;c5+=1)
		 {
		 	S0((ip),(jp),(dp),(ep),(c5),(ep));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgkr_8(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q1r(N,M,MHL,e,f-1))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|h==i+1 && d==i+1 && dp==ip+1 && M>=jp+1 && jp>=ep+2 && jp>=ip+6 && N>=9 && M>=9 && MHL>=11 && ep>=0 && M>=ip+1 && ip>=0 && ep>=ip+5 && f>=e+1 && j>=f+1 && f>=i+5 && M>=i+1 && i>=0 && e>=i+5 && e>=0 && M>=e+1 && j>=i+6 && M>=f && j>=e+2 && M>=j+1 && ip==i && jp==j && dp==d && ep==e}
		int c6;
		for(c6=ep+1;c6 <= jp-1;c6+=1)
		 {
		 	S0((ip),(jp),(ip+1),(ep),(ip+1),(c6));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgkr_9(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q1r(N,M,MHL,h+1,d))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==j-1 && e==j-1 && ep==jp-1 && M>=dp+1 && dp>=ip+2 && jp>=ip+6 && N>=9 && M>=9 && MHL>=11 && ip>=0 && M>=jp+1 && M>=ip+1 && jp>=dp+5 && h>=i+1 && d>=h+1 && j>=h+5 && M>=i+1 && i>=0 && j>=i+6 && h>=-1 && M>=h+2 && d>=i+2 && M>=d+1 && j>=d+5 && M>=j+1 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+1;c5 <= dp-1;c5+=1)
		 {
		 	S0((ip),(jp),(dp),(jp-1),(c5),(jp-1));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgkr_10(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+((((eval_Q1r(N,M,MHL,h+1,d))*(eval_Q1r(N,M,MHL,e,f-1)))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|e==d+3 && ep==dp+3 && ip>=0 && dp>=ip+2 && M>=dp+1 && jp>=dp+5 && jp>=ip+6 && N>=9 && M>=9 && MHL>=11 && M>=jp+1 && dp>=-3 && h>=i+1 && d>=h+1 && f>=d+4 && j>=f+1 && f>=h+4 && d>=i+2 && M>=f && i>=0 && h>=-1 && M>=h+2 && j>=h+5 && M>=d+4 && M>=j+1 && j>=i+6 && M>=i+1 && d>=-3 && j>=d+5 && ip==i && jp==j && dp==d && ep==e}
		int c5,c6;
		for(c5=ip+1;c5 <= dp-1;c5+=1)
		 {
		 	for(c6=dp+4;c6 <= jp-1;c6+=1)
		 	 {
		 	 	S0((ip),(jp),(dp),(dp+3),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgkr_11(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q1r(N,M,MHL,e,f-1))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|h==d && e==d+3 && ep==dp+3 && M>=jp+1 && jp>=dp+5 && dp>=-3 && N>=9 && M>=9 && MHL>=11 && jp>=ip+6 && dp>=ip+2 && ip>=0 && M>=dp+1 && f>=d+4 && j>=f+1 && M>=d+4 && M>=i+1 && j>=i+6 && M>=j+1 && d>=-3 && i>=0 && j>=d+5 && M>=f && d>=i+2 && ip==i && jp==j && dp==d && ep==e}
		int c6;
		for(c6=dp+4;c6 <= jp-1;c6+=1)
		 {
		 	S0((ip),(jp),(dp),(dp+3),(dp),(c6));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgkr_12(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q1r(N,M,MHL,h+1,d))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==d+3 && e==d+3 && ep==dp+3 && M>=dp+1 && dp>=ip+2 && dp>=-3 && N>=9 && M>=9 && MHL>=11 && ip>=0 && M>=jp+1 && jp>=dp+5 && jp>=ip+6 && h>=i+1 && d>=h+1 && j>=i+6 && d>=i+2 && M>=i+1 && d>=-3 && h>=-1 && M>=h+2 && j>=d+5 && M>=d+1 && j>=h+5 && M>=j+1 && i>=0 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+1;c5 <= dp-1;c5+=1)
		 {
		 	S0((ip),(jp),(dp),(dp+3),(c5),(dp+3));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgkr_13(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q1r(N,M,MHL,h+1,d))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==j-1 && e==j-1 && d==j-4 && ep==jp-1 && dp==jp-4 && M>=jp+1 && jp>=ip+6 && ip>=0 && N>=9 && M>=9 && MHL>=11 && h>=i+1 && j>=h+5 && j>=i+6 && M>=j+1 && M>=i+1 && i>=0 && h>=-1 && M>=h+2 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+1;c5 <= jp-5;c5+=1)
		 {
		 	S0((ip),(jp),(jp-4),(jp-1),(c5),(jp-1));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgkr_14(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+((((eval_Q1r(N,M,MHL,h+1,d))*(eval_Q1r(N,M,MHL,e,f-1)))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==j-1 && e==j-2 && d==j-4 && ep==jp-2 && dp==jp-4 && ip>=0 && jp>=ip+7 && M>=jp+1 && MHL>=11 && M>=9 && N>=9 && jp>=2 && h>=i+1 && j>=h+5 && M>=i+1 && M>=j+1 && i>=0 && j>=i+7 && j>=2 && M>=h+2 && h>=-1 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+1;c5 <= jp-5;c5+=1)
		 {
		 	S0((ip),(jp),(jp-4),(jp-2),(c5),(jp-1));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgkr_15(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q1r(N,M,MHL,h+1,d))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==j-2 && e==j-2 && d==j-4 && ep==jp-2 && dp==jp-4 && M>=jp+1 && jp>=ip+7 && M>=9 && N>=9 && jp>=2 && MHL>=11 && ip>=0 && h>=i+1 && j>=h+6 && i>=0 && j>=i+7 && j>=2 && M>=j+1 && h>=-1 && M>=h+2 && M>=i+1 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+1;c5 <= jp-6;c5+=1)
		 {
		 	S0((ip),(jp),(jp-4),(jp-2),(c5),(jp-2));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgkr_16(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+((((eval_Q1r(N,M,MHL,h+1,d))*(eval_Q1r(N,M,MHL,e,f-1)))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|e==d+2 && ep==dp+2 && ip>=0 && dp>=ip+3 && M>=dp+1 && jp>=dp+5 && jp>=ip+6 && N>=9 && M>=9 && MHL>=11 && M>=jp+1 && dp>=-2 && h>=i+1 && d>=h+1 && f>=d+3 && j>=f+1 && f>=h+4 && d>=i+3 && M>=f && i>=0 && h>=-1 && M>=h+2 && j>=h+5 && M>=d+3 && M>=j+1 && j>=i+6 && M>=i+1 && d>=-2 && j>=d+5 && ip==i && jp==j && dp==d && ep==e}
		int c5,c6;
		for(c5=ip+1;c5 <= dp-1;c5+=1)
		 {
		 	for(c6=dp+3;c6 <= jp-1;c6+=1)
		 	 {
		 	 	S0((ip),(jp),(dp),(dp+2),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgkr_17(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q1r(N,M,MHL,h+1,d))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==d+2 && e==d+2 && ep==dp+2 && M>=dp+1 && dp>=ip+3 && dp>=-2 && N>=9 && M>=9 && MHL>=11 && ip>=0 && M>=jp+1 && jp>=dp+5 && jp>=ip+6 && h>=i+1 && d>=h+2 && j>=i+6 && d>=i+3 && M>=i+1 && d>=-2 && h>=-1 && M>=h+2 && j>=d+5 && M>=d+1 && j>=h+5 && M>=j+1 && i>=0 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+1;c5 <= dp-2;c5+=1)
		 {
		 	S0((ip),(jp),(dp),(dp+2),(c5),(dp+2));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgkr_18(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q1r(N,M,MHL,e,f-1))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|h==d && e==d+2 && ep==dp+2 && M>=jp+1 && jp>=dp+5 && dp>=-2 && N>=9 && M>=9 && MHL>=11 && jp>=ip+6 && dp>=ip+3 && ip>=0 && M>=dp+1 && f>=d+4 && j>=f+1 && M>=d+3 && M>=i+1 && j>=i+6 && M>=j+1 && d>=-2 && i>=0 && j>=d+5 && M>=f && d>=i+3 && ip==i && jp==j && dp==d && ep==e}
		int c6;
		for(c6=dp+4;c6 <= jp-1;c6+=1)
		 {
		 	S0((ip),(jp),(dp),(dp+2),(dp),(c6));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgkr_19(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q1r(N,M,MHL,h+1,d))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(ekissing(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==j-1 && e==j-1 && d==j-3 && ep==jp-1 && dp==jp-3 && M>=jp+1 && jp>=ip+6 && ip>=0 && N>=9 && M>=9 && MHL>=11 && h>=i+1 && j>=h+5 && j>=i+6 && M>=j+1 && M>=i+1 && i>=0 && h>=-1 && M>=h+2 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+1;c5 <= jp-5;c5+=1)
		 {
		 	S0((ip),(jp),(jp-3),(jp-1),(c5),(jp-1));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempqgkr(long N, long M, long MHL, int i, int j, int d, int e){
	if ( _flag_tempqgkr(i,j,d,e) == 'N' ) {
		_flag_tempqgkr(i,j,d,e) = 'I';
	//Body for tempqgkr
		tempqgkr(i,j,d,e) = (((i >= j-5))?0:(((d == i+1 && j >= i+6 && i >= e-4))?reduce_piRNAb2_tempqgkr_1(N,M,MHL,i,j,d,e):(((e == i+4 && d == i+2 && j == i+6))?reduce_piRNAb2_tempqgkr_2(N,M,MHL,i,j,d,e):(((e == i+4 && d == i+2 && j >= i+7))?(reduce_piRNAb2_tempqgkr_3(N,M,MHL,i,j,d,e))+(reduce_piRNAb2_tempqgkr_4(N,M,MHL,i,j,d,e)):(((j >= e+2 && e >= d+4 && d >= i+2))?(((reduce_piRNAb2_tempqgkr_5(N,M,MHL,i,j,d,e))+(reduce_piRNAb2_tempqgkr_6(N,M,MHL,i,j,d,e)))+(reduce_piRNAb2_tempqgkr_7(N,M,MHL,i,j,d,e)))+((eval_Qgr(N,M,MHL,i,j,d,e))*(ekissing(0,0,1))):(((d == i+1 && e >= i+5 && j >= e+2))?(reduce_piRNAb2_tempqgkr_8(N,M,MHL,i,j,d,e))+((eval_Qgr(N,M,MHL,i,j,d,e))*(ekissing(0,0,1))):(((e == j-1 && d >= i+2 && j >= d+5))?(reduce_piRNAb2_tempqgkr_9(N,M,MHL,i,j,d,e))+((eval_Qgr(N,M,MHL,i,j,d,e))*(ekissing(0,0,1))):(((e == j-1 && d == i+1 && j >= i+6))?(eval_Qgr(N,M,MHL,i,j,d,e))*(ekissing(0,0,1)):(((e == d+3 && d >= i+2 && j >= d+5))?((reduce_piRNAb2_tempqgkr_10(N,M,MHL,i,j,d,e))+(reduce_piRNAb2_tempqgkr_11(N,M,MHL,i,j,d,e)))+(reduce_piRNAb2_tempqgkr_12(N,M,MHL,i,j,d,e)):(((e == j-1 && d == j-4 && j >= i+6))?reduce_piRNAb2_tempqgkr_13(N,M,MHL,i,j,d,e):(((e == j-2 && d == j-4 && j >= i+7))?(reduce_piRNAb2_tempqgkr_14(N,M,MHL,i,j,d,e))+(reduce_piRNAb2_tempqgkr_15(N,M,MHL,i,j,d,e)):(((e == d+2 && d >= i+3 && j >= d+5))?((reduce_piRNAb2_tempqgkr_16(N,M,MHL,i,j,d,e))+(reduce_piRNAb2_tempqgkr_17(N,M,MHL,i,j,d,e)))+(reduce_piRNAb2_tempqgkr_18(N,M,MHL,i,j,d,e)):(reduce_piRNAb2_tempqgkr_19(N,M,MHL,i,j,d,e))))))))))))));
		_flag_tempqgkr(i,j,d,e) = 'F';
	} else if ( _flag_tempqgkr(i,j,d,e) == 'I' ) {
		printf("There is a self dependence on tempqgkr at (%d,%d,%d,%d) \n",i,j,d,e);
		exit(-1);
	}
	return tempqgkr(i,j,d,e);
}
double eval_Qgmr(long N, long M, long MHL, int i, int j, int d, int e){
	if ( _flag_Qgmr(i,j,d,e) == 'N' ) {
		_flag_Qgmr(i,j,d,e) = 'I';
	//Body for Qgmr
		Qgmr(i,j,d,e) = (((base_pair(seqr(i),seqr(j)))&&((j)>((i)+(3))))?((((j >= e+1 && d >= i+1))?(((eval_Q2r(N,M,MHL,i+1,d))*(eval_Q2r(N,M,MHL,e,j-1)))*(emulti(0,0,1)))+(eval_tempqgmr(N,M,MHL,i,j,d,e)):(((e == j && d >= i+1))?(eval_Q2r(N,M,MHL,i+1,d))*(emulti(0,0,1)):(((d == i && j >= e+1))?(eval_Q2r(N,M,MHL,e,j-1))*(emulti(0,0,1)):(emulti(0,0,1)))))):(0));
		_flag_Qgmr(i,j,d,e) = 'F';
	} else if ( _flag_Qgmr(i,j,d,e) == 'I' ) {
		printf("There is a self dependence on Qgmr at (%d,%d,%d,%d) \n",i,j,d,e);
		exit(-1);
	}
	return Qgmr(i,j,d,e);
}
double reduce_piRNAb2_tempqgmr_1(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q2r(N,M,MHL,e,f-1))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|h==i+1 && d==i+1 && dp==ip+1 && ip>=0 && jp>=ip+6 && N>=9 && M>=9 && MHL>=11 && ep>=0 && ep>=ip+3 && jp>=ep+2 && M>=jp+1 && ip>=ep-4 && f>=i+5 && j>=f+1 && j>=e+2 && i>=e-4 && M>=i+1 && e>=0 && M>=e+1 && f>=e+1 && M>=f && j>=i+6 && e>=i+3 && M>=j+1 && i>=0 && ip==i && jp==j && dp==d && ep==e}
		int c6;
		for(c6=ip+5;c6 <= jp-1;c6+=1)
		 {
		 	S0((ip),(jp),(ip+1),(ep),(ip+1),(c6));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgmr_2(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+((((eval_Q2r(N,M,MHL,h+1,d))*(eval_Q2r(N,M,MHL,e,f-1)))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==i+5 && h==i+1 && e==i+4 && d==i+2 && j==i+6 && ep==ip+4 && dp==ip+2 && jp==ip+6 && M>=ip+7 && ip>=0 && MHL>=11 && M>=9 && N>=9 && M>=i+7 && i>=0 && ip==i && jp==j && dp==d && ep==e}
		S0((ip),(ip+6),(ip+2),(ip+4),(ip+1),(ip+5));
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgmr_3(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+((((eval_Q2r(N,M,MHL,h+1,d))*(eval_Q2r(N,M,MHL,e,f-1)))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|h==i+1 && e==i+4 && d==i+2 && ep==ip+4 && dp==ip+2 && M>=ip+3 && ip>=0 && M>=jp+1 && jp>=ip+7 && N>=9 && M>=9 && MHL>=11 && M>=f && f>=i+5 && i>=0 && j>=f+1 && M>=j+1 && M>=i+5 && j>=i+7 && ip==i && jp==j && dp==d && ep==e}
		int c6;
		for(c6=ip+5;c6 <= jp-1;c6+=1)
		 {
		 	S0((ip),(jp),(ip+2),(ip+4),(ip+1),(c6));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgmr_4(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q2r(N,M,MHL,e,f-1))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|h==i+2 && e==i+4 && d==i+2 && ep==ip+4 && dp==ip+2 && ip>=0 && jp>=ip+7 && N>=9 && M>=9 && MHL>=11 && M>=jp+1 && M>=ip+3 && f>=i+6 && j>=f+1 && j>=i+7 && M>=f && M>=j+1 && i>=0 && M>=i+5 && ip==i && jp==j && dp==d && ep==e}
		int c6;
		for(c6=ip+6;c6 <= jp-1;c6+=1)
		 {
		 	S0((ip),(jp),(ip+2),(ip+4),(ip+2),(c6));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgmr_5(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+((((eval_Q2r(N,M,MHL,h+1,d))*(eval_Q2r(N,M,MHL,e,f-1)))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|ip>=0 && dp>=ip+2 && M>=dp+1 && jp>=ep+2 && jp>=ip+6 && N>=9 && M>=9 && MHL>=11 && M>=jp+1 && ep>=0 && ep>=ip+5 && M>=ip+1 && ep>=dp+4 && jp>=dp+5 && h>=i+1 && d>=h+1 && f>=e+1 && j>=f+1 && f>=h+4 && e>=i+5 && j>=e+2 && e>=d+4 && h>=-1 && M>=h+2 && j>=h+5 && M>=d+1 && M>=j+1 && j>=i+6 && M>=i+1 && e>=0 && M>=e+1 && i>=0 && M>=f && j>=d+5 && d>=i+2 && ip==i && jp==j && dp==d && ep==e}
		int c5,c6;
		for(c5=ip+1;c5 <= dp-1;c5+=1)
		 {
		 	for(c6=ep+1;c6 <= jp-1;c6+=1)
		 	 {
		 	 	S0((ip),(jp),(dp),(ep),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgmr_6(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q2r(N,M,MHL,e,f-1))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|h==d && M>=jp+1 && jp>=ep+2 && jp>=dp+5 && N>=9 && M>=9 && MHL>=11 && ep>=0 && dp>=ip+2 && ip>=0 && ep>=ip+5 && M>=ip+1 && M>=dp+1 && ep>=dp+4 && jp>=ip+6 && f>=e+1 && j>=f+1 && f>=d+4 && e>=i+5 && M>=d+1 && j>=e+2 && e>=0 && M>=e+1 && j>=d+5 && M>=f && d>=i+2 && M>=j+1 && j>=i+6 && i>=0 && M>=i+1 && e>=d+4 && ip==i && jp==j && dp==d && ep==e}
		int c6;
		for(c6=ep+1;c6 <= jp-1;c6+=1)
		 {
		 	S0((ip),(jp),(dp),(ep),(dp),(c6));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgmr_7(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q2r(N,M,MHL,h+1,d))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==e && M>=dp+1 && dp>=ip+2 && ep>=ip+5 && N>=9 && M>=9 && MHL>=11 && ip>=0 && M>=jp+1 && jp>=ep+2 && ep>=dp+4 && M>=ip+1 && jp>=dp+5 && ep>=0 && jp>=ip+6 && h>=i+1 && d>=h+1 && e>=h+4 && e>=d+4 && j>=d+5 && e>=i+5 && h>=-1 && M>=h+2 && j>=e+2 && M>=d+1 && j>=h+5 && M>=j+1 && j>=i+6 && i>=0 && M>=i+1 && e>=0 && d>=i+2 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+1;c5 <= dp-1;c5+=1)
		 {
		 	S0((ip),(jp),(dp),(ep),(c5),(ep));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgmr_8(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q2r(N,M,MHL,e,f-1))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|h==i+1 && d==i+1 && dp==ip+1 && M>=jp+1 && jp>=ep+2 && jp>=ip+6 && N>=9 && M>=9 && MHL>=11 && ep>=0 && M>=ip+1 && ip>=0 && ep>=ip+5 && f>=e+1 && j>=f+1 && f>=i+5 && M>=i+1 && i>=0 && e>=i+5 && e>=0 && M>=e+1 && j>=i+6 && M>=f && j>=e+2 && M>=j+1 && ip==i && jp==j && dp==d && ep==e}
		int c6;
		for(c6=ep+1;c6 <= jp-1;c6+=1)
		 {
		 	S0((ip),(jp),(ip+1),(ep),(ip+1),(c6));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgmr_9(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q2r(N,M,MHL,h+1,d))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==j-1 && e==j-1 && ep==jp-1 && M>=dp+1 && dp>=ip+2 && jp>=ip+6 && N>=9 && M>=9 && MHL>=11 && ip>=0 && M>=jp+1 && M>=ip+1 && jp>=dp+5 && h>=i+1 && d>=h+1 && j>=h+5 && M>=i+1 && i>=0 && j>=i+6 && h>=-1 && M>=h+2 && d>=i+2 && M>=d+1 && j>=d+5 && M>=j+1 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+1;c5 <= dp-1;c5+=1)
		 {
		 	S0((ip),(jp),(dp),(jp-1),(c5),(jp-1));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgmr_10(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+((((eval_Q2r(N,M,MHL,h+1,d))*(eval_Q2r(N,M,MHL,e,f-1)))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|e==d+3 && ep==dp+3 && ip>=0 && dp>=ip+2 && M>=dp+1 && jp>=dp+5 && jp>=ip+6 && N>=9 && M>=9 && MHL>=11 && M>=jp+1 && dp>=-3 && h>=i+1 && d>=h+1 && f>=d+4 && j>=f+1 && f>=h+4 && d>=i+2 && M>=f && i>=0 && h>=-1 && M>=h+2 && j>=h+5 && M>=d+4 && M>=j+1 && j>=i+6 && M>=i+1 && d>=-3 && j>=d+5 && ip==i && jp==j && dp==d && ep==e}
		int c5,c6;
		for(c5=ip+1;c5 <= dp-1;c5+=1)
		 {
		 	for(c6=dp+4;c6 <= jp-1;c6+=1)
		 	 {
		 	 	S0((ip),(jp),(dp),(dp+3),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgmr_11(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q2r(N,M,MHL,e,f-1))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|h==d && e==d+3 && ep==dp+3 && M>=jp+1 && jp>=dp+5 && dp>=-3 && N>=9 && M>=9 && MHL>=11 && jp>=ip+6 && dp>=ip+2 && ip>=0 && M>=dp+1 && f>=d+4 && j>=f+1 && M>=d+4 && M>=i+1 && j>=i+6 && M>=j+1 && d>=-3 && i>=0 && j>=d+5 && M>=f && d>=i+2 && ip==i && jp==j && dp==d && ep==e}
		int c6;
		for(c6=dp+4;c6 <= jp-1;c6+=1)
		 {
		 	S0((ip),(jp),(dp),(dp+3),(dp),(c6));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgmr_12(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q2r(N,M,MHL,h+1,d))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==d+3 && e==d+3 && ep==dp+3 && M>=dp+1 && dp>=ip+2 && dp>=-3 && N>=9 && M>=9 && MHL>=11 && ip>=0 && M>=jp+1 && jp>=dp+5 && jp>=ip+6 && h>=i+1 && d>=h+1 && j>=i+6 && d>=i+2 && M>=i+1 && d>=-3 && h>=-1 && M>=h+2 && j>=d+5 && M>=d+1 && j>=h+5 && M>=j+1 && i>=0 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+1;c5 <= dp-1;c5+=1)
		 {
		 	S0((ip),(jp),(dp),(dp+3),(c5),(dp+3));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgmr_13(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q2r(N,M,MHL,h+1,d))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==j-1 && e==j-1 && d==j-4 && ep==jp-1 && dp==jp-4 && M>=jp+1 && jp>=ip+6 && ip>=0 && N>=9 && M>=9 && MHL>=11 && h>=i+1 && j>=h+5 && j>=i+6 && M>=j+1 && M>=i+1 && i>=0 && h>=-1 && M>=h+2 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+1;c5 <= jp-5;c5+=1)
		 {
		 	S0((ip),(jp),(jp-4),(jp-1),(c5),(jp-1));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgmr_14(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+((((eval_Q2r(N,M,MHL,h+1,d))*(eval_Q2r(N,M,MHL,e,f-1)))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==j-1 && e==j-2 && d==j-4 && ep==jp-2 && dp==jp-4 && ip>=0 && jp>=ip+7 && M>=jp+1 && MHL>=11 && M>=9 && N>=9 && jp>=2 && h>=i+1 && j>=h+5 && M>=i+1 && M>=j+1 && i>=0 && j>=i+7 && j>=2 && M>=h+2 && h>=-1 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+1;c5 <= jp-5;c5+=1)
		 {
		 	S0((ip),(jp),(jp-4),(jp-2),(c5),(jp-1));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgmr_15(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q2r(N,M,MHL,h+1,d))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==j-2 && e==j-2 && d==j-4 && ep==jp-2 && dp==jp-4 && M>=jp+1 && jp>=ip+7 && M>=9 && N>=9 && jp>=2 && MHL>=11 && ip>=0 && h>=i+1 && j>=h+6 && i>=0 && j>=i+7 && j>=2 && M>=j+1 && h>=-1 && M>=h+2 && M>=i+1 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+1;c5 <= jp-6;c5+=1)
		 {
		 	S0((ip),(jp),(jp-4),(jp-2),(c5),(jp-2));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgmr_16(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+((((eval_Q2r(N,M,MHL,h+1,d))*(eval_Q2r(N,M,MHL,e,f-1)))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|e==d+2 && ep==dp+2 && ip>=0 && dp>=ip+3 && M>=dp+1 && jp>=dp+5 && jp>=ip+6 && N>=9 && M>=9 && MHL>=11 && M>=jp+1 && dp>=-2 && h>=i+1 && d>=h+1 && f>=d+3 && j>=f+1 && f>=h+4 && d>=i+3 && M>=f && i>=0 && h>=-1 && M>=h+2 && j>=h+5 && M>=d+3 && M>=j+1 && j>=i+6 && M>=i+1 && d>=-2 && j>=d+5 && ip==i && jp==j && dp==d && ep==e}
		int c5,c6;
		for(c5=ip+1;c5 <= dp-1;c5+=1)
		 {
		 	for(c6=dp+3;c6 <= jp-1;c6+=1)
		 	 {
		 	 	S0((ip),(jp),(dp),(dp+2),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgmr_17(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q2r(N,M,MHL,h+1,d))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==d+2 && e==d+2 && ep==dp+2 && M>=dp+1 && dp>=ip+3 && dp>=-2 && N>=9 && M>=9 && MHL>=11 && ip>=0 && M>=jp+1 && jp>=dp+5 && jp>=ip+6 && h>=i+1 && d>=h+2 && j>=i+6 && d>=i+3 && M>=i+1 && d>=-2 && h>=-1 && M>=h+2 && j>=d+5 && M>=d+1 && j>=h+5 && M>=j+1 && i>=0 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+1;c5 <= dp-2;c5+=1)
		 {
		 	S0((ip),(jp),(dp),(dp+2),(c5),(dp+2));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgmr_18(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q2r(N,M,MHL,e,f-1))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|h==d && e==d+2 && ep==dp+2 && M>=jp+1 && jp>=dp+5 && dp>=-2 && N>=9 && M>=9 && MHL>=11 && jp>=ip+6 && dp>=ip+3 && ip>=0 && M>=dp+1 && f>=d+4 && j>=f+1 && M>=d+3 && M>=i+1 && j>=i+6 && M>=j+1 && d>=-2 && i>=0 && j>=d+5 && M>=f && d>=i+3 && ip==i && jp==j && dp==d && ep==e}
		int c6;
		for(c6=dp+4;c6 <= jp-1;c6+=1)
		 {
		 	S0((ip),(jp),(dp),(dp+2),(dp),(c6));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempqgmr_19(long N, long M, long MHL, int ip, int jp, int dp, int ep){
	double reduceVar = 0;
	#define S0(i,j,d,e,h,f) reduceVar = (reduceVar)+(((eval_Q2r(N,M,MHL,h+1,d))*(eval_Qgr(N,M,MHL,i,j,h,f)))*(emulti(0,0,1)))
	{
		//Domain
		//{i,j,d,e,h,f|f==j-1 && e==j-1 && d==j-3 && ep==jp-1 && dp==jp-3 && M>=jp+1 && jp>=ip+6 && ip>=0 && N>=9 && M>=9 && MHL>=11 && h>=i+1 && j>=h+5 && j>=i+6 && M>=j+1 && M>=i+1 && i>=0 && h>=-1 && M>=h+2 && ip==i && jp==j && dp==d && ep==e}
		int c5;
		for(c5=ip+1;c5 <= jp-5;c5+=1)
		 {
		 	S0((ip),(jp),(jp-3),(jp-1),(c5),(jp-1));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempqgmr(long N, long M, long MHL, int i, int j, int d, int e){
	if ( _flag_tempqgmr(i,j,d,e) == 'N' ) {
		_flag_tempqgmr(i,j,d,e) = 'I';
	//Body for tempqgmr
		tempqgmr(i,j,d,e) = (((i >= j-5))?0:(((d == i+1 && j >= i+6 && i >= e-4))?reduce_piRNAb2_tempqgmr_1(N,M,MHL,i,j,d,e):(((e == i+4 && d == i+2 && j == i+6))?reduce_piRNAb2_tempqgmr_2(N,M,MHL,i,j,d,e):(((e == i+4 && d == i+2 && j >= i+7))?(reduce_piRNAb2_tempqgmr_3(N,M,MHL,i,j,d,e))+(reduce_piRNAb2_tempqgmr_4(N,M,MHL,i,j,d,e)):(((j >= e+2 && e >= d+4 && d >= i+2))?(((reduce_piRNAb2_tempqgmr_5(N,M,MHL,i,j,d,e))+(reduce_piRNAb2_tempqgmr_6(N,M,MHL,i,j,d,e)))+(reduce_piRNAb2_tempqgmr_7(N,M,MHL,i,j,d,e)))+((eval_Qgr(N,M,MHL,i,j,d,e))*(emulti(0,0,1))):(((d == i+1 && e >= i+5 && j >= e+2))?(reduce_piRNAb2_tempqgmr_8(N,M,MHL,i,j,d,e))+((eval_Qgr(N,M,MHL,i,j,d,e))*(emulti(0,0,1))):(((e == j-1 && d >= i+2 && j >= d+5))?(reduce_piRNAb2_tempqgmr_9(N,M,MHL,i,j,d,e))+((eval_Qgr(N,M,MHL,i,j,d,e))*(emulti(0,0,1))):(((e == j-1 && d == i+1 && j >= i+6))?(eval_Qgr(N,M,MHL,i,j,d,e))*(emulti(0,0,1)):(((e == d+3 && d >= i+2 && j >= d+5))?((reduce_piRNAb2_tempqgmr_10(N,M,MHL,i,j,d,e))+(reduce_piRNAb2_tempqgmr_11(N,M,MHL,i,j,d,e)))+(reduce_piRNAb2_tempqgmr_12(N,M,MHL,i,j,d,e)):(((e == j-1 && d == j-4 && j >= i+6))?reduce_piRNAb2_tempqgmr_13(N,M,MHL,i,j,d,e):(((e == j-2 && d == j-4 && j >= i+7))?(reduce_piRNAb2_tempqgmr_14(N,M,MHL,i,j,d,e))+(reduce_piRNAb2_tempqgmr_15(N,M,MHL,i,j,d,e)):(((e == d+2 && d >= i+3 && j >= d+5))?((reduce_piRNAb2_tempqgmr_16(N,M,MHL,i,j,d,e))+(reduce_piRNAb2_tempqgmr_17(N,M,MHL,i,j,d,e)))+(reduce_piRNAb2_tempqgmr_18(N,M,MHL,i,j,d,e)):(reduce_piRNAb2_tempqgmr_19(N,M,MHL,i,j,d,e))))))))))))));
		_flag_tempqgmr(i,j,d,e) = 'F';
	} else if ( _flag_tempqgmr(i,j,d,e) == 'I' ) {
		printf("There is a self dependence on tempqgmr at (%d,%d,%d,%d) \n",i,j,d,e);
		exit(-1);
	}
	return tempqgmr(i,j,d,e);
}
unsigned char eval_seq1(long N, long M, long MHL, int i){
	if ( _flag_seq1(i) == 'N' ) {
		_flag_seq1(i) = 'I';
	//Body for seq1
		seq1(i) = seqr(-i+M-1);
		_flag_seq1(i) = 'F';
	} else if ( _flag_seq1(i) == 'I' ) {
		printf("There is a self dependence on seq1 at (%d) \n",i);
		exit(-1);
	}
	return seq1(i);
}
double eval_Q01(long N, long M, long MHL, int i, int j){
	if ( _flag_Q01(i,j) == 'N' ) {
		_flag_Q01(i,j) = 'I';
	//Body for Q01
		Q01(i,j) = eval_Q0r(N,M,MHL,-j+M-1,-i+M-1);
		_flag_Q01(i,j) = 'F';
	} else if ( _flag_Q01(i,j) == 'I' ) {
		printf("There is a self dependence on Q01 at (%d,%d) \n",i,j);
		exit(-1);
	}
	return Q01(i,j);
}
double eval_Q11(long N, long M, long MHL, int i, int j){
	if ( _flag_Q11(i,j) == 'N' ) {
		_flag_Q11(i,j) = 'I';
	//Body for Q11
		Q11(i,j) = eval_Q1r(N,M,MHL,-j+M-1,-i+M-1);
		_flag_Q11(i,j) = 'F';
	} else if ( _flag_Q11(i,j) == 'I' ) {
		printf("There is a self dependence on Q11 at (%d,%d) \n",i,j);
		exit(-1);
	}
	return Q11(i,j);
}
double eval_Q21(long N, long M, long MHL, int i, int j){
	if ( _flag_Q21(i,j) == 'N' ) {
		_flag_Q21(i,j) = 'I';
	//Body for Q21
		Q21(i,j) = eval_Q2r(N,M,MHL,-j+M-1,-i+M-1);
		_flag_Q21(i,j) = 'F';
	} else if ( _flag_Q21(i,j) == 'I' ) {
		printf("There is a self dependence on Q21 at (%d,%d) \n",i,j);
		exit(-1);
	}
	return Q21(i,j);
}
double eval_Qm01(long N, long M, long MHL, int i, int j){
	if ( _flag_Qm01(i,j) == 'N' ) {
		_flag_Qm01(i,j) = 'I';
	//Body for Qm01
		Qm01(i,j) = eval_Qm0r(N,M,MHL,-j+M-1,-i+M-1);
		_flag_Qm01(i,j) = 'F';
	} else if ( _flag_Qm01(i,j) == 'I' ) {
		printf("There is a self dependence on Qm01 at (%d,%d) \n",i,j);
		exit(-1);
	}
	return Qm01(i,j);
}
double eval_Qm11(long N, long M, long MHL, int i, int j){
	if ( _flag_Qm11(i,j) == 'N' ) {
		_flag_Qm11(i,j) = 'I';
	//Body for Qm11
		Qm11(i,j) = eval_Qm1r(N,M,MHL,-j+M-1,-i+M-1);
		_flag_Qm11(i,j) = 'F';
	} else if ( _flag_Qm11(i,j) == 'I' ) {
		printf("There is a self dependence on Qm11 at (%d,%d) \n",i,j);
		exit(-1);
	}
	return Qm11(i,j);
}
double eval_Qgk1(long N, long M, long MHL, int i, int j, int d, int e){
	if ( _flag_Qgk1(i,j,d,e) == 'N' ) {
		_flag_Qgk1(i,j,d,e) = 'I';
	//Body for Qgk1
		Qgk1(i,j,d,e) = eval_Qgkr(N,M,MHL,-j+M-1,-i+M-1,-e+M-1,-d+M-1);
		_flag_Qgk1(i,j,d,e) = 'F';
	} else if ( _flag_Qgk1(i,j,d,e) == 'I' ) {
		printf("There is a self dependence on Qgk1 at (%d,%d,%d,%d) \n",i,j,d,e);
		exit(-1);
	}
	return Qgk1(i,j,d,e);
}
double eval_Qgm1(long N, long M, long MHL, int i, int j, int d, int e){
	if ( _flag_Qgm1(i,j,d,e) == 'N' ) {
		_flag_Qgm1(i,j,d,e) = 'I';
	//Body for Qgm1
		Qgm1(i,j,d,e) = eval_Qgmr(N,M,MHL,-j+M-1,-i+M-1,-e+M-1,-d+M-1);
		_flag_Qgm1(i,j,d,e) = 'F';
	} else if ( _flag_Qgm1(i,j,d,e) == 'I' ) {
		printf("There is a self dependence on Qgm1 at (%d,%d,%d,%d) \n",i,j,d,e);
		exit(-1);
	}
	return Qgm1(i,j,d,e);
}
double reduce_piRNAb2_Qih0_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Qih0(N,M,MHL,d,j1,i2+1,j2))*(eintbi(i1,i2,d,i2+1)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2+2 && j2p==i2p+2 && j1p>=1 && j1p>=i1p+3 && MHL>=11 && N>=9 && M>=9 && i2p>=0 && MHL+i1p>=1 && N>=i1p+2 && M>=i2p+3 && N>=j1p+1 && i1p>=0 && d>=i1+2 && j1>=d+1 && i1+MHL>=d+1 && N>=i1+2 && j1>=i1+3 && j1>=1 && d>=0 && N>=d+1 && M>=i2+3 && N>=j1+1 && i2>=0 && i1>=0 && i1+MHL>=1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+2;c5 <= min(j1p-1,MHL+i1p-1);c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p+2),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qih0_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Qih0(N,M,MHL,i1+1,j1,e,j2))*(eintbi(i1,i2,i1+1,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1+2 && j1p==i1p+2 && j2p>=1 && j2p>=i2p+3 && MHL>=11 && N>=9 && M>=9 && MHL+i2p>=1 && i1p>=0 && M>=j2p+1 && i2p>=0 && N>=i1p+3 && M>=i2p+2 && e>=i2+2 && j2>=e+1 && i2+MHL>=e+1 && i2>=0 && j2>=i2+3 && j2>=1 && i1>=0 && N>=i1+3 && i2+MHL>=1 && M>=i2+2 && e>=0 && M>=e+1 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+2;c5 <= min(j2p-1,MHL+i2p-1);c5+=1)
		 {
		 	S0((i1p),(i1p+2),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qih0_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Qih0(N,M,MHL,i1+1,j1,e,j2))*(eintbi(i1,i2,i1+1,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j2p>=1 && j2p>=i2p+3 && MHL>=11 && N>=9 && M>=9 && MHL+i2p>=1 && i1p>=0 && M>=j2p+1 && j1p>=i1p+3 && N>=j1p+1 && j1p>=1 && N>=i1p+2 && MHL+i1p>=1 && M>=i2p+2 && i2p>=0 && e>=i2+2 && j2>=e+1 && i2+MHL>=e+1 && j1>=1 && i2+MHL>=1 && i1+MHL>=1 && i1>=0 && N>=i1+2 && j1>=i1+3 && N>=j1+1 && e>=0 && M>=e+1 && M>=j2+1 && j2>=1 && j2>=i2+3 && i2>=0 && M>=i2+2 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+2;c5 <= min(j2p-1,MHL+i2p-1);c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qih0_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Qih0(N,M,MHL,d,j1,i2+1,j2))*(eintbi(i1,i2,d,i2+1)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j1p>=1 && j1p>=i1p+3 && MHL>=11 && N>=9 && M>=9 && i2p>=0 && MHL+i1p>=1 && j2p>=i2p+3 && M>=j2p+1 && N>=j1p+1 && i1p>=0 && N>=i1p+2 && MHL+i2p>=1 && j2p>=1 && M>=i2p+2 && d>=i1+2 && j1>=d+1 && i1+MHL>=d+1 && i1+MHL>=1 && i1>=0 && N>=i1+2 && d>=0 && N>=d+1 && M>=j2+1 && N>=j1+1 && i2>=0 && M>=i2+2 && j2>=i2+3 && j1>=1 && j1>=i1+3 && j2>=1 && i2+MHL>=1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+2;c5 <= min(j1p-1,MHL+i1p-1);c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qih0_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qih0(N,M,MHL,d,j1,e,j2))*(eintbi(i1,i2,d,e)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|j1p>=1 && j1p>=i1p+3 && j2p>=1 && j2p>=i2p+3 && MHL>=11 && M>=j2p+1 && N>=9 && M>=9 && N>=j1p+1 && MHL+i1p>=1 && MHL+i2p>=1 && i1p>=0 && N>=i1p+2 && M>=i2p+2 && i2p>=0 && d>=i1+2 && j1>=d+1 && e>=i2+2 && j2>=e+1 && i1+MHL>=d+1 && i2+MHL>=e+1 && i1+MHL>=1 && i2+MHL>=1 && i1>=0 && d>=0 && N>=d+1 && M>=j2+1 && N>=j1+1 && e>=0 && M>=e+1 && j1>=1 && j1>=i1+3 && j2>=1 && j2>=i2+3 && i2>=0 && M>=i2+2 && N>=i1+2 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+2;c5 <= min(j1p-1,MHL+i1p-1);c5+=1)
		 {
		 	for(c6=i2p+2;c6 <= min(j2p-1,MHL+i2p-1);c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_Qih0(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qih0(i1,j1,i2,j2) == 'N' ) {
		_flag_Qih0(i1,j1,i2,j2) = 'I';
	//Body for Qih0
		Qih0(i1,j1,i2,j2) = (((base_pair(seq0(i1),eval_seq1(N,M,MHL,i2)))&&(base_pair(seq0(j1),eval_seq1(N,M,MHL,j2))))?((((j2 == i2 && j1 == i1))?(noisolate(0))+(eintbi(i1,i2,j1,j2)):(((j2 == i2+1 && j1 == i1+1))?eintstack(0,i1,i2):(((j2 == i2+2 && j1 >= i1+3))?((eintbi(i1,i2,j1,j2))+((eval_Qih0(N,M,MHL,i1+1,j1,i2+1,j2))*(eintstack(0,i1,i2))))+(reduce_piRNAb2_Qih0_1(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1+2 && j2 >= i2+3))?((eintbi(i1,i2,j1,j2))+((eval_Qih0(N,M,MHL,i1+1,j1,i2+1,j2))*(eintstack(0,i1,i2))))+(reduce_piRNAb2_Qih0_2(N,M,MHL,i1,j1,i2,j2)):(((j2 >= i2+3 && j1 >= i1+3))?((((eintbi(i1,i2,j1,j2))+((eval_Qih0(N,M,MHL,i1+1,j1,i2+1,j2))*(eintstack(0,i1,i2))))+(reduce_piRNAb2_Qih0_3(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_Qih0_4(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_Qih0_5(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2+2 && j1 == i1+2))?(eintbi(i1,i2,j1,j2))+((eval_Qih0(N,M,MHL,i1+1,j1,i2+1,j2))*(eintstack(0,i1,i2))):(eintbi(i1,i2,j1,j2))))))))):(0));
		_flag_Qih0(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qih0(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qih0 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qih0(i1,j1,i2,j2);
}
double reduce_piRNAb2_Qih1_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Qih1(N,M,MHL,d,j1,i2+1,j2))*(ekissingbi(i1,i2,d,i2+1)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2+2 && j2p==i2p+2 && j1p>=1 && j1p>=i1p+3 && MHL>=11 && N>=9 && M>=9 && i2p>=0 && MHL+i1p>=1 && N>=i1p+2 && M>=i2p+3 && N>=j1p+1 && i1p>=0 && d>=i1+2 && j1>=d+1 && i1+MHL>=d+1 && N>=i1+2 && j1>=i1+3 && j1>=1 && d>=0 && N>=d+1 && M>=i2+3 && N>=j1+1 && i2>=0 && i1>=0 && i1+MHL>=1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+2;c5 <= min(j1p-1,MHL+i1p-1);c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p+2),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qih1_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Qih1(N,M,MHL,i1+1,j1,e,j2))*(ekissingbi(i1,i2,i1+1,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1+2 && j1p==i1p+2 && j2p>=1 && j2p>=i2p+3 && MHL>=11 && N>=9 && M>=9 && MHL+i2p>=1 && i1p>=0 && M>=j2p+1 && i2p>=0 && N>=i1p+3 && M>=i2p+2 && e>=i2+2 && j2>=e+1 && i2+MHL>=e+1 && i2>=0 && j2>=i2+3 && j2>=1 && i1>=0 && N>=i1+3 && i2+MHL>=1 && M>=i2+2 && e>=0 && M>=e+1 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+2;c5 <= min(j2p-1,MHL+i2p-1);c5+=1)
		 {
		 	S0((i1p),(i1p+2),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qih1_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Qih1(N,M,MHL,i1+1,j1,e,j2))*(ekissingbi(i1,i2,i1+1,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j2p>=1 && j2p>=i2p+3 && MHL>=11 && N>=9 && M>=9 && MHL+i2p>=1 && i1p>=0 && M>=j2p+1 && j1p>=i1p+3 && N>=j1p+1 && j1p>=1 && N>=i1p+2 && MHL+i1p>=1 && M>=i2p+2 && i2p>=0 && e>=i2+2 && j2>=e+1 && i2+MHL>=e+1 && j1>=1 && i2+MHL>=1 && i1+MHL>=1 && i1>=0 && N>=i1+2 && j1>=i1+3 && N>=j1+1 && e>=0 && M>=e+1 && M>=j2+1 && j2>=1 && j2>=i2+3 && i2>=0 && M>=i2+2 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+2;c5 <= min(j2p-1,MHL+i2p-1);c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qih1_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Qih1(N,M,MHL,d,j1,i2+1,j2))*(ekissingbi(i1,i2,d,i2+1)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j1p>=1 && j1p>=i1p+3 && MHL>=11 && N>=9 && M>=9 && i2p>=0 && MHL+i1p>=1 && j2p>=i2p+3 && M>=j2p+1 && N>=j1p+1 && i1p>=0 && N>=i1p+2 && MHL+i2p>=1 && j2p>=1 && M>=i2p+2 && d>=i1+2 && j1>=d+1 && i1+MHL>=d+1 && i1+MHL>=1 && i1>=0 && N>=i1+2 && d>=0 && N>=d+1 && M>=j2+1 && N>=j1+1 && i2>=0 && M>=i2+2 && j2>=i2+3 && j1>=1 && j1>=i1+3 && j2>=1 && i2+MHL>=1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+2;c5 <= min(j1p-1,MHL+i1p-1);c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qih1_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qih1(N,M,MHL,d,j1,e,j2))*(ekissingbi(i1,i2,d,e)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|j1p>=1 && j1p>=i1p+3 && j2p>=1 && j2p>=i2p+3 && MHL>=11 && M>=j2p+1 && N>=9 && M>=9 && N>=j1p+1 && MHL+i1p>=1 && MHL+i2p>=1 && i1p>=0 && N>=i1p+2 && M>=i2p+2 && i2p>=0 && d>=i1+2 && j1>=d+1 && e>=i2+2 && j2>=e+1 && i1+MHL>=d+1 && i2+MHL>=e+1 && i1+MHL>=1 && i2+MHL>=1 && i1>=0 && d>=0 && N>=d+1 && M>=j2+1 && N>=j1+1 && e>=0 && M>=e+1 && j1>=1 && j1>=i1+3 && j2>=1 && j2>=i2+3 && i2>=0 && M>=i2+2 && N>=i1+2 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+2;c5 <= min(j1p-1,MHL+i1p-1);c5+=1)
		 {
		 	for(c6=i2p+2;c6 <= min(j2p-1,MHL+i2p-1);c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_Qih1(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qih1(i1,j1,i2,j2) == 'N' ) {
		_flag_Qih1(i1,j1,i2,j2) = 'I';
	//Body for Qih1
		Qih1(i1,j1,i2,j2) = (((base_pair(seq0(i1),eval_seq1(N,M,MHL,i2)))&&(base_pair(seq0(j1),eval_seq1(N,M,MHL,j2))))?((((j2 == i2 && j1 == i1))?(noisolate(0))+(ekissingbi(i1,i2,j1,j2)):(((j2 == i2+1 && j1 == i1+1))?ekissingstack(0,i1,i2):(((j2 == i2+2 && j1 >= i1+3))?((ekissingbi(i1,i2,j1,j2))+((eval_Qih1(N,M,MHL,i1+1,j1,i2+1,j2))*(ekissingstack(0,i1,i2))))+(reduce_piRNAb2_Qih1_1(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1+2 && j2 >= i2+3))?((ekissingbi(i1,i2,j1,j2))+((eval_Qih1(N,M,MHL,i1+1,j1,i2+1,j2))*(ekissingstack(0,i1,i2))))+(reduce_piRNAb2_Qih1_2(N,M,MHL,i1,j1,i2,j2)):(((j2 >= i2+3 && j1 >= i1+3))?((((ekissingbi(i1,i2,j1,j2))+((eval_Qih1(N,M,MHL,i1+1,j1,i2+1,j2))*(ekissingstack(0,i1,i2))))+(reduce_piRNAb2_Qih1_3(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_Qih1_4(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_Qih1_5(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2+2 && j1 == i1+2))?(ekissingbi(i1,i2,j1,j2))+((eval_Qih1(N,M,MHL,i1+1,j1,i2+1,j2))*(ekissingstack(0,i1,i2))):(ekissingbi(i1,i2,j1,j2))))))))):(0));
		_flag_Qih1(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qih1(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qih1 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qih1(i1,j1,i2,j2);
}
double reduce_piRNAb2_Qihh00_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((((eval_Qih0(N,M,MHL,i1,d,i2,e))*(eintstackpenalty(0)))*(eaupenalty(i1,i2,d,e)))*(eval_Q00(N,M,MHL,d+1,j1)))*(eval_Q01(N,M,MHL,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && M>=j2+1 && N>=d+2 && i2>=0 && M>=i2+1 && e>=-1 && M>=e+2 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qihh00_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((((eval_Qih0(N,M,MHL,i1,d,i2,j2))*(eintstackpenalty(0)))*(eaupenalty(i1,i2,d,j2)))*(eval_Q00(N,M,MHL,d+1,j1)))
	{
		//Domain
		//{i1,j1,i2,j2,d|i2p>=0 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=j2p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && d>=-1 && M>=j2+1 && i1>=0 && N>=i1+1 && N>=j1+1 && N>=d+2 && i2>=0 && M>=i2+1 && j2>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qihh00_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((((eval_Qih0(N,M,MHL,i1,j1,i2,e))*(eintstackpenalty(0)))*(eaupenalty(i1,i2,j1,e)))*(eval_Q01(N,M,MHL,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && e>=-1 && M>=e+2 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=j1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qihh00_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((((eval_Qih0(N,M,MHL,i1,j1,i2,e))*(eintstackpenalty(0)))*(eaupenalty(i1,i2,j1,e)))*(eval_Q01(N,M,MHL,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && M>=e+2 && j2>=i2+1 && M>=j2+1 && i1>=0 && N>=i1+1 && e>=-1 && M>=i2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qihh00_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((((eval_Qih0(N,M,MHL,i1,d,i2,j2))*(eintstackpenalty(0)))*(eaupenalty(i1,i2,d,j2)))*(eval_Q00(N,M,MHL,d+1,j1)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && i2p>=0 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && M>=i2p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && d>=-1 && M>=i2+1 && i1>=0 && N>=i1+1 && N>=j1+1 && N>=d+2 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_Qihh00(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qihh00(i1,j1,i2,j2) == 'N' ) {
		_flag_Qihh00(i1,j1,i2,j2) = 'I';
	//Body for Qihh00
		Qihh00(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_Qihh00_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_Qihh00_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_Qihh00_3(N,M,MHL,i1,j1,i2,j2)))+(((eval_Qih0(N,M,MHL,i1,j1,i2,j2))*(eintstackpenalty(0)))*(eaupenalty(i1,i2,j1,j2))):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_Qihh00_4(N,M,MHL,i1,j1,i2,j2))+(((eval_Qih0(N,M,MHL,i1,j1,i2,j2))*(eintstackpenalty(0)))*(eaupenalty(i1,i2,j1,j2))):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_Qihh00_5(N,M,MHL,i1,j1,i2,j2))+(((eval_Qih0(N,M,MHL,i1,j1,i2,j2))*(eintstackpenalty(0)))*(eaupenalty(i1,i2,j1,j2))):(((eval_Qih0(N,M,MHL,i1,j1,i2,j2))*(eintstackpenalty(0)))*(eaupenalty(i1,i2,j1,j2))))));
		_flag_Qihh00(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qihh00(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qihh00 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qihh00(i1,j1,i2,j2);
}
double reduce_piRNAb2_Qihh01_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((((eval_Qih1(N,M,MHL,i1,d,i2,e))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,d,e)))*(eval_Q00(N,M,MHL,d+1,j1)))*(eval_Q11(N,M,MHL,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && M>=j2+1 && N>=d+2 && i2>=0 && M>=i2+1 && e>=-1 && M>=e+2 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qihh01_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((((eval_Qih1(N,M,MHL,i1,d,i2,j2))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,d,j2)))*(eval_Q00(N,M,MHL,d+1,j1)))
	{
		//Domain
		//{i1,j1,i2,j2,d|i2p>=0 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=j2p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && d>=-1 && M>=j2+1 && i1>=0 && N>=i1+1 && N>=j1+1 && N>=d+2 && i2>=0 && M>=i2+1 && j2>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qihh01_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((((eval_Qih1(N,M,MHL,i1,j1,i2,e))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,j1,e)))*(eval_Q11(N,M,MHL,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && e>=-1 && M>=e+2 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=j1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qihh01_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((((eval_Qih1(N,M,MHL,i1,j1,i2,e))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,j1,e)))*(eval_Q11(N,M,MHL,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && M>=e+2 && j2>=i2+1 && M>=j2+1 && i1>=0 && N>=i1+1 && e>=-1 && M>=i2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qihh01_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((((eval_Qih1(N,M,MHL,i1,d,i2,j2))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,d,j2)))*(eval_Q00(N,M,MHL,d+1,j1)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && i2p>=0 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && M>=i2p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && d>=-1 && M>=i2+1 && i1>=0 && N>=i1+1 && N>=j1+1 && N>=d+2 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_Qihh01(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qihh01(i1,j1,i2,j2) == 'N' ) {
		_flag_Qihh01(i1,j1,i2,j2) = 'I';
	//Body for Qihh01
		Qihh01(i1,j1,i2,j2) = ((base_pair(seq0(i1),eval_seq1(N,M,MHL,i2)))?((((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_Qihh01_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_Qihh01_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_Qihh01_3(N,M,MHL,i1,j1,i2,j2)))+(((eval_Qih1(N,M,MHL,i1,j1,i2,j2))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,j1,j2))):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_Qihh01_4(N,M,MHL,i1,j1,i2,j2))+(((eval_Qih1(N,M,MHL,i1,j1,i2,j2))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,j1,j2))):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_Qihh01_5(N,M,MHL,i1,j1,i2,j2))+(((eval_Qih1(N,M,MHL,i1,j1,i2,j2))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,j1,j2))):(((eval_Qih1(N,M,MHL,i1,j1,i2,j2))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,j1,j2))))))):(0));
		_flag_Qihh01(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qihh01(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qihh01 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qihh01(i1,j1,i2,j2);
}
double reduce_piRNAb2_Qihh10_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((((eval_Qih1(N,M,MHL,i1,d,i2,e))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,d,e)))*(eval_Q10(N,M,MHL,d+1,j1)))*(eval_Q01(N,M,MHL,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && M>=j2+1 && N>=d+2 && i2>=0 && M>=i2+1 && e>=-1 && M>=e+2 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qihh10_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((((eval_Qih1(N,M,MHL,i1,d,i2,j2))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,d,j2)))*(eval_Q10(N,M,MHL,d+1,j1)))
	{
		//Domain
		//{i1,j1,i2,j2,d|i2p>=0 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=j2p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && d>=-1 && M>=j2+1 && i1>=0 && N>=i1+1 && N>=j1+1 && N>=d+2 && i2>=0 && M>=i2+1 && j2>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qihh10_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((((eval_Qih1(N,M,MHL,i1,j1,i2,e))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,j1,e)))*(eval_Q01(N,M,MHL,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && e>=-1 && M>=e+2 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=j1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qihh10_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((((eval_Qih1(N,M,MHL,i1,j1,i2,e))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,j1,e)))*(eval_Q01(N,M,MHL,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && M>=e+2 && j2>=i2+1 && M>=j2+1 && i1>=0 && N>=i1+1 && e>=-1 && M>=i2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qihh10_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((((eval_Qih1(N,M,MHL,i1,d,i2,j2))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,d,j2)))*(eval_Q10(N,M,MHL,d+1,j1)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && i2p>=0 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && M>=i2p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && d>=-1 && M>=i2+1 && i1>=0 && N>=i1+1 && N>=j1+1 && N>=d+2 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_Qihh10(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qihh10(i1,j1,i2,j2) == 'N' ) {
		_flag_Qihh10(i1,j1,i2,j2) = 'I';
	//Body for Qihh10
		Qihh10(i1,j1,i2,j2) = ((base_pair(seq0(i1),eval_seq1(N,M,MHL,i2)))?((((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_Qihh10_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_Qihh10_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_Qihh10_3(N,M,MHL,i1,j1,i2,j2)))+(((eval_Qih1(N,M,MHL,i1,j1,i2,j2))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,j1,j2))):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_Qihh10_4(N,M,MHL,i1,j1,i2,j2))+(((eval_Qih1(N,M,MHL,i1,j1,i2,j2))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,j1,j2))):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_Qihh10_5(N,M,MHL,i1,j1,i2,j2))+(((eval_Qih1(N,M,MHL,i1,j1,i2,j2))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,j1,j2))):(((eval_Qih1(N,M,MHL,i1,j1,i2,j2))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,j1,j2))))))):(0));
		_flag_Qihh10(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qihh10(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qihh10 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qihh10(i1,j1,i2,j2);
}
double reduce_piRNAb2_Qihh11_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((((eval_Qih1(N,M,MHL,i1,d,i2,e))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,d,e)))*(eval_Q10(N,M,MHL,d+1,j1)))*(eval_Q11(N,M,MHL,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && M>=j2+1 && N>=d+2 && i2>=0 && M>=i2+1 && e>=-1 && M>=e+2 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qihh11_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((((eval_Qih1(N,M,MHL,i1,d,i2,j2))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,d,j2)))*(eval_Q10(N,M,MHL,d+1,j1)))
	{
		//Domain
		//{i1,j1,i2,j2,d|i2p>=0 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=j2p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && d>=-1 && M>=j2+1 && i1>=0 && N>=i1+1 && N>=j1+1 && N>=d+2 && i2>=0 && M>=i2+1 && j2>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qihh11_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((((eval_Qih1(N,M,MHL,i1,j1,i2,e))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,j1,e)))*(eval_Q11(N,M,MHL,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && e>=-1 && M>=e+2 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=j1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qihh11_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((((eval_Qih1(N,M,MHL,i1,j1,i2,e))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,j1,e)))*(eval_Q11(N,M,MHL,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && M>=e+2 && j2>=i2+1 && M>=j2+1 && i1>=0 && N>=i1+1 && e>=-1 && M>=i2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qihh11_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((((eval_Qih1(N,M,MHL,i1,d,i2,j2))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,d,j2)))*(eval_Q10(N,M,MHL,d+1,j1)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && i2p>=0 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && M>=i2p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && d>=-1 && M>=i2+1 && i1>=0 && N>=i1+1 && N>=j1+1 && N>=d+2 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_Qihh11(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qihh11(i1,j1,i2,j2) == 'N' ) {
		_flag_Qihh11(i1,j1,i2,j2) = 'I';
	//Body for Qihh11
		Qihh11(i1,j1,i2,j2) = ((base_pair(seq0(i1),eval_seq1(N,M,MHL,i2)))?((((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_Qihh11_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_Qihh11_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_Qihh11_3(N,M,MHL,i1,j1,i2,j2)))+(((eval_Qih1(N,M,MHL,i1,j1,i2,j2))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,j1,j2))):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_Qihh11_4(N,M,MHL,i1,j1,i2,j2))+(((eval_Qih1(N,M,MHL,i1,j1,i2,j2))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,j1,j2))):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_Qihh11_5(N,M,MHL,i1,j1,i2,j2))+(((eval_Qih1(N,M,MHL,i1,j1,i2,j2))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,j1,j2))):(((eval_Qih1(N,M,MHL,i1,j1,i2,j2))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,j1,j2))))))):(0));
		_flag_Qihh11(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qihh11(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qihh11 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qihh11(i1,j1,i2,j2);
}
double reduce_piRNAb2_Qihm00_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((((eval_Qih0(N,M,MHL,i1,d,i2,e))*(eintstackpenalty(0)))*(eaupenalty(i1,i2,d,e)))*(((eval_Qm00(N,M,MHL,d+1,j1))*(eval_Q01(N,M,MHL,e+1,j2)))+(eval_Qm01(N,M,MHL,e+1,j2))))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qihm00_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((((eval_Qih0(N,M,MHL,i1,d,i2,j2))*(eintstackpenalty(0)))*(eaupenalty(i1,i2,d,j2)))*(eval_Qm00(N,M,MHL,d+1,j1)))
	{
		//Domain
		//{i1,j1,i2,j2,d|i2p>=0 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=j2p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && d>=-1 && M>=j2+1 && i1>=0 && N>=i1+1 && N>=j1+1 && N>=d+2 && i2>=0 && M>=i2+1 && j2>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qihm00_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((((eval_Qih0(N,M,MHL,i1,j1,i2,e))*(eintstackpenalty(0)))*(eaupenalty(i1,i2,j1,e)))*(eval_Qm01(N,M,MHL,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && e>=-1 && M>=e+2 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=j1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qihm00_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((((eval_Qih0(N,M,MHL,i1,j1,i2,e))*(eintstackpenalty(0)))*(eaupenalty(i1,i2,j1,e)))*(eval_Qm01(N,M,MHL,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && M>=j2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && M>=e+2 && j2>=i2+1 && M>=i2+1 && i1>=0 && N>=i1+1 && e>=-1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qihm00_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((((eval_Qih0(N,M,MHL,i1,d,i2,j2))*(eintstackpenalty(0)))*(eaupenalty(i1,i2,d,j2)))*(eval_Qm00(N,M,MHL,d+1,j1)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && i2p>=0 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && M>=i2p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && d>=-1 && M>=i2+1 && i1>=0 && N>=i1+1 && N>=j1+1 && N>=d+2 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_Qihm00(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qihm00(i1,j1,i2,j2) == 'N' ) {
		_flag_Qihm00(i1,j1,i2,j2) = 'I';
	//Body for Qihm00
		Qihm00(i1,j1,i2,j2) = ((base_pair(seq0(i1),eval_seq1(N,M,MHL,i2)))?((((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_Qihm00_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_Qihm00_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_Qihm00_3(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?reduce_piRNAb2_Qihm00_4(N,M,MHL,i1,j1,i2,j2):(((j2 == i2 && j1 >= i1+1))?reduce_piRNAb2_Qihm00_5(N,M,MHL,i1,j1,i2,j2):(0))))):(0));
		_flag_Qihm00(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qihm00(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qihm00 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qihm00(i1,j1,i2,j2);
}
double reduce_piRNAb2_Qihm01_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((((eval_Qih1(N,M,MHL,i1,d,i2,e))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,d,e)))*(((eval_Qm00(N,M,MHL,d+1,j1))*(eval_Q11(N,M,MHL,e+1,j2)))+(eval_Qm11(N,M,MHL,e+1,j2))))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qihm01_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((((eval_Qih1(N,M,MHL,i1,d,i2,j2))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,d,j2)))*(eval_Qm00(N,M,MHL,d+1,j1)))
	{
		//Domain
		//{i1,j1,i2,j2,d|i2p>=0 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=j2p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && d>=-1 && M>=j2+1 && i1>=0 && N>=i1+1 && N>=j1+1 && N>=d+2 && i2>=0 && M>=i2+1 && j2>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qihm01_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((((eval_Qih1(N,M,MHL,i1,j1,i2,e))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,j1,e)))*(eval_Qm11(N,M,MHL,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && e>=-1 && M>=e+2 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=j1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qihm01_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((((eval_Qih1(N,M,MHL,i1,j1,i2,e))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,j1,e)))*(eval_Qm11(N,M,MHL,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && M>=j2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && M>=e+2 && j2>=i2+1 && M>=i2+1 && i1>=0 && N>=i1+1 && e>=-1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qihm01_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((((eval_Qih1(N,M,MHL,i1,d,i2,j2))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,d,j2)))*(eval_Qm00(N,M,MHL,d+1,j1)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && i2p>=0 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && M>=i2p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && d>=-1 && M>=i2+1 && i1>=0 && N>=i1+1 && N>=j1+1 && N>=d+2 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_Qihm01(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qihm01(i1,j1,i2,j2) == 'N' ) {
		_flag_Qihm01(i1,j1,i2,j2) = 'I';
	//Body for Qihm01
		Qihm01(i1,j1,i2,j2) = ((base_pair(seq0(i1),eval_seq1(N,M,MHL,i2)))?((((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_Qihm01_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_Qihm01_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_Qihm01_3(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?reduce_piRNAb2_Qihm01_4(N,M,MHL,i1,j1,i2,j2):(((j2 == i2 && j1 >= i1+1))?reduce_piRNAb2_Qihm01_5(N,M,MHL,i1,j1,i2,j2):(0))))):(0));
		_flag_Qihm01(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qihm01(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qihm01 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qihm01(i1,j1,i2,j2);
}
double reduce_piRNAb2_Qihm10_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((((eval_Qih1(N,M,MHL,i1,d,i2,e))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,d,e)))*(((eval_Qm10(N,M,MHL,d+1,j1))*(eval_Q01(N,M,MHL,e+1,j2)))+((ekissing(0,(j1)-(d),0))*(eval_Qm01(N,M,MHL,e+1,j2)))))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qihm10_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((((eval_Qih1(N,M,MHL,i1,d,i2,j2))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,d,j2)))*(eval_Qm10(N,M,MHL,d+1,j1)))
	{
		//Domain
		//{i1,j1,i2,j2,d|i2p>=0 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=j2p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && d>=-1 && M>=j2+1 && i1>=0 && N>=i1+1 && N>=j1+1 && N>=d+2 && i2>=0 && M>=i2+1 && j2>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qihm10_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((((eval_Qih1(N,M,MHL,i1,j1,i2,e))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,j1,e)))*(eval_Qm01(N,M,MHL,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && e>=-1 && M>=e+2 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=j1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qihm10_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((((eval_Qih1(N,M,MHL,i1,j1,i2,e))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,j1,e)))*(eval_Qm01(N,M,MHL,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && M>=j2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && M>=e+2 && j2>=i2+1 && M>=i2+1 && i1>=0 && N>=i1+1 && e>=-1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qihm10_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((((eval_Qih1(N,M,MHL,i1,d,i2,j2))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,d,j2)))*(eval_Qm10(N,M,MHL,d+1,j1)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && i2p>=0 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && M>=i2p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && d>=-1 && M>=i2+1 && i1>=0 && N>=i1+1 && N>=j1+1 && N>=d+2 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_Qihm10(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qihm10(i1,j1,i2,j2) == 'N' ) {
		_flag_Qihm10(i1,j1,i2,j2) = 'I';
	//Body for Qihm10
		Qihm10(i1,j1,i2,j2) = ((base_pair(seq0(i1),eval_seq1(N,M,MHL,i2)))?((((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_Qihm10_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_Qihm10_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_Qihm10_3(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?reduce_piRNAb2_Qihm10_4(N,M,MHL,i1,j1,i2,j2):(((j2 == i2 && j1 >= i1+1))?reduce_piRNAb2_Qihm10_5(N,M,MHL,i1,j1,i2,j2):(0))))):(0));
		_flag_Qihm10(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qihm10(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qihm10 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qihm10(i1,j1,i2,j2);
}
double reduce_piRNAb2_Qihm11_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((((eval_Qih1(N,M,MHL,i1,d,i2,e))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,d,e)))*(((eval_Qm10(N,M,MHL,d+1,j1))*(eval_Q11(N,M,MHL,e+1,j2)))+((ekissing(0,(j1)-(d),0))*(eval_Qm11(N,M,MHL,e+1,j2)))))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qihm11_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((((eval_Qih1(N,M,MHL,i1,d,i2,j2))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,d,j2)))*(eval_Qm10(N,M,MHL,d+1,j1)))
	{
		//Domain
		//{i1,j1,i2,j2,d|i2p>=0 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=j2p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && d>=-1 && M>=j2+1 && i1>=0 && N>=i1+1 && N>=j1+1 && N>=d+2 && i2>=0 && M>=i2+1 && j2>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qihm11_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((((eval_Qih1(N,M,MHL,i1,j1,i2,e))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,j1,e)))*(eval_Qm11(N,M,MHL,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && e>=-1 && M>=e+2 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=j1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qihm11_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((((eval_Qih1(N,M,MHL,i1,j1,i2,e))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,j1,e)))*(eval_Qm11(N,M,MHL,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && M>=j2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && M>=e+2 && j2>=i2+1 && M>=i2+1 && i1>=0 && N>=i1+1 && e>=-1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qihm11_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((((eval_Qih1(N,M,MHL,i1,d,i2,j2))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,d,j2)))*(eval_Qm10(N,M,MHL,d+1,j1)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && i2p>=0 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && M>=i2p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && d>=-1 && M>=i2+1 && i1>=0 && N>=i1+1 && N>=j1+1 && N>=d+2 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_Qihm11(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qihm11(i1,j1,i2,j2) == 'N' ) {
		_flag_Qihm11(i1,j1,i2,j2) = 'I';
	//Body for Qihm11
		Qihm11(i1,j1,i2,j2) = ((base_pair(seq0(i1),eval_seq1(N,M,MHL,i2)))?((((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_Qihm11_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_Qihm11_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_Qihm11_3(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?reduce_piRNAb2_Qihm11_4(N,M,MHL,i1,j1,i2,j2):(((j2 == i2 && j1 >= i1+1))?reduce_piRNAb2_Qihm11_5(N,M,MHL,i1,j1,i2,j2):(0))))):(0));
		_flag_Qihm11(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qihm11(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qihm11 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qihm11(i1,j1,i2,j2);
}
double eval_Qix00(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qix00(i1,j1,i2,j2) == 'N' ) {
		_flag_Qix00(i1,j1,i2,j2) = 'I';
	//Body for Qix00
		Qix00(i1,j1,i2,j2) = (eval_Qixm00(N,M,MHL,i1,j1,i2,j2))+(eval_Qixk00(N,M,MHL,i1,j1,i2,j2));
		_flag_Qix00(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qix00(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qix00 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qix00(i1,j1,i2,j2);
}
double eval_Qix01(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qix01(i1,j1,i2,j2) == 'N' ) {
		_flag_Qix01(i1,j1,i2,j2) = 'I';
	//Body for Qix01
		Qix01(i1,j1,i2,j2) = (eval_Qixm01(N,M,MHL,i1,j1,i2,j2))+(eval_Qixk01(N,M,MHL,i1,j1,i2,j2));
		_flag_Qix01(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qix01(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qix01 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qix01(i1,j1,i2,j2);
}
double eval_Qix10(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qix10(i1,j1,i2,j2) == 'N' ) {
		_flag_Qix10(i1,j1,i2,j2) = 'I';
	//Body for Qix10
		Qix10(i1,j1,i2,j2) = (eval_Qixm10(N,M,MHL,i1,j1,i2,j2))+(eval_Qixk10(N,M,MHL,i1,j1,i2,j2));
		_flag_Qix10(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qix10(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qix10 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qix10(i1,j1,i2,j2);
}
double eval_Qix11(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qix11(i1,j1,i2,j2) == 'N' ) {
		_flag_Qix11(i1,j1,i2,j2) = 'I';
	//Body for Qix11
		Qix11(i1,j1,i2,j2) = (eval_Qixm11(N,M,MHL,i1,j1,i2,j2))+(eval_Qixk11(N,M,MHL,i1,j1,i2,j2));
		_flag_Qix11(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qix11(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qix11 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qix11(i1,j1,i2,j2);
}
double eval_auxqia01(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_auxqia01(i1,j1,i2,j2) == 'N' ) {
		_flag_auxqia01(i1,j1,i2,j2) = 'I';
	//Body for auxqia01
		auxqia01(i1,j1,i2,j2) = (((eval_Qiann01(N,M,MHL,i1,j1,i2,j2))+(eval_Qiand01(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiadn01(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiadd01(N,M,MHL,i1,j1,i2,j2));
		_flag_auxqia01(i1,j1,i2,j2) = 'F';
	} else if ( _flag_auxqia01(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on auxqia01 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return auxqia01(i1,j1,i2,j2);
}
double eval_auxqia10(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_auxqia10(i1,j1,i2,j2) == 'N' ) {
		_flag_auxqia10(i1,j1,i2,j2) = 'I';
	//Body for auxqia10
		auxqia10(i1,j1,i2,j2) = (((eval_Qiann10(N,M,MHL,i1,j1,i2,j2))+(eval_Qiand10(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiadn10(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiadd10(N,M,MHL,i1,j1,i2,j2));
		_flag_auxqia10(i1,j1,i2,j2) = 'F';
	} else if ( _flag_auxqia10(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on auxqia10 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return auxqia10(i1,j1,i2,j2);
}
double eval_auxqia11(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_auxqia11(i1,j1,i2,j2) == 'N' ) {
		_flag_auxqia11(i1,j1,i2,j2) = 'I';
	//Body for auxqia11
		auxqia11(i1,j1,i2,j2) = (((eval_Qiann11(N,M,MHL,i1,j1,i2,j2))+(eval_Qiand11(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiadn11(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiadd11(N,M,MHL,i1,j1,i2,j2));
		_flag_auxqia11(i1,j1,i2,j2) = 'F';
	} else if ( _flag_auxqia11(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on auxqia11 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return auxqia11(i1,j1,i2,j2);
}
double eval_auxqiadd01(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_auxqiadd01(i1,j1,i2,j2) == 'N' ) {
		_flag_auxqiadd01(i1,j1,i2,j2) = 'I';
	//Body for auxqiadd01
		auxqiadd01(i1,j1,i2,j2) = (eval_Qiadd01(N,M,MHL,i1,j1,i2,j2))+(eval_Qib01(N,M,MHL,i1,j1,i2,j2));
		_flag_auxqiadd01(i1,j1,i2,j2) = 'F';
	} else if ( _flag_auxqiadd01(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on auxqiadd01 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return auxqiadd01(i1,j1,i2,j2);
}
double eval_auxqiadd10(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_auxqiadd10(i1,j1,i2,j2) == 'N' ) {
		_flag_auxqiadd10(i1,j1,i2,j2) = 'I';
	//Body for auxqiadd10
		auxqiadd10(i1,j1,i2,j2) = (eval_Qiadd10(N,M,MHL,i1,j1,i2,j2))+(eval_Qib10(N,M,MHL,i1,j1,i2,j2));
		_flag_auxqiadd10(i1,j1,i2,j2) = 'F';
	} else if ( _flag_auxqiadd10(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on auxqiadd10 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return auxqiadd10(i1,j1,i2,j2);
}
double eval_auxqiadd11(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_auxqiadd11(i1,j1,i2,j2) == 'N' ) {
		_flag_auxqiadd11(i1,j1,i2,j2) = 'I';
	//Body for auxqiadd11
		auxqiadd11(i1,j1,i2,j2) = (eval_Qiadd11(N,M,MHL,i1,j1,i2,j2))+(eval_Qib11(N,M,MHL,i1,j1,i2,j2));
		_flag_auxqiadd11(i1,j1,i2,j2) = 'F';
	} else if ( _flag_auxqiadd11(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on auxqiadd11 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return auxqiadd11(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiy1_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qgk1(N,M,MHL,i2,j2,d,e))*(eval_Qixk01(N,M,MHL,i1,j1,d+1,e-1)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|j1p>=i1p+4 && j2p>=i2p+4 && i1p>=0 && M>=j2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && d>=i2 && j2>=d+2 && e>=d+2 && j2>=e && i1>=0 && N>=i1+1 && j1>=i1+4 && i2>=0 && M>=i2+1 && j2>=i2+4 && M>=j2+1 && M>=e && M>=d+2 && d>=-1 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i2p;c5 <= j2p-2;c5+=1)
		 {
		 	for(c6=c5+2;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiy1(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiy1(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiy1(i1,j1,i2,j2) = 'I';
	//Body for tempQiy1
		tempQiy1(i1,j1,i2,j2) = (((base_pair(eval_seq1(N,M,MHL,i2),eval_seq1(N,M,MHL,j2)))&&(base_pair(seq0(i1),seq0(j1))))?((((j2 >= i2+4 && j1 >= i1+4))?reduce_piRNAb2_tempQiy1_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQiy1(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiy1(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiy1 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiy1(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiy2_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qgm1(N,M,MHL,i2,j2,d,e))*(eval_Qixm02(N,M,MHL,i1,j1,d+1,e-1)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|j1p>=i1p+4 && j2p>=i2p+4 && i1p>=0 && M>=j2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && d>=i2 && j2>=d+2 && e>=d+2 && j2>=e && i1>=0 && N>=i1+1 && j1>=i1+4 && i2>=0 && M>=i2+1 && j2>=i2+4 && M>=j2+1 && M>=e && M>=d+2 && d>=-1 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i2p;c5 <= j2p-2;c5+=1)
		 {
		 	for(c6=c5+2;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiy2(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiy2(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiy2(i1,j1,i2,j2) = 'I';
	//Body for tempQiy2
		tempQiy2(i1,j1,i2,j2) = (((base_pair(eval_seq1(N,M,MHL,i2),eval_seq1(N,M,MHL,j2)))&&(base_pair(seq0(i1),seq0(j1))))?((((j2 >= i2+4 && j1 >= i1+4))?reduce_piRNAb2_tempQiy2_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQiy2(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiy2(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiy2 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiy2(i1,j1,i2,j2);
}
double eval_Qiy(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qiy(i1,j1,i2,j2) == 'N' ) {
		_flag_Qiy(i1,j1,i2,j2) = 'I';
	//Body for Qiy
		Qiy(i1,j1,i2,j2) = (eval_tempQiy1(N,M,MHL,i1,j1,i2,j2))+(eval_tempQiy2(N,M,MHL,i1,j1,i2,j2));
		_flag_Qiy(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qiy(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qiy at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qiy(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQixm101_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qgk1(N,M,MHL,i2,j2,d,e))*(eval_Qimk01(N,M,MHL,i1,j1,d+1,e-1)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|j1p>=i1p && j2p>=i2p+4 && i1p>=0 && M>=j2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && d>=i2 && j2>=d+2 && e>=d+2 && j2>=e && i1>=0 && N>=i1+1 && j1>=i1 && i2>=0 && M>=i2+1 && j2>=i2+4 && M>=j2+1 && M>=e && M>=d+2 && d>=-1 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i2p;c5 <= j2p-2;c5+=1)
		 {
		 	for(c6=c5+2;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQixm101(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQixm101(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQixm101(i1,j1,i2,j2) = 'I';
	//Body for tempQixm101
		tempQixm101(i1,j1,i2,j2) = ((base_pair(eval_seq1(N,M,MHL,i2),eval_seq1(N,M,MHL,j2)))?((((j2 >= i2+4))?reduce_piRNAb2_tempQixm101_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQixm101(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQixm101(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQixm101 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQixm101(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQixm102_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qgm1(N,M,MHL,i2,j2,d,e))*(eval_Qimm02(N,M,MHL,i1,j1,d+1,e-1)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|j1p>=i1p && j2p>=i2p+4 && i1p>=0 && M>=j2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && d>=i2 && j2>=d+2 && e>=d+2 && j2>=e && i1>=0 && N>=i1+1 && j1>=i1 && i2>=0 && M>=i2+1 && j2>=i2+4 && M>=j2+1 && M>=e && M>=d+2 && d>=-1 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i2p;c5 <= j2p-2;c5+=1)
		 {
		 	for(c6=c5+2;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQixm102(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQixm102(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQixm102(i1,j1,i2,j2) = 'I';
	//Body for tempQixm102
		tempQixm102(i1,j1,i2,j2) = ((base_pair(eval_seq1(N,M,MHL,i2),eval_seq1(N,M,MHL,j2)))?((((j2 >= i2+4))?reduce_piRNAb2_tempQixm102_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQixm102(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQixm102(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQixm102 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQixm102(i1,j1,i2,j2);
}
double eval_Qixm10(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qixm10(i1,j1,i2,j2) == 'N' ) {
		_flag_Qixm10(i1,j1,i2,j2) = 'I';
	//Body for Qixm10
		Qixm10(i1,j1,i2,j2) = (eval_tempQixm101(N,M,MHL,i1,j1,i2,j2))+(eval_tempQixm102(N,M,MHL,i1,j1,i2,j2));
		_flag_Qixm10(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qixm10(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qixm10 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qixm10(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQixm111_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qgk1(N,M,MHL,i2,j2,d,e))*(eval_Qimk11(N,M,MHL,i1,j1,d+1,e-1)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|j1p>=i1p && j2p>=i2p+4 && i1p>=0 && M>=j2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && d>=i2 && j2>=d+2 && e>=d+2 && j2>=e && i1>=0 && N>=i1+1 && j1>=i1 && i2>=0 && M>=i2+1 && j2>=i2+4 && M>=j2+1 && M>=e && M>=d+2 && d>=-1 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i2p;c5 <= j2p-2;c5+=1)
		 {
		 	for(c6=c5+2;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQixm111(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQixm111(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQixm111(i1,j1,i2,j2) = 'I';
	//Body for tempQixm111
		tempQixm111(i1,j1,i2,j2) = ((base_pair(eval_seq1(N,M,MHL,i2),eval_seq1(N,M,MHL,j2)))?((((j2 >= i2+4))?reduce_piRNAb2_tempQixm111_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQixm111(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQixm111(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQixm111 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQixm111(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQixm112_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qgm1(N,M,MHL,i2,j2,d,e))*(eval_Qimm12(N,M,MHL,i1,j1,d+1,e-1)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|j1p>=i1p && j2p>=i2p+4 && i1p>=0 && M>=j2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && d>=i2 && j2>=d+2 && e>=d+2 && j2>=e && i1>=0 && N>=i1+1 && j1>=i1 && i2>=0 && M>=i2+1 && j2>=i2+4 && M>=j2+1 && M>=e && M>=d+2 && d>=-1 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i2p;c5 <= j2p-2;c5+=1)
		 {
		 	for(c6=c5+2;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQixm112(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQixm112(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQixm112(i1,j1,i2,j2) = 'I';
	//Body for tempQixm112
		tempQixm112(i1,j1,i2,j2) = ((base_pair(eval_seq1(N,M,MHL,i2),eval_seq1(N,M,MHL,j2)))?((((j2 >= i2+4))?reduce_piRNAb2_tempQixm112_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQixm112(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQixm112(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQixm112 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQixm112(i1,j1,i2,j2);
}
double eval_Qixm11(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qixm11(i1,j1,i2,j2) == 'N' ) {
		_flag_Qixm11(i1,j1,i2,j2) = 'I';
	//Body for Qixm11
		Qixm11(i1,j1,i2,j2) = (eval_tempQixm111(N,M,MHL,i1,j1,i2,j2))+(eval_tempQixm112(N,M,MHL,i1,j1,i2,j2));
		_flag_Qixm11(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qixm11(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qixm11 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qixm11(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQixm121_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qgk1(N,M,MHL,i2,j2,d,e))*(eval_Qimk21(N,M,MHL,i1,j1,d+1,e-1)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|j1p>=i1p && j2p>=i2p+4 && i1p>=0 && M>=j2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && d>=i2 && j2>=d+2 && e>=d+2 && j2>=e && i1>=0 && N>=i1+1 && j1>=i1 && i2>=0 && M>=i2+1 && j2>=i2+4 && M>=j2+1 && M>=e && M>=d+2 && d>=-1 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i2p;c5 <= j2p-2;c5+=1)
		 {
		 	for(c6=c5+2;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQixm121(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQixm121(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQixm121(i1,j1,i2,j2) = 'I';
	//Body for tempQixm121
		tempQixm121(i1,j1,i2,j2) = ((base_pair(eval_seq1(N,M,MHL,i2),eval_seq1(N,M,MHL,j2)))?((((j2 >= i2+4))?reduce_piRNAb2_tempQixm121_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQixm121(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQixm121(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQixm121 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQixm121(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQixm122_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qgm1(N,M,MHL,i2,j2,d,e))*(eval_Qimm22(N,M,MHL,i1,j1,d+1,e-1)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|j1p>=i1p && j2p>=i2p+4 && i1p>=0 && M>=j2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && d>=i2 && j2>=d+2 && e>=d+2 && j2>=e && i1>=0 && N>=i1+1 && j1>=i1 && i2>=0 && M>=i2+1 && j2>=i2+4 && M>=j2+1 && M>=e && M>=d+2 && d>=-1 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i2p;c5 <= j2p-2;c5+=1)
		 {
		 	for(c6=c5+2;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQixm122(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQixm122(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQixm122(i1,j1,i2,j2) = 'I';
	//Body for tempQixm122
		tempQixm122(i1,j1,i2,j2) = ((base_pair(eval_seq1(N,M,MHL,i2),eval_seq1(N,M,MHL,j2)))?((((j2 >= i2+4))?reduce_piRNAb2_tempQixm122_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQixm122(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQixm122(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQixm122 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQixm122(i1,j1,i2,j2);
}
double eval_Qixm12(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qixm12(i1,j1,i2,j2) == 'N' ) {
		_flag_Qixm12(i1,j1,i2,j2) = 'I';
	//Body for Qixm12
		Qixm12(i1,j1,i2,j2) = (eval_tempQixm121(N,M,MHL,i1,j1,i2,j2))+(eval_tempQixm122(N,M,MHL,i1,j1,i2,j2));
		_flag_Qixm12(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qixm12(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qixm12 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qixm12(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQixk101_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qgk1(N,M,MHL,i2,j2,d,e))*(eval_Qikk01(N,M,MHL,i1,j1,d+1,e-1)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|j1p>=i1p && j2p>=i2p+4 && i1p>=0 && M>=j2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && d>=i2 && j2>=d+2 && e>=d+2 && j2>=e && i1>=0 && N>=i1+1 && j1>=i1 && i2>=0 && M>=i2+1 && j2>=i2+4 && M>=j2+1 && M>=e && M>=d+2 && d>=-1 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i2p;c5 <= j2p-2;c5+=1)
		 {
		 	for(c6=c5+2;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQixk101(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQixk101(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQixk101(i1,j1,i2,j2) = 'I';
	//Body for tempQixk101
		tempQixk101(i1,j1,i2,j2) = ((base_pair(eval_seq1(N,M,MHL,i2),eval_seq1(N,M,MHL,j2)))?((((j2 >= i2+4))?reduce_piRNAb2_tempQixk101_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQixk101(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQixk101(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQixk101 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQixk101(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQixk102_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qgm1(N,M,MHL,i2,j2,d,e))*(eval_Qikm02(N,M,MHL,i1,j1,d+1,e-1)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|j1p>=i1p && j2p>=i2p+4 && i1p>=0 && M>=j2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && d>=i2 && j2>=d+2 && e>=d+2 && j2>=e && i1>=0 && N>=i1+1 && j1>=i1 && i2>=0 && M>=i2+1 && j2>=i2+4 && M>=j2+1 && M>=e && M>=d+2 && d>=-1 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i2p;c5 <= j2p-2;c5+=1)
		 {
		 	for(c6=c5+2;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQixk102(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQixk102(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQixk102(i1,j1,i2,j2) = 'I';
	//Body for tempQixk102
		tempQixk102(i1,j1,i2,j2) = ((base_pair(eval_seq1(N,M,MHL,i2),eval_seq1(N,M,MHL,j2)))?((((j2 >= i2+4))?reduce_piRNAb2_tempQixk102_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQixk102(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQixk102(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQixk102 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQixk102(i1,j1,i2,j2);
}
double eval_Qixk10(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qixk10(i1,j1,i2,j2) == 'N' ) {
		_flag_Qixk10(i1,j1,i2,j2) = 'I';
	//Body for Qixk10
		Qixk10(i1,j1,i2,j2) = (eval_tempQixk101(N,M,MHL,i1,j1,i2,j2))+(eval_tempQixk102(N,M,MHL,i1,j1,i2,j2));
		_flag_Qixk10(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qixk10(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qixk10 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qixk10(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQixk111_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qgk1(N,M,MHL,i2,j2,d,e))*(eval_Qikk11(N,M,MHL,i1,j1,d+1,e-1)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|j1p>=i1p && j2p>=i2p+4 && i1p>=0 && M>=j2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && d>=i2 && j2>=d+2 && e>=d+2 && j2>=e && i1>=0 && N>=i1+1 && j1>=i1 && i2>=0 && M>=i2+1 && j2>=i2+4 && M>=j2+1 && M>=e && M>=d+2 && d>=-1 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i2p;c5 <= j2p-2;c5+=1)
		 {
		 	for(c6=c5+2;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQixk111(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQixk111(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQixk111(i1,j1,i2,j2) = 'I';
	//Body for tempQixk111
		tempQixk111(i1,j1,i2,j2) = ((base_pair(eval_seq1(N,M,MHL,i2),eval_seq1(N,M,MHL,j2)))?((((j2 >= i2+4))?reduce_piRNAb2_tempQixk111_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQixk111(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQixk111(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQixk111 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQixk111(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQixk112_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qgm1(N,M,MHL,i2,j2,d,e))*(eval_Qikm12(N,M,MHL,i1,j1,d+1,e-1)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|j1p>=i1p && j2p>=i2p+4 && i1p>=0 && M>=j2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && d>=i2 && j2>=d+2 && e>=d+2 && j2>=e && i1>=0 && N>=i1+1 && j1>=i1 && i2>=0 && M>=i2+1 && j2>=i2+4 && M>=j2+1 && M>=e && M>=d+2 && d>=-1 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i2p;c5 <= j2p-2;c5+=1)
		 {
		 	for(c6=c5+2;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQixk112(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQixk112(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQixk112(i1,j1,i2,j2) = 'I';
	//Body for tempQixk112
		tempQixk112(i1,j1,i2,j2) = ((base_pair(eval_seq1(N,M,MHL,i2),eval_seq1(N,M,MHL,j2)))?((((j2 >= i2+4))?reduce_piRNAb2_tempQixk112_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQixk112(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQixk112(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQixk112 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQixk112(i1,j1,i2,j2);
}
double eval_Qixk11(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qixk11(i1,j1,i2,j2) == 'N' ) {
		_flag_Qixk11(i1,j1,i2,j2) = 'I';
	//Body for Qixk11
		Qixk11(i1,j1,i2,j2) = (eval_tempQixk111(N,M,MHL,i1,j1,i2,j2))+(eval_tempQixk112(N,M,MHL,i1,j1,i2,j2));
		_flag_Qixk11(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qixk11(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qixk11 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qixk11(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQixm001_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qgk0(N,M,MHL,i1,j1,d,e))*(eval_Qikm10(N,M,MHL,d+1,e-1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|i2p>=0 && j1p>=i1p+4 && N>=j1p+1 && j2p>=i2p && N>=9 && M>=9 && MHL>=11 && i1p>=0 && M>=j2p+1 && d>=i1 && j1>=d+2 && e>=d+2 && j1>=e && d>=-1 && N>=d+2 && M>=j2+1 && i1>=0 && N>=i1+1 && j1>=i1+4 && N>=j1+1 && j2>=i2 && M>=i2+1 && i2>=0 && N>=e && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-2;c5+=1)
		 {
		 	for(c6=c5+2;c6 <= j1p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQixm001(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQixm001(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQixm001(i1,j1,i2,j2) = 'I';
	//Body for tempQixm001
		tempQixm001(i1,j1,i2,j2) = ((base_pair(seq0(i1),seq0(j1)))?((((j1 >= i1+4))?reduce_piRNAb2_tempQixm001_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQixm001(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQixm001(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQixm001 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQixm001(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQixm002_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qgm0(N,M,MHL,i1,j1,d,e))*(eval_Qimm20(N,M,MHL,d+1,e-1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|i2p>=0 && j1p>=i1p+4 && N>=j1p+1 && j2p>=i2p && N>=9 && M>=9 && MHL>=11 && i1p>=0 && M>=j2p+1 && d>=i1 && j1>=d+2 && e>=d+2 && j1>=e && d>=-1 && N>=d+2 && M>=j2+1 && i1>=0 && N>=i1+1 && j1>=i1+4 && N>=j1+1 && j2>=i2 && M>=i2+1 && i2>=0 && N>=e && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-2;c5+=1)
		 {
		 	for(c6=c5+2;c6 <= j1p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQixm002(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQixm002(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQixm002(i1,j1,i2,j2) = 'I';
	//Body for tempQixm002
		tempQixm002(i1,j1,i2,j2) = ((base_pair(seq0(i1),seq0(j1)))?((((j1 >= i1+4))?reduce_piRNAb2_tempQixm002_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQixm002(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQixm002(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQixm002 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQixm002(i1,j1,i2,j2);
}
double eval_Qixm00(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qixm00(i1,j1,i2,j2) == 'N' ) {
		_flag_Qixm00(i1,j1,i2,j2) = 'I';
	//Body for Qixm00
		Qixm00(i1,j1,i2,j2) = (eval_tempQixm001(N,M,MHL,i1,j1,i2,j2))+(eval_tempQixm002(N,M,MHL,i1,j1,i2,j2));
		_flag_Qixm00(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qixm00(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qixm00 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qixm00(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQixm011_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qgk0(N,M,MHL,i1,j1,d,e))*(eval_Qikm11(N,M,MHL,d+1,e-1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|i2p>=0 && j1p>=i1p+4 && N>=j1p+1 && j2p>=i2p && N>=9 && M>=9 && MHL>=11 && i1p>=0 && M>=j2p+1 && d>=i1 && j1>=d+2 && e>=d+2 && j1>=e && d>=-1 && N>=d+2 && M>=j2+1 && i1>=0 && N>=i1+1 && j1>=i1+4 && N>=j1+1 && j2>=i2 && M>=i2+1 && i2>=0 && N>=e && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-2;c5+=1)
		 {
		 	for(c6=c5+2;c6 <= j1p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQixm011(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQixm011(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQixm011(i1,j1,i2,j2) = 'I';
	//Body for tempQixm011
		tempQixm011(i1,j1,i2,j2) = ((base_pair(seq0(i1),seq0(j1)))?((((j1 >= i1+4))?reduce_piRNAb2_tempQixm011_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQixm011(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQixm011(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQixm011 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQixm011(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQixm012_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qgm0(N,M,MHL,i1,j1,d,e))*(eval_Qimm21(N,M,MHL,d+1,e-1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|i2p>=0 && j1p>=i1p+4 && N>=j1p+1 && j2p>=i2p && N>=9 && M>=9 && MHL>=11 && i1p>=0 && M>=j2p+1 && d>=i1 && j1>=d+2 && e>=d+2 && j1>=e && d>=-1 && N>=d+2 && M>=j2+1 && i1>=0 && N>=i1+1 && j1>=i1+4 && N>=j1+1 && j2>=i2 && M>=i2+1 && i2>=0 && N>=e && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-2;c5+=1)
		 {
		 	for(c6=c5+2;c6 <= j1p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQixm012(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQixm012(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQixm012(i1,j1,i2,j2) = 'I';
	//Body for tempQixm012
		tempQixm012(i1,j1,i2,j2) = ((base_pair(seq0(i1),seq0(j1)))?((((j1 >= i1+4))?reduce_piRNAb2_tempQixm012_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQixm012(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQixm012(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQixm012 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQixm012(i1,j1,i2,j2);
}
double eval_Qixm01(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qixm01(i1,j1,i2,j2) == 'N' ) {
		_flag_Qixm01(i1,j1,i2,j2) = 'I';
	//Body for Qixm01
		Qixm01(i1,j1,i2,j2) = (eval_tempQixm011(N,M,MHL,i1,j1,i2,j2))+(eval_tempQixm012(N,M,MHL,i1,j1,i2,j2));
		_flag_Qixm01(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qixm01(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qixm01 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qixm01(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQixm021_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qgk0(N,M,MHL,i1,j1,d,e))*(eval_Qikm12(N,M,MHL,d+1,e-1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|i2p>=0 && j1p>=i1p+4 && N>=j1p+1 && j2p>=i2p && N>=9 && M>=9 && MHL>=11 && i1p>=0 && M>=j2p+1 && d>=i1 && j1>=d+2 && e>=d+2 && j1>=e && d>=-1 && N>=d+2 && M>=j2+1 && i1>=0 && N>=i1+1 && j1>=i1+4 && N>=j1+1 && j2>=i2 && M>=i2+1 && i2>=0 && N>=e && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-2;c5+=1)
		 {
		 	for(c6=c5+2;c6 <= j1p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQixm021(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQixm021(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQixm021(i1,j1,i2,j2) = 'I';
	//Body for tempQixm021
		tempQixm021(i1,j1,i2,j2) = ((base_pair(seq0(i1),seq0(j1)))?((((j1 >= i1+4))?reduce_piRNAb2_tempQixm021_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQixm021(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQixm021(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQixm021 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQixm021(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQixm022_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qgm0(N,M,MHL,i1,j1,d,e))*(eval_Qimm22(N,M,MHL,d+1,e-1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|i2p>=0 && j1p>=i1p+4 && N>=j1p+1 && j2p>=i2p && N>=9 && M>=9 && MHL>=11 && i1p>=0 && M>=j2p+1 && d>=i1 && j1>=d+2 && e>=d+2 && j1>=e && d>=-1 && N>=d+2 && M>=j2+1 && i1>=0 && N>=i1+1 && j1>=i1+4 && N>=j1+1 && j2>=i2 && M>=i2+1 && i2>=0 && N>=e && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-2;c5+=1)
		 {
		 	for(c6=c5+2;c6 <= j1p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQixm022(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQixm022(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQixm022(i1,j1,i2,j2) = 'I';
	//Body for tempQixm022
		tempQixm022(i1,j1,i2,j2) = ((base_pair(seq0(i1),seq0(j1)))?((((j1 >= i1+4))?reduce_piRNAb2_tempQixm022_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQixm022(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQixm022(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQixm022 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQixm022(i1,j1,i2,j2);
}
double eval_Qixm02(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qixm02(i1,j1,i2,j2) == 'N' ) {
		_flag_Qixm02(i1,j1,i2,j2) = 'I';
	//Body for Qixm02
		Qixm02(i1,j1,i2,j2) = (eval_tempQixm021(N,M,MHL,i1,j1,i2,j2))+(eval_tempQixm022(N,M,MHL,i1,j1,i2,j2));
		_flag_Qixm02(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qixm02(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qixm02 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qixm02(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQixk001_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qgk0(N,M,MHL,i1,j1,d,e))*(eval_Qikk10(N,M,MHL,d+1,e-1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|i2p>=0 && j1p>=i1p+4 && N>=j1p+1 && j2p>=i2p && N>=9 && M>=9 && MHL>=11 && i1p>=0 && M>=j2p+1 && d>=i1 && j1>=d+2 && e>=d+2 && j1>=e && d>=-1 && N>=d+2 && M>=j2+1 && i1>=0 && N>=i1+1 && j1>=i1+4 && N>=j1+1 && j2>=i2 && M>=i2+1 && i2>=0 && N>=e && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-2;c5+=1)
		 {
		 	for(c6=c5+2;c6 <= j1p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQixk001(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQixk001(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQixk001(i1,j1,i2,j2) = 'I';
	//Body for tempQixk001
		tempQixk001(i1,j1,i2,j2) = ((base_pair(seq0(i1),seq0(j1)))?((((j1 >= i1+4))?reduce_piRNAb2_tempQixk001_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQixk001(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQixk001(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQixk001 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQixk001(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQixk002_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qgm0(N,M,MHL,i1,j1,d,e))*(eval_Qimk20(N,M,MHL,d+1,e-1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|i2p>=0 && j1p>=i1p+4 && N>=j1p+1 && j2p>=i2p && N>=9 && M>=9 && MHL>=11 && i1p>=0 && M>=j2p+1 && d>=i1 && j1>=d+2 && e>=d+2 && j1>=e && d>=-1 && N>=d+2 && M>=j2+1 && i1>=0 && N>=i1+1 && j1>=i1+4 && N>=j1+1 && j2>=i2 && M>=i2+1 && i2>=0 && N>=e && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-2;c5+=1)
		 {
		 	for(c6=c5+2;c6 <= j1p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQixk002(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQixk002(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQixk002(i1,j1,i2,j2) = 'I';
	//Body for tempQixk002
		tempQixk002(i1,j1,i2,j2) = ((base_pair(seq0(i1),seq0(j1)))?((((j1 >= i1+4))?reduce_piRNAb2_tempQixk002_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQixk002(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQixk002(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQixk002 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQixk002(i1,j1,i2,j2);
}
double eval_Qixk00(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qixk00(i1,j1,i2,j2) == 'N' ) {
		_flag_Qixk00(i1,j1,i2,j2) = 'I';
	//Body for Qixk00
		Qixk00(i1,j1,i2,j2) = (eval_tempQixk001(N,M,MHL,i1,j1,i2,j2))+(eval_tempQixk002(N,M,MHL,i1,j1,i2,j2));
		_flag_Qixk00(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qixk00(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qixk00 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qixk00(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQixk011_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qgk0(N,M,MHL,i1,j1,d,e))*(eval_Qikk11(N,M,MHL,d+1,e-1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|i2p>=0 && j1p>=i1p+4 && N>=j1p+1 && j2p>=i2p && N>=9 && M>=9 && MHL>=11 && i1p>=0 && M>=j2p+1 && d>=i1 && j1>=d+2 && e>=d+2 && j1>=e && d>=-1 && N>=d+2 && M>=j2+1 && i1>=0 && N>=i1+1 && j1>=i1+4 && N>=j1+1 && j2>=i2 && M>=i2+1 && i2>=0 && N>=e && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-2;c5+=1)
		 {
		 	for(c6=c5+2;c6 <= j1p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQixk011(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQixk011(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQixk011(i1,j1,i2,j2) = 'I';
	//Body for tempQixk011
		tempQixk011(i1,j1,i2,j2) = ((base_pair(seq0(i1),seq0(j1)))?((((j1 >= i1+4))?reduce_piRNAb2_tempQixk011_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQixk011(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQixk011(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQixk011 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQixk011(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQixk012_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qgm0(N,M,MHL,i1,j1,d,e))*(eval_Qimk21(N,M,MHL,d+1,e-1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|i2p>=0 && j1p>=i1p+4 && N>=j1p+1 && j2p>=i2p && N>=9 && M>=9 && MHL>=11 && i1p>=0 && M>=j2p+1 && d>=i1 && j1>=d+2 && e>=d+2 && j1>=e && d>=-1 && N>=d+2 && M>=j2+1 && i1>=0 && N>=i1+1 && j1>=i1+4 && N>=j1+1 && j2>=i2 && M>=i2+1 && i2>=0 && N>=e && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-2;c5+=1)
		 {
		 	for(c6=c5+2;c6 <= j1p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQixk012(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQixk012(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQixk012(i1,j1,i2,j2) = 'I';
	//Body for tempQixk012
		tempQixk012(i1,j1,i2,j2) = ((base_pair(seq0(i1),seq0(j1)))?((((j1 >= i1+4))?reduce_piRNAb2_tempQixk012_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQixk012(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQixk012(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQixk012 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQixk012(i1,j1,i2,j2);
}
double eval_Qixk01(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qixk01(i1,j1,i2,j2) == 'N' ) {
		_flag_Qixk01(i1,j1,i2,j2) = 'I';
	//Body for Qixk01
		Qixk01(i1,j1,i2,j2) = (eval_tempQixk011(N,M,MHL,i1,j1,i2,j2))+(eval_tempQixk012(N,M,MHL,i1,j1,i2,j2));
		_flag_Qixk01(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qixk01(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qixk01 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qixk01(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQimm021_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiann02(N,M,MHL,i1,d,i2,e))*(eval_Qixm02(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQimm021(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQimm021(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQimm021(i1,j1,i2,j2) = 'I';
	//Body for tempQimm021
		tempQimm021(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQimm021_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQimm021(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQimm021(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQimm021 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQimm021(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQimm022_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiann02(N,M,MHL,i1,d,i2,e))*(eval_Qixm10(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQimm022(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQimm022(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQimm022(i1,j1,i2,j2) = 'I';
	//Body for tempQimm022
		tempQimm022(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQimm022_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQimm022(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQimm022(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQimm022 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQimm022(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQimm023_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiann02(N,M,MHL,i1,d,i2,e))*(eval_Qiy(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQimm023(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQimm023(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQimm023(i1,j1,i2,j2) = 'I';
	//Body for tempQimm023
		tempQimm023(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQimm023_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQimm023(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQimm023(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQimm023 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQimm023(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQimm121_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiann12(N,M,MHL,i1,d,i2,e))*(eval_Qixm02(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQimm121(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQimm121(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQimm121(i1,j1,i2,j2) = 'I';
	//Body for tempQimm121
		tempQimm121(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQimm121_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQimm121(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQimm121(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQimm121 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQimm121(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQimm122_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiann12(N,M,MHL,i1,d,i2,e))*(eval_Qixm11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQimm122(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQimm122(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQimm122(i1,j1,i2,j2) = 'I';
	//Body for tempQimm122
		tempQimm122(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQimm122_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQimm122(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQimm122(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQimm122 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQimm122(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQimm123_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiann12(N,M,MHL,i1,d,i2,e))*(eval_Qiy(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQimm123(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQimm123(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQimm123(i1,j1,i2,j2) = 'I';
	//Body for tempQimm123
		tempQimm123(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQimm123_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQimm123(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQimm123(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQimm123 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQimm123(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQimm201_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiann20(N,M,MHL,i1,d,i2,e))*(eval_Qixm00(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQimm201(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQimm201(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQimm201(i1,j1,i2,j2) = 'I';
	//Body for tempQimm201
		tempQimm201(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQimm201_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQimm201(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQimm201(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQimm201 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQimm201(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQimm202_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiann20(N,M,MHL,i1,d,i2,e))*(eval_Qixm12(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQimm202(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQimm202(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQimm202(i1,j1,i2,j2) = 'I';
	//Body for tempQimm202
		tempQimm202(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQimm202_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQimm202(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQimm202(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQimm202 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQimm202(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQimm203_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiann20(N,M,MHL,i1,d,i2,e))*(eval_Qiy(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQimm203(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQimm203(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQimm203(i1,j1,i2,j2) = 'I';
	//Body for tempQimm203
		tempQimm203(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQimm203_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQimm203(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQimm203(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQimm203 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQimm203(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQimm211_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiann21(N,M,MHL,i1,d,i2,e))*(eval_Qixm01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQimm211(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQimm211(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQimm211(i1,j1,i2,j2) = 'I';
	//Body for tempQimm211
		tempQimm211(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQimm211_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQimm211(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQimm211(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQimm211 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQimm211(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQimm212_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiann21(N,M,MHL,i1,d,i2,e))*(eval_Qixm12(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQimm212(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQimm212(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQimm212(i1,j1,i2,j2) = 'I';
	//Body for tempQimm212
		tempQimm212(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQimm212_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQimm212(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQimm212(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQimm212 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQimm212(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQimm213_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiann21(N,M,MHL,i1,d,i2,e))*(eval_Qiy(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQimm213(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQimm213(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQimm213(i1,j1,i2,j2) = 'I';
	//Body for tempQimm213
		tempQimm213(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQimm213_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQimm213(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQimm213(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQimm213 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQimm213(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQimm221_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiann22(N,M,MHL,i1,d,i2,e))*(eval_Qixm02(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQimm221(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQimm221(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQimm221(i1,j1,i2,j2) = 'I';
	//Body for tempQimm221
		tempQimm221(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQimm221_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQimm221(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQimm221(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQimm221 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQimm221(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQimm222_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiann22(N,M,MHL,i1,d,i2,e))*(eval_Qixm12(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQimm222(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQimm222(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQimm222(i1,j1,i2,j2) = 'I';
	//Body for tempQimm222
		tempQimm222(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQimm222_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQimm222(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQimm222(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQimm222 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQimm222(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQimm223_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiann22(N,M,MHL,i1,d,i2,e))*(eval_Qiy(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQimm223(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQimm223(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQimm223(i1,j1,i2,j2) = 'I';
	//Body for tempQimm223
		tempQimm223(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQimm223_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQimm223(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQimm223(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQimm223 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQimm223(i1,j1,i2,j2);
}
double eval_Qimm02(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qimm02(i1,j1,i2,j2) == 'N' ) {
		_flag_Qimm02(i1,j1,i2,j2) = 'I';
	//Body for Qimm02
		Qimm02(i1,j1,i2,j2) = ((eval_tempQimm021(N,M,MHL,i1,j1,i2,j2))+((eval_tempQimm022(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1))))+((eval_tempQimm023(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)));
		_flag_Qimm02(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qimm02(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qimm02 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qimm02(i1,j1,i2,j2);
}
double eval_Qimm20(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qimm20(i1,j1,i2,j2) == 'N' ) {
		_flag_Qimm20(i1,j1,i2,j2) = 'I';
	//Body for Qimm20
		Qimm20(i1,j1,i2,j2) = (((eval_tempQimm201(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)))+(eval_tempQimm202(N,M,MHL,i1,j1,i2,j2)))+((eval_tempQimm203(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)));
		_flag_Qimm20(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qimm20(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qimm20 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qimm20(i1,j1,i2,j2);
}
double eval_Qimm12(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qimm12(i1,j1,i2,j2) == 'N' ) {
		_flag_Qimm12(i1,j1,i2,j2) = 'I';
	//Body for Qimm12
		Qimm12(i1,j1,i2,j2) = (((eval_tempQimm121(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)))+((eval_tempQimm122(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1))))+(((eval_tempQimm123(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)))*(ekissing(0,0,1)));
		_flag_Qimm12(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qimm12(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qimm12 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qimm12(i1,j1,i2,j2);
}
double eval_Qimm21(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qimm21(i1,j1,i2,j2) == 'N' ) {
		_flag_Qimm21(i1,j1,i2,j2) = 'I';
	//Body for Qimm21
		Qimm21(i1,j1,i2,j2) = (((eval_tempQimm211(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)))+((eval_tempQimm212(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+(((eval_tempQimm213(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)))*(ekissing(0,0,1)));
		_flag_Qimm21(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qimm21(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qimm21 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qimm21(i1,j1,i2,j2);
}
double eval_Qimm22(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qimm22(i1,j1,i2,j2) == 'N' ) {
		_flag_Qimm22(i1,j1,i2,j2) = 'I';
	//Body for Qimm22
		Qimm22(i1,j1,i2,j2) = (((eval_tempQimm221(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)))+((eval_tempQimm222(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1))))+(((eval_tempQimm223(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)))*(emulti(0,0,1)));
		_flag_Qimm22(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qimm22(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qimm22 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qimm22(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQimk011_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiand01(N,M,MHL,i1,d,i2,e))*(eval_Qix01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQimk011(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQimk011(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQimk011(i1,j1,i2,j2) = 'I';
	//Body for tempQimk011
		tempQimk011(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQimk011_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQimk011(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQimk011(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQimk011 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQimk011(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQimk012_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiand01(N,M,MHL,i1,d,i2,e))*(eval_Qixm10(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQimk012(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQimk012(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQimk012(i1,j1,i2,j2) = 'I';
	//Body for tempQimk012
		tempQimk012(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQimk012_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQimk012(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQimk012(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQimk012 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQimk012(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQimk013_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiand01(N,M,MHL,i1,d,i2,e))*(eval_Qiy(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQimk013(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQimk013(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQimk013(i1,j1,i2,j2) = 'I';
	//Body for tempQimk013
		tempQimk013(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQimk013_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQimk013(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQimk013(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQimk013 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQimk013(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQimk014_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiann01(N,M,MHL,i1,d,i2,e))*(eval_Qixk01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQimk014(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQimk014(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQimk014(i1,j1,i2,j2) = 'I';
	//Body for tempQimk014
		tempQimk014(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQimk014_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQimk014(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQimk014(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQimk014 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQimk014(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQimk111_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiand11(N,M,MHL,i1,d,i2,e))*(eval_Qix01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQimk111(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQimk111(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQimk111(i1,j1,i2,j2) = 'I';
	//Body for tempQimk111
		tempQimk111(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQimk111_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQimk111(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQimk111(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQimk111 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQimk111(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQimk112_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiand11(N,M,MHL,i1,d,i2,e))*(eval_Qixm11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQimk112(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQimk112(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQimk112(i1,j1,i2,j2) = 'I';
	//Body for tempQimk112
		tempQimk112(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQimk112_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQimk112(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQimk112(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQimk112 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQimk112(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQimk113_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiand11(N,M,MHL,i1,d,i2,e))*(eval_Qiy(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQimk113(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQimk113(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQimk113(i1,j1,i2,j2) = 'I';
	//Body for tempQimk113
		tempQimk113(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQimk113_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQimk113(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQimk113(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQimk113 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQimk113(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQimk114_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiann11(N,M,MHL,i1,d,i2,e))*(eval_Qixk01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQimk114(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQimk114(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQimk114(i1,j1,i2,j2) = 'I';
	//Body for tempQimk114
		tempQimk114(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQimk114_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQimk114(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQimk114(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQimk114 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQimk114(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQimk201_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiand20(N,M,MHL,i1,d,i2,e))*(eval_Qix00(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQimk201(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQimk201(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQimk201(i1,j1,i2,j2) = 'I';
	//Body for tempQimk201
		tempQimk201(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQimk201_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQimk201(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQimk201(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQimk201 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQimk201(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQimk202_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiand20(N,M,MHL,i1,d,i2,e))*(eval_Qixm12(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQimk202(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQimk202(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQimk202(i1,j1,i2,j2) = 'I';
	//Body for tempQimk202
		tempQimk202(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQimk202_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQimk202(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQimk202(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQimk202 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQimk202(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQimk203_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiand20(N,M,MHL,i1,d,i2,e))*(eval_Qiy(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQimk203(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQimk203(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQimk203(i1,j1,i2,j2) = 'I';
	//Body for tempQimk203
		tempQimk203(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQimk203_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQimk203(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQimk203(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQimk203 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQimk203(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQimk204_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiann20(N,M,MHL,i1,d,i2,e))*(eval_Qixk00(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQimk204(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQimk204(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQimk204(i1,j1,i2,j2) = 'I';
	//Body for tempQimk204
		tempQimk204(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQimk204_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQimk204(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQimk204(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQimk204 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQimk204(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQimk211_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiand21(N,M,MHL,i1,d,i2,e))*(eval_Qix01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQimk211(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQimk211(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQimk211(i1,j1,i2,j2) = 'I';
	//Body for tempQimk211
		tempQimk211(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQimk211_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQimk211(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQimk211(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQimk211 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQimk211(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQimk212_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiand21(N,M,MHL,i1,d,i2,e))*(eval_Qixm12(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQimk212(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQimk212(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQimk212(i1,j1,i2,j2) = 'I';
	//Body for tempQimk212
		tempQimk212(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQimk212_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQimk212(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQimk212(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQimk212 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQimk212(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQimk213_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiand21(N,M,MHL,i1,d,i2,e))*(eval_Qiy(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQimk213(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQimk213(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQimk213(i1,j1,i2,j2) = 'I';
	//Body for tempQimk213
		tempQimk213(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQimk213_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQimk213(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQimk213(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQimk213 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQimk213(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQimk214_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiann21(N,M,MHL,i1,d,i2,e))*(eval_Qixk01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQimk214(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQimk214(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQimk214(i1,j1,i2,j2) = 'I';
	//Body for tempQimk214
		tempQimk214(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQimk214_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQimk214(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQimk214(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQimk214 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQimk214(i1,j1,i2,j2);
}
double eval_Qimk01(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qimk01(i1,j1,i2,j2) == 'N' ) {
		_flag_Qimk01(i1,j1,i2,j2) = 'I';
	//Body for Qimk01
		Qimk01(i1,j1,i2,j2) = (((eval_tempQimk011(N,M,MHL,i1,j1,i2,j2))+((eval_tempQimk012(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+((eval_tempQimk013(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+(eval_tempQimk014(N,M,MHL,i1,j1,i2,j2));
		_flag_Qimk01(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qimk01(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qimk01 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qimk01(i1,j1,i2,j2);
}
double eval_Qimk20(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qimk20(i1,j1,i2,j2) == 'N' ) {
		_flag_Qimk20(i1,j1,i2,j2) = 'I';
	//Body for Qimk20
		Qimk20(i1,j1,i2,j2) = ((((eval_tempQimk201(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)))+(eval_tempQimk202(N,M,MHL,i1,j1,i2,j2)))+(((eval_tempQimk203(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)))*(ekissing(0,0,1))))+((eval_tempQimk204(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)));
		_flag_Qimk20(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qimk20(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qimk20 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qimk20(i1,j1,i2,j2);
}
double eval_Qimk11(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qimk11(i1,j1,i2,j2) == 'N' ) {
		_flag_Qimk11(i1,j1,i2,j2) = 'I';
	//Body for Qimk11
		Qimk11(i1,j1,i2,j2) = ((((eval_tempQimk111(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)))+((eval_tempQimk112(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+(((eval_tempQimk113(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)))*(ekissing(0,0,1))))+((eval_tempQimk114(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)));
		_flag_Qimk11(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qimk11(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qimk11 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qimk11(i1,j1,i2,j2);
}
double eval_Qimk21(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qimk21(i1,j1,i2,j2) == 'N' ) {
		_flag_Qimk21(i1,j1,i2,j2) = 'I';
	//Body for Qimk21
		Qimk21(i1,j1,i2,j2) = ((((eval_tempQimk211(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)))+((eval_tempQimk212(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+(((eval_tempQimk213(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)))*(ekissing(0,0,1))))+((eval_tempQimk214(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)));
		_flag_Qimk21(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qimk21(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qimk21 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qimk21(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQikm021_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiadn02(N,M,MHL,i1,d,i2,e))*(eval_Qix10(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQikm021(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQikm021(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQikm021(i1,j1,i2,j2) = 'I';
	//Body for tempQikm021
		tempQikm021(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQikm021_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQikm021(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQikm021(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQikm021 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQikm021(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQikm022_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiadn02(N,M,MHL,i1,d,i2,e))*(eval_Qixm02(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQikm022(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQikm022(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQikm022(i1,j1,i2,j2) = 'I';
	//Body for tempQikm022
		tempQikm022(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQikm022_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQikm022(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQikm022(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQikm022 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQikm022(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQikm023_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiadn02(N,M,MHL,i1,d,i2,e))*(eval_Qiy(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQikm023(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQikm023(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQikm023(i1,j1,i2,j2) = 'I';
	//Body for tempQikm023
		tempQikm023(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQikm023_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQikm023(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQikm023(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQikm023 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQikm023(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQikm024_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiann02(N,M,MHL,i1,d,i2,e))*(eval_Qixk10(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQikm024(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQikm024(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQikm024(i1,j1,i2,j2) = 'I';
	//Body for tempQikm024
		tempQikm024(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQikm024_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQikm024(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQikm024(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQikm024 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQikm024(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQikm101_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiadn10(N,M,MHL,i1,d,i2,e))*(eval_Qix11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQikm101(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQikm101(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQikm101(i1,j1,i2,j2) = 'I';
	//Body for tempQikm101
		tempQikm101(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQikm101_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQikm101(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQikm101(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQikm101 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQikm101(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQikm102_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiadn10(N,M,MHL,i1,d,i2,e))*(eval_Qixm00(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQikm102(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQikm102(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQikm102(i1,j1,i2,j2) = 'I';
	//Body for tempQikm102
		tempQikm102(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQikm102_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQikm102(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQikm102(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQikm102 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQikm102(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQikm103_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiadn10(N,M,MHL,i1,d,i2,e))*(eval_Qiy(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQikm103(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQikm103(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQikm103(i1,j1,i2,j2) = 'I';
	//Body for tempQikm103
		tempQikm103(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQikm103_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQikm103(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQikm103(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQikm103 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQikm103(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQikm104_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiann10(N,M,MHL,i1,d,i2,e))*(eval_Qixk11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQikm104(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQikm104(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQikm104(i1,j1,i2,j2) = 'I';
	//Body for tempQikm104
		tempQikm104(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQikm104_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQikm104(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQikm104(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQikm104 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQikm104(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQikm111_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiadn11(N,M,MHL,i1,d,i2,e))*(eval_Qix11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQikm111(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQikm111(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQikm111(i1,j1,i2,j2) = 'I';
	//Body for tempQikm111
		tempQikm111(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQikm111_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQikm111(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQikm111(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQikm111 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQikm111(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQikm112_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiadn11(N,M,MHL,i1,d,i2,e))*(eval_Qixm01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQikm112(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQikm112(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQikm112(i1,j1,i2,j2) = 'I';
	//Body for tempQikm112
		tempQikm112(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQikm112_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQikm112(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQikm112(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQikm112 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQikm112(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQikm113_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiadn11(N,M,MHL,i1,d,i2,e))*(eval_Qiy(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQikm113(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQikm113(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQikm113(i1,j1,i2,j2) = 'I';
	//Body for tempQikm113
		tempQikm113(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQikm113_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQikm113(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQikm113(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQikm113 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQikm113(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQikm114_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiann11(N,M,MHL,i1,d,i2,e))*(eval_Qixk11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQikm114(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQikm114(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQikm114(i1,j1,i2,j2) = 'I';
	//Body for tempQikm114
		tempQikm114(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQikm114_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQikm114(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQikm114(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQikm114 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQikm114(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQikm121_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiadn12(N,M,MHL,i1,d,i2,e))*(eval_Qix11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQikm121(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQikm121(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQikm121(i1,j1,i2,j2) = 'I';
	//Body for tempQikm121
		tempQikm121(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQikm121_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQikm121(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQikm121(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQikm121 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQikm121(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQikm122_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiadn12(N,M,MHL,i1,d,i2,e))*(eval_Qixm02(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQikm122(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQikm122(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQikm122(i1,j1,i2,j2) = 'I';
	//Body for tempQikm122
		tempQikm122(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQikm122_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQikm122(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQikm122(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQikm122 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQikm122(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQikm123_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiadn12(N,M,MHL,i1,d,i2,e))*(eval_Qiy(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQikm123(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQikm123(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQikm123(i1,j1,i2,j2) = 'I';
	//Body for tempQikm123
		tempQikm123(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQikm123_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQikm123(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQikm123(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQikm123 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQikm123(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQikm124_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiann12(N,M,MHL,i1,d,i2,e))*(eval_Qixk11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQikm124(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQikm124(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQikm124(i1,j1,i2,j2) = 'I';
	//Body for tempQikm124
		tempQikm124(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQikm124_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQikm124(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQikm124(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQikm124 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQikm124(i1,j1,i2,j2);
}
double eval_Qikm10(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qikm10(i1,j1,i2,j2) == 'N' ) {
		_flag_Qikm10(i1,j1,i2,j2) = 'I';
	//Body for Qikm10
		Qikm10(i1,j1,i2,j2) = (((eval_tempQikm101(N,M,MHL,i1,j1,i2,j2))+((eval_tempQikm102(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+((eval_tempQikm103(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+(eval_tempQikm104(N,M,MHL,i1,j1,i2,j2));
		_flag_Qikm10(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qikm10(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qikm10 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qikm10(i1,j1,i2,j2);
}
double eval_Qikm02(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qikm02(i1,j1,i2,j2) == 'N' ) {
		_flag_Qikm02(i1,j1,i2,j2) = 'I';
	//Body for Qikm02
		Qikm02(i1,j1,i2,j2) = ((((eval_tempQikm021(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)))+(eval_tempQikm022(N,M,MHL,i1,j1,i2,j2)))+((eval_tempQikm023(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1))))+((eval_tempQikm024(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)));
		_flag_Qikm02(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qikm02(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qikm02 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qikm02(i1,j1,i2,j2);
}
double eval_Qikm11(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qikm11(i1,j1,i2,j2) == 'N' ) {
		_flag_Qikm11(i1,j1,i2,j2) = 'I';
	//Body for Qikm11
		Qikm11(i1,j1,i2,j2) = ((((eval_tempQikm111(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)))+((eval_tempQikm112(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+(((eval_tempQikm113(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)))*(ekissing(0,0,1))))+((eval_tempQikm114(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)));
		_flag_Qikm11(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qikm11(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qikm11 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qikm11(i1,j1,i2,j2);
}
double eval_Qikm12(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qikm12(i1,j1,i2,j2) == 'N' ) {
		_flag_Qikm12(i1,j1,i2,j2) = 'I';
	//Body for Qikm12
		Qikm12(i1,j1,i2,j2) = ((((eval_tempQikm121(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)))+((eval_tempQikm122(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+(((eval_tempQikm123(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)))*(ekissing(0,0,1))))+((eval_tempQikm124(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)));
		_flag_Qikm12(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qikm12(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qikm12 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qikm12(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQikk011_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_auxqiadd01(N,M,MHL,i1,d,i2,e))*(eval_Qix01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQikk011(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQikk011(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQikk011(i1,j1,i2,j2) = 'I';
	//Body for tempQikk011
		tempQikk011(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQikk011_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQikk011(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQikk011(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQikk011 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQikk011(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQikk012_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_auxqiadd01(N,M,MHL,i1,d,i2,e))*(eval_Qix10(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQikk012(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQikk012(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQikk012(i1,j1,i2,j2) = 'I';
	//Body for tempQikk012
		tempQikk012(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQikk012_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQikk012(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQikk012(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQikk012 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQikk012(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQikk013_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_auxqiadd01(N,M,MHL,i1,d,i2,e))*(eval_Qiy(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQikk013(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQikk013(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQikk013(i1,j1,i2,j2) = 'I';
	//Body for tempQikk013
		tempQikk013(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQikk013_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQikk013(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQikk013(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQikk013 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQikk013(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQikk014_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiadn01(N,M,MHL,i1,d,i2,e))*(eval_Qixk01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQikk014(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQikk014(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQikk014(i1,j1,i2,j2) = 'I';
	//Body for tempQikk014
		tempQikk014(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQikk014_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQikk014(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQikk014(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQikk014 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQikk014(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQikk015_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiand01(N,M,MHL,i1,d,i2,e))*(eval_Qixk10(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQikk015(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQikk015(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQikk015(i1,j1,i2,j2) = 'I';
	//Body for tempQikk015
		tempQikk015(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQikk015_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQikk015(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQikk015(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQikk015 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQikk015(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQikk101_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_auxqiadd10(N,M,MHL,i1,d,i2,e))*(eval_Qix00(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQikk101(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQikk101(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQikk101(i1,j1,i2,j2) = 'I';
	//Body for tempQikk101
		tempQikk101(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQikk101_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQikk101(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQikk101(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQikk101 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQikk101(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQikk102_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_auxqiadd10(N,M,MHL,i1,d,i2,e))*(eval_Qix11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQikk102(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQikk102(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQikk102(i1,j1,i2,j2) = 'I';
	//Body for tempQikk102
		tempQikk102(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQikk102_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQikk102(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQikk102(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQikk102 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQikk102(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQikk103_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_auxqiadd10(N,M,MHL,i1,d,i2,e))*(eval_Qiy(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQikk103(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQikk103(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQikk103(i1,j1,i2,j2) = 'I';
	//Body for tempQikk103
		tempQikk103(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQikk103_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQikk103(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQikk103(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQikk103 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQikk103(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQikk104_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiadn10(N,M,MHL,i1,d,i2,e))*(eval_Qixk00(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQikk104(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQikk104(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQikk104(i1,j1,i2,j2) = 'I';
	//Body for tempQikk104
		tempQikk104(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQikk104_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQikk104(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQikk104(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQikk104 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQikk104(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQikk105_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiand10(N,M,MHL,i1,d,i2,e))*(eval_Qixk11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQikk105(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQikk105(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQikk105(i1,j1,i2,j2) = 'I';
	//Body for tempQikk105
		tempQikk105(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQikk105_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQikk105(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQikk105(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQikk105 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQikk105(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQikk111_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_auxqiadd11(N,M,MHL,i1,d,i2,e))*(eval_Qix01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQikk111(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQikk111(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQikk111(i1,j1,i2,j2) = 'I';
	//Body for tempQikk111
		tempQikk111(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQikk111_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQikk111(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQikk111(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQikk111 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQikk111(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQikk112_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_auxqiadd11(N,M,MHL,i1,d,i2,e))*(eval_Qix11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQikk112(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQikk112(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQikk112(i1,j1,i2,j2) = 'I';
	//Body for tempQikk112
		tempQikk112(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQikk112_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQikk112(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQikk112(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQikk112 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQikk112(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQikk113_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_auxqiadd11(N,M,MHL,i1,d,i2,e))*(eval_Qiy(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQikk113(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQikk113(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQikk113(i1,j1,i2,j2) = 'I';
	//Body for tempQikk113
		tempQikk113(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQikk113_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQikk113(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQikk113(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQikk113 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQikk113(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQikk114_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiadn11(N,M,MHL,i1,d,i2,e))*(eval_Qixk01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQikk114(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQikk114(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQikk114(i1,j1,i2,j2) = 'I';
	//Body for tempQikk114
		tempQikk114(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQikk114_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQikk114(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQikk114(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQikk114 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQikk114(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQikk115_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiand11(N,M,MHL,i1,d,i2,e))*(eval_Qixk11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQikk115(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQikk115(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQikk115(i1,j1,i2,j2) = 'I';
	//Body for tempQikk115
		tempQikk115(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQikk115_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQikk115(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQikk115(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQikk115 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQikk115(i1,j1,i2,j2);
}
double eval_Qikk01(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qikk01(i1,j1,i2,j2) == 'N' ) {
		_flag_Qikk01(i1,j1,i2,j2) = 'I';
	//Body for Qikk01
		Qikk01(i1,j1,i2,j2) = ((((((eval_Qiar01(N,M,MHL,i1,j1,i2,j2))+(eval_Qilr01(N,M,MHL,i1,j1,i2,j2)))+(eval_tempQikk011(N,M,MHL,i1,j1,i2,j2)))+((eval_tempQikk012(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+((eval_tempQikk013(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+(eval_tempQikk014(N,M,MHL,i1,j1,i2,j2)))+((eval_tempQikk015(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)));
		_flag_Qikk01(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qikk01(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qikk01 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qikk01(i1,j1,i2,j2);
}
double eval_Qikk10(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qikk10(i1,j1,i2,j2) == 'N' ) {
		_flag_Qikk10(i1,j1,i2,j2) = 'I';
	//Body for Qikk10
		Qikk10(i1,j1,i2,j2) = ((((((eval_Qiar10(N,M,MHL,i1,j1,i2,j2))+(eval_Qilr10(N,M,MHL,i1,j1,i2,j2)))+((eval_tempQikk101(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+(eval_tempQikk102(N,M,MHL,i1,j1,i2,j2)))+((eval_tempQikk103(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+((eval_tempQikk104(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+(eval_tempQikk105(N,M,MHL,i1,j1,i2,j2));
		_flag_Qikk10(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qikk10(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qikk10 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qikk10(i1,j1,i2,j2);
}
double eval_Qikk11(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qikk11(i1,j1,i2,j2) == 'N' ) {
		_flag_Qikk11(i1,j1,i2,j2) = 'I';
	//Body for Qikk11
		Qikk11(i1,j1,i2,j2) = ((((((eval_Qiar11(N,M,MHL,i1,j1,i2,j2))+(eval_Qilr11(N,M,MHL,i1,j1,i2,j2)))+((eval_tempQikk111(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+((eval_tempQikk112(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+(((eval_tempQikk113(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)))*(ekissing(0,0,1))))+((eval_tempQikk114(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+((eval_tempQikk115(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)));
		_flag_Qikk11(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qikk11(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qikk11 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qikk11(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQia1_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qix00(N,M,MHL,i1,d,i2,e))*(eval_Qi(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|N>=j1p+1 && j1p>=i1p+1 && M>=j2p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && N>=j1+1 && i1>=0 && N>=i1+1 && d>=-1 && N>=d+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=-1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQia1(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQia1(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQia1(i1,j1,i2,j2) = 'I';
	//Body for tempQia1
		tempQia1(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQia1_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQia1(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQia1(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQia1 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQia1(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQia2_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qix10(N,M,MHL,i1,d,i2,e))*(eval_Qi(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|N>=j1p+1 && j1p>=i1p+1 && M>=j2p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && N>=j1+1 && i1>=0 && N>=i1+1 && d>=-1 && N>=d+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=-1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQia2(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQia2(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQia2(i1,j1,i2,j2) = 'I';
	//Body for tempQia2
		tempQia2(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQia2_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQia2(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQia2(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQia2 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQia2(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQia3_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiy(N,M,MHL,i1,d,i2,e))*(eval_Qi(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|N>=j1p+1 && j1p>=i1p+1 && M>=j2p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && N>=j1+1 && i1>=0 && N>=i1+1 && d>=-1 && N>=d+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=-1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQia3(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQia3(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQia3(i1,j1,i2,j2) = 'I';
	//Body for tempQia3
		tempQia3(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQia3_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQia3(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQia3(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQia3 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQia3(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQia4_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,e+1,j2))*(eval_Qix00(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQia4_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,d+1,j1))*(eval_Qix00(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQia4_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,e+1,j2))*(eval_Qix00(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQia4_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,d+1,j1))*(eval_Qix00(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQia4(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQia4(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQia4(i1,j1,i2,j2) = 'I';
	//Body for tempQia4
		tempQia4(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQia4_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQia4_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qix00(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQia4_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qix00(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQia4_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qix00(N,M,MHL,i1,j1,i2,j2)):(eval_Qix00(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQia4(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQia4(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQia4 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQia4(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQia5_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,e+1,j2))*(eval_Qix10(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQia5_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,d+1,j1))*(eval_Qix10(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQia5_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,e+1,j2))*(eval_Qix10(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQia5_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,d+1,j1))*(eval_Qix10(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQia5(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQia5(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQia5(i1,j1,i2,j2) = 'I';
	//Body for tempQia5
		tempQia5(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQia5_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQia5_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qix10(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQia5_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qix10(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQia5_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qix10(N,M,MHL,i1,j1,i2,j2)):(eval_Qix10(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQia5(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQia5(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQia5 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQia5(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQia6_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,e+1,j2))*(eval_Qiy(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQia6_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,d+1,j1))*(eval_Qiy(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQia6_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,e+1,j2))*(eval_Qiy(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQia6_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,d+1,j1))*(eval_Qiy(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQia6(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQia6(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQia6(i1,j1,i2,j2) = 'I';
	//Body for tempQia6
		tempQia6(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQia6_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQia6_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiy(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQia6_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qiy(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQia6_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qiy(N,M,MHL,i1,j1,i2,j2)):(eval_Qiy(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQia6(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQia6(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQia6 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQia6(i1,j1,i2,j2);
}
double eval_Qia(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qia(i1,j1,i2,j2) == 'N' ) {
		_flag_Qia(i1,j1,i2,j2) = 'I';
	//Body for Qia
		Qia(i1,j1,i2,j2) = (((((eval_tempQia1(N,M,MHL,i1,j1,i2,j2))+(eval_tempQia2(N,M,MHL,i1,j1,i2,j2)))+(eval_tempQia3(N,M,MHL,i1,j1,i2,j2)))+(eval_tempQia4(N,M,MHL,i1,j1,i2,j2)))+(eval_tempQia5(N,M,MHL,i1,j1,i2,j2)))+(eval_tempQia6(N,M,MHL,i1,j1,i2,j2));
		_flag_Qia(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qia(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qia at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qia(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQib001_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qihm00(N,M,MHL,i1,d,i2,e))*(eval_Qib00(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQib001(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQib001(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQib001(i1,j1,i2,j2) = 'I';
	//Body for tempQib001
		tempQib001(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQib001_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQib001(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQib001(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQib001 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQib001(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQib002_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qihh00(N,M,MHL,i1,d,i2,e))*(eval_Qia(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQib002(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQib002(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQib002(i1,j1,i2,j2) = 'I';
	//Body for tempQib002
		tempQib002(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQib002_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQib002(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQib002(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQib002 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQib002(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQib011_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qihm01(N,M,MHL,i1,d,i2,e))*(eval_Qib01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQib011(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQib011(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQib011(i1,j1,i2,j2) = 'I';
	//Body for tempQib011
		tempQib011(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQib011_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQib011(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQib011(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQib011 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQib011(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQib012_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qihh01(N,M,MHL,i1,d,i2,e))*(eval_auxqia01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQib012(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQib012(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQib012(i1,j1,i2,j2) = 'I';
	//Body for tempQib012
		tempQib012(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQib012_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQib012(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQib012(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQib012 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQib012(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQib101_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qihm10(N,M,MHL,i1,d,i2,e))*(eval_Qib10(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQib101(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQib101(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQib101(i1,j1,i2,j2) = 'I';
	//Body for tempQib101
		tempQib101(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQib101_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQib101(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQib101(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQib101 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQib101(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQib102_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qihh10(N,M,MHL,i1,d,i2,e))*(eval_auxqia10(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQib102(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQib102(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQib102(i1,j1,i2,j2) = 'I';
	//Body for tempQib102
		tempQib102(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQib102_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQib102(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQib102(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQib102 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQib102(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQib111_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qihm11(N,M,MHL,i1,d,i2,e))*(eval_Qib11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQib111(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQib111(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQib111(i1,j1,i2,j2) = 'I';
	//Body for tempQib111
		tempQib111(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQib111_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQib111(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQib111(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQib111 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQib111(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQib112_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qihh11(N,M,MHL,i1,d,i2,e))*(eval_auxqia11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQib112(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQib112(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQib112(i1,j1,i2,j2) = 'I';
	//Body for tempQib112
		tempQib112(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQib112_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQib112(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQib112(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQib112 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQib112(i1,j1,i2,j2);
}
double eval_Qib00(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qib00(i1,j1,i2,j2) == 'N' ) {
		_flag_Qib00(i1,j1,i2,j2) = 'I';
	//Body for Qib00
		Qib00(i1,j1,i2,j2) = ((eval_tempQib001(N,M,MHL,i1,j1,i2,j2))+(eval_tempQib002(N,M,MHL,i1,j1,i2,j2)))+(eval_Qihh00(N,M,MHL,i1,j1,i2,j2));
		_flag_Qib00(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qib00(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qib00 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qib00(i1,j1,i2,j2);
}
double eval_Qib01(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qib01(i1,j1,i2,j2) == 'N' ) {
		_flag_Qib01(i1,j1,i2,j2) = 'I';
	//Body for Qib01
		Qib01(i1,j1,i2,j2) = ((eval_tempQib011(N,M,MHL,i1,j1,i2,j2))+(eval_tempQib012(N,M,MHL,i1,j1,i2,j2)))+(eval_Qihh01(N,M,MHL,i1,j1,i2,j2));
		_flag_Qib01(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qib01(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qib01 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qib01(i1,j1,i2,j2);
}
double eval_Qib10(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qib10(i1,j1,i2,j2) == 'N' ) {
		_flag_Qib10(i1,j1,i2,j2) = 'I';
	//Body for Qib10
		Qib10(i1,j1,i2,j2) = ((eval_tempQib101(N,M,MHL,i1,j1,i2,j2))+(eval_tempQib102(N,M,MHL,i1,j1,i2,j2)))+(eval_Qihh10(N,M,MHL,i1,j1,i2,j2));
		_flag_Qib10(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qib10(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qib10 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qib10(i1,j1,i2,j2);
}
double eval_Qib11(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qib11(i1,j1,i2,j2) == 'N' ) {
		_flag_Qib11(i1,j1,i2,j2) = 'I';
	//Body for Qib11
		Qib11(i1,j1,i2,j2) = ((eval_tempQib111(N,M,MHL,i1,j1,i2,j2))+(eval_tempQib112(N,M,MHL,i1,j1,i2,j2)))+(eval_Qihh11(N,M,MHL,i1,j1,i2,j2));
		_flag_Qib11(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qib11(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qib11 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qib11(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQi1_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((eval_Q00(N,M,MHL,i1,d-1))*(eval_Q01(N,M,MHL,i2,e-1)))*(eval_Qia(N,M,MHL,d,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=j1p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && e>=i2+1 && j2>=e && j1>=i1+1 && j2>=i2+1 && M>=e+1 && i1>=0 && N>=i1+1 && e>=0 && N>=d+1 && N>=j1+1 && M>=j2+1 && d>=0 && i2>=0 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	for(c6=i2p+1;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQi1_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,i2,e-1))*(eval_Qia(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && M>=j2p+1 && j1p>=i1p+1 && N>=i1p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && j2>=i2+1 && N>=i1+1 && i1>=0 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQi1_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,i1,d-1))*(eval_Qia(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && j2p>=i2p+1 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1+1 && j1>=d && j1>=i1+1 && M>=j2+1 && d>=0 && i1>=0 && N>=i1+1 && j2>=i2+1 && N>=d+1 && M>=i2+1 && i2>=0 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQi1_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,i2,e-1))*(eval_Qia(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=i1p+1 && M>=j2p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && i1>=0 && j2>=i2+1 && N>=i1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQi1_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,i1,d-1))*(eval_Qia(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && d>=0 && N>=j1+1 && i2>=0 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=d+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQi1(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQi1(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQi1(i1,j1,i2,j2) = 'I';
	//Body for tempQi1
		tempQi1(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_tempQi1_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQi1_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_tempQi1_3(N,M,MHL,i1,j1,i2,j2)))+(eval_Qia(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQi1_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qia(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQi1_5(N,M,MHL,i1,j1,i2,j2))+(eval_Qia(N,M,MHL,i1,j1,i2,j2)):(eval_Qia(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQi1(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQi1(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQi1 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQi1(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQi2_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((eval_Q00(N,M,MHL,i1,d-1))*(eval_Q01(N,M,MHL,i2,e-1)))*(eval_Qib00(N,M,MHL,d,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=j1p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && e>=i2+1 && j2>=e && j1>=i1+1 && j2>=i2+1 && M>=e+1 && i1>=0 && N>=i1+1 && e>=0 && N>=d+1 && N>=j1+1 && M>=j2+1 && d>=0 && i2>=0 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	for(c6=i2p+1;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQi2_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,i2,e-1))*(eval_Qib00(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && M>=j2p+1 && j1p>=i1p+1 && N>=i1p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && j2>=i2+1 && N>=i1+1 && i1>=0 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQi2_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,i1,d-1))*(eval_Qib00(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && j2p>=i2p+1 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1+1 && j1>=d && j1>=i1+1 && M>=j2+1 && d>=0 && i1>=0 && N>=i1+1 && j2>=i2+1 && N>=d+1 && M>=i2+1 && i2>=0 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQi2_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,i2,e-1))*(eval_Qib00(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=i1p+1 && M>=j2p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && i1>=0 && j2>=i2+1 && N>=i1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQi2_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,i1,d-1))*(eval_Qib00(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && d>=0 && N>=j1+1 && i2>=0 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=d+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQi2(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQi2(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQi2(i1,j1,i2,j2) = 'I';
	//Body for tempQi2
		tempQi2(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_tempQi2_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQi2_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_tempQi2_3(N,M,MHL,i1,j1,i2,j2)))+(eval_Qib00(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQi2_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qib00(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQi2_5(N,M,MHL,i1,j1,i2,j2))+(eval_Qib00(N,M,MHL,i1,j1,i2,j2)):(eval_Qib00(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQi2(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQi2(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQi2 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQi2(i1,j1,i2,j2);
}
double eval_Qi(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qi(i1,j1,i2,j2) == 'N' ) {
		_flag_Qi(i1,j1,i2,j2) = 'I';
	//Body for Qi
		Qi(i1,j1,i2,j2) = ((eval_tempQi1(N,M,MHL,i1,j1,i2,j2))+(eval_tempQi2(N,M,MHL,i1,j1,i2,j2)))+((eval_Q00(N,M,MHL,i1,j1))*(eval_Q01(N,M,MHL,i2,j2)));
		_flag_Qi(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qi(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qi at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qi(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQinn011_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((eval_Q00(N,M,MHL,i1,d-1))*(eval_Q11(N,M,MHL,i2,e-1)))*(eval_Qiann01(N,M,MHL,d,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=j1p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && e>=i2+1 && j2>=e && j1>=i1+1 && j2>=i2+1 && M>=e+1 && i1>=0 && N>=i1+1 && e>=0 && N>=d+1 && N>=j1+1 && M>=j2+1 && d>=0 && i2>=0 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	for(c6=i2p+1;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQinn011_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,i2,e-1))*(eval_Qiann01(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && M>=j2p+1 && j1p>=i1p+1 && N>=i1p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && j2>=i2+1 && N>=i1+1 && i1>=0 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQinn011_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,i1,d-1))*(eval_Qiann01(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && j2p>=i2p+1 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1+1 && j1>=d && j1>=i1+1 && M>=j2+1 && d>=0 && i1>=0 && N>=i1+1 && j2>=i2+1 && N>=d+1 && M>=i2+1 && i2>=0 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQinn011_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,i2,e-1))*(eval_Qiann01(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=i1p+1 && M>=j2p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && i1>=0 && j2>=i2+1 && N>=i1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQinn011_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,i1,d-1))*(eval_Qiann01(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && d>=0 && N>=j1+1 && i2>=0 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=d+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQinn011(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQinn011(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQinn011(i1,j1,i2,j2) = 'I';
	//Body for tempQinn011
		tempQinn011(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_tempQinn011_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQinn011_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_tempQinn011_3(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiann01(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQinn011_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qiann01(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQinn011_5(N,M,MHL,i1,j1,i2,j2))+(eval_Qiann01(N,M,MHL,i1,j1,i2,j2)):(eval_Qiann01(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQinn011(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQinn011(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQinn011 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQinn011(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQinn021_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((eval_Q00(N,M,MHL,i1,d-1))*(eval_Q21(N,M,MHL,i2,e-1)))*(eval_Qiann02(N,M,MHL,d,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=j1p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && e>=i2+1 && j2>=e && j1>=i1+1 && j2>=i2+1 && M>=e+1 && i1>=0 && N>=i1+1 && e>=0 && N>=d+1 && N>=j1+1 && M>=j2+1 && d>=0 && i2>=0 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	for(c6=i2p+1;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQinn021_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q21(N,M,MHL,i2,e-1))*(eval_Qiann02(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && M>=j2p+1 && j1p>=i1p+1 && N>=i1p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && j2>=i2+1 && N>=i1+1 && i1>=0 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQinn021_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,i1,d-1))*(eval_Qiann02(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && j2p>=i2p+1 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1+1 && j1>=d && j1>=i1+1 && M>=j2+1 && d>=0 && i1>=0 && N>=i1+1 && j2>=i2+1 && N>=d+1 && M>=i2+1 && i2>=0 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQinn021_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q21(N,M,MHL,i2,e-1))*(eval_Qiann02(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=i1p+1 && M>=j2p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && i1>=0 && j2>=i2+1 && N>=i1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQinn021_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,i1,d-1))*(eval_Qiann02(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && d>=0 && N>=j1+1 && i2>=0 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=d+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQinn021(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQinn021(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQinn021(i1,j1,i2,j2) = 'I';
	//Body for tempQinn021
		tempQinn021(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_tempQinn021_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQinn021_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_tempQinn021_3(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiann02(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQinn021_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qiann02(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQinn021_5(N,M,MHL,i1,j1,i2,j2))+(eval_Qiann02(N,M,MHL,i1,j1,i2,j2)):(eval_Qiann02(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQinn021(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQinn021(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQinn021 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQinn021(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQinn101_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((eval_Q10(N,M,MHL,i1,d-1))*(eval_Q01(N,M,MHL,i2,e-1)))*(eval_Qiann10(N,M,MHL,d,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=j1p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && e>=i2+1 && j2>=e && j1>=i1+1 && j2>=i2+1 && M>=e+1 && i1>=0 && N>=i1+1 && e>=0 && N>=d+1 && N>=j1+1 && M>=j2+1 && d>=0 && i2>=0 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	for(c6=i2p+1;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQinn101_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,i2,e-1))*(eval_Qiann10(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && M>=j2p+1 && j1p>=i1p+1 && N>=i1p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && j2>=i2+1 && N>=i1+1 && i1>=0 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQinn101_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,i1,d-1))*(eval_Qiann10(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && j2p>=i2p+1 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1+1 && j1>=d && j1>=i1+1 && M>=j2+1 && d>=0 && i1>=0 && N>=i1+1 && j2>=i2+1 && N>=d+1 && M>=i2+1 && i2>=0 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQinn101_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,i2,e-1))*(eval_Qiann10(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=i1p+1 && M>=j2p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && i1>=0 && j2>=i2+1 && N>=i1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQinn101_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,i1,d-1))*(eval_Qiann10(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && d>=0 && N>=j1+1 && i2>=0 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=d+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQinn101(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQinn101(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQinn101(i1,j1,i2,j2) = 'I';
	//Body for tempQinn101
		tempQinn101(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_tempQinn101_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQinn101_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_tempQinn101_3(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiann10(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQinn101_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qiann10(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQinn101_5(N,M,MHL,i1,j1,i2,j2))+(eval_Qiann10(N,M,MHL,i1,j1,i2,j2)):(eval_Qiann10(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQinn101(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQinn101(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQinn101 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQinn101(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQinn111_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((eval_Q10(N,M,MHL,i1,d-1))*(eval_Q11(N,M,MHL,i2,e-1)))*(eval_Qiann11(N,M,MHL,d,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=j1p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && e>=i2+1 && j2>=e && j1>=i1+1 && j2>=i2+1 && M>=e+1 && i1>=0 && N>=i1+1 && e>=0 && N>=d+1 && N>=j1+1 && M>=j2+1 && d>=0 && i2>=0 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	for(c6=i2p+1;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQinn111_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,i2,e-1))*(eval_Qiann11(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && M>=j2p+1 && j1p>=i1p+1 && N>=i1p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && j2>=i2+1 && N>=i1+1 && i1>=0 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQinn111_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,i1,d-1))*(eval_Qiann11(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && j2p>=i2p+1 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1+1 && j1>=d && j1>=i1+1 && M>=j2+1 && d>=0 && i1>=0 && N>=i1+1 && j2>=i2+1 && N>=d+1 && M>=i2+1 && i2>=0 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQinn111_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,i2,e-1))*(eval_Qiann11(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=i1p+1 && M>=j2p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && i1>=0 && j2>=i2+1 && N>=i1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQinn111_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,i1,d-1))*(eval_Qiann11(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && d>=0 && N>=j1+1 && i2>=0 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=d+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQinn111(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQinn111(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQinn111(i1,j1,i2,j2) = 'I';
	//Body for tempQinn111
		tempQinn111(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_tempQinn111_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQinn111_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_tempQinn111_3(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiann11(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQinn111_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qiann11(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQinn111_5(N,M,MHL,i1,j1,i2,j2))+(eval_Qiann11(N,M,MHL,i1,j1,i2,j2)):(eval_Qiann11(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQinn111(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQinn111(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQinn111 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQinn111(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQinn121_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((eval_Q10(N,M,MHL,i1,d-1))*(eval_Q21(N,M,MHL,i2,e-1)))*(eval_Qiann12(N,M,MHL,d,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=j1p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && e>=i2+1 && j2>=e && j1>=i1+1 && j2>=i2+1 && M>=e+1 && i1>=0 && N>=i1+1 && e>=0 && N>=d+1 && N>=j1+1 && M>=j2+1 && d>=0 && i2>=0 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	for(c6=i2p+1;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQinn121_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q21(N,M,MHL,i2,e-1))*(eval_Qiann12(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && M>=j2p+1 && j1p>=i1p+1 && N>=i1p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && j2>=i2+1 && N>=i1+1 && i1>=0 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQinn121_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,i1,d-1))*(eval_Qiann12(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && j2p>=i2p+1 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1+1 && j1>=d && j1>=i1+1 && M>=j2+1 && d>=0 && i1>=0 && N>=i1+1 && j2>=i2+1 && N>=d+1 && M>=i2+1 && i2>=0 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQinn121_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q21(N,M,MHL,i2,e-1))*(eval_Qiann12(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=i1p+1 && M>=j2p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && i1>=0 && j2>=i2+1 && N>=i1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQinn121_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,i1,d-1))*(eval_Qiann12(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && d>=0 && N>=j1+1 && i2>=0 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=d+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQinn121(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQinn121(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQinn121(i1,j1,i2,j2) = 'I';
	//Body for tempQinn121
		tempQinn121(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_tempQinn121_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQinn121_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_tempQinn121_3(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiann12(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQinn121_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qiann12(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQinn121_5(N,M,MHL,i1,j1,i2,j2))+(eval_Qiann12(N,M,MHL,i1,j1,i2,j2)):(eval_Qiann12(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQinn121(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQinn121(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQinn121 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQinn121(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQinn201_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((eval_Q20(N,M,MHL,i1,d-1))*(eval_Q01(N,M,MHL,i2,e-1)))*(eval_Qiann20(N,M,MHL,d,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=j1p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && e>=i2+1 && j2>=e && j1>=i1+1 && j2>=i2+1 && M>=e+1 && i1>=0 && N>=i1+1 && e>=0 && N>=d+1 && N>=j1+1 && M>=j2+1 && d>=0 && i2>=0 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	for(c6=i2p+1;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQinn201_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,i2,e-1))*(eval_Qiann20(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && M>=j2p+1 && j1p>=i1p+1 && N>=i1p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && j2>=i2+1 && N>=i1+1 && i1>=0 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQinn201_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q20(N,M,MHL,i1,d-1))*(eval_Qiann20(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && j2p>=i2p+1 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1+1 && j1>=d && j1>=i1+1 && M>=j2+1 && d>=0 && i1>=0 && N>=i1+1 && j2>=i2+1 && N>=d+1 && M>=i2+1 && i2>=0 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQinn201_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,i2,e-1))*(eval_Qiann20(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=i1p+1 && M>=j2p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && i1>=0 && j2>=i2+1 && N>=i1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQinn201_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q20(N,M,MHL,i1,d-1))*(eval_Qiann20(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && d>=0 && N>=j1+1 && i2>=0 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=d+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQinn201(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQinn201(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQinn201(i1,j1,i2,j2) = 'I';
	//Body for tempQinn201
		tempQinn201(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_tempQinn201_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQinn201_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_tempQinn201_3(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiann20(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQinn201_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qiann20(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQinn201_5(N,M,MHL,i1,j1,i2,j2))+(eval_Qiann20(N,M,MHL,i1,j1,i2,j2)):(eval_Qiann20(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQinn201(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQinn201(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQinn201 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQinn201(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQinn211_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((eval_Q20(N,M,MHL,i1,d-1))*(eval_Q11(N,M,MHL,i2,e-1)))*(eval_Qiann21(N,M,MHL,d,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=j1p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && e>=i2+1 && j2>=e && j1>=i1+1 && j2>=i2+1 && M>=e+1 && i1>=0 && N>=i1+1 && e>=0 && N>=d+1 && N>=j1+1 && M>=j2+1 && d>=0 && i2>=0 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	for(c6=i2p+1;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQinn211_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,i2,e-1))*(eval_Qiann21(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && M>=j2p+1 && j1p>=i1p+1 && N>=i1p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && j2>=i2+1 && N>=i1+1 && i1>=0 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQinn211_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q20(N,M,MHL,i1,d-1))*(eval_Qiann21(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && j2p>=i2p+1 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1+1 && j1>=d && j1>=i1+1 && M>=j2+1 && d>=0 && i1>=0 && N>=i1+1 && j2>=i2+1 && N>=d+1 && M>=i2+1 && i2>=0 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQinn211_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,i2,e-1))*(eval_Qiann21(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=i1p+1 && M>=j2p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && i1>=0 && j2>=i2+1 && N>=i1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQinn211_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q20(N,M,MHL,i1,d-1))*(eval_Qiann21(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && d>=0 && N>=j1+1 && i2>=0 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=d+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQinn211(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQinn211(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQinn211(i1,j1,i2,j2) = 'I';
	//Body for tempQinn211
		tempQinn211(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_tempQinn211_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQinn211_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_tempQinn211_3(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiann21(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQinn211_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qiann21(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQinn211_5(N,M,MHL,i1,j1,i2,j2))+(eval_Qiann21(N,M,MHL,i1,j1,i2,j2)):(eval_Qiann21(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQinn211(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQinn211(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQinn211 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQinn211(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQinn221_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((eval_Q20(N,M,MHL,i1,d-1))*(eval_Q21(N,M,MHL,i2,e-1)))*(eval_Qiann22(N,M,MHL,d,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=j1p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && e>=i2+1 && j2>=e && j1>=i1+1 && j2>=i2+1 && M>=e+1 && i1>=0 && N>=i1+1 && e>=0 && N>=d+1 && N>=j1+1 && M>=j2+1 && d>=0 && i2>=0 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	for(c6=i2p+1;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQinn221_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q21(N,M,MHL,i2,e-1))*(eval_Qiann22(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && M>=j2p+1 && j1p>=i1p+1 && N>=i1p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && j2>=i2+1 && N>=i1+1 && i1>=0 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQinn221_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q20(N,M,MHL,i1,d-1))*(eval_Qiann22(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && j2p>=i2p+1 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1+1 && j1>=d && j1>=i1+1 && M>=j2+1 && d>=0 && i1>=0 && N>=i1+1 && j2>=i2+1 && N>=d+1 && M>=i2+1 && i2>=0 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQinn221_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q21(N,M,MHL,i2,e-1))*(eval_Qiann22(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=i1p+1 && M>=j2p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && i1>=0 && j2>=i2+1 && N>=i1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQinn221_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q20(N,M,MHL,i1,d-1))*(eval_Qiann22(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && d>=0 && N>=j1+1 && i2>=0 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=d+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQinn221(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQinn221(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQinn221(i1,j1,i2,j2) = 'I';
	//Body for tempQinn221
		tempQinn221(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_tempQinn221_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQinn221_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_tempQinn221_3(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiann22(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQinn221_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qiann22(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQinn221_5(N,M,MHL,i1,j1,i2,j2))+(eval_Qiann22(N,M,MHL,i1,j1,i2,j2)):(eval_Qiann22(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQinn221(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQinn221(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQinn221 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQinn221(i1,j1,i2,j2);
}
double eval_Qinn01(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qinn01(i1,j1,i2,j2) == 'N' ) {
		_flag_Qinn01(i1,j1,i2,j2) = 'I';
	//Body for Qinn01
		Qinn01(i1,j1,i2,j2) = (eval_tempQinn011(N,M,MHL,i1,j1,i2,j2))+((eval_Q00(N,M,MHL,i1,j1))*(eval_Q11(N,M,MHL,i2,j2)));
		_flag_Qinn01(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qinn01(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qinn01 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qinn01(i1,j1,i2,j2);
}
double eval_Qinn02(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qinn02(i1,j1,i2,j2) == 'N' ) {
		_flag_Qinn02(i1,j1,i2,j2) = 'I';
	//Body for Qinn02
		Qinn02(i1,j1,i2,j2) = (eval_tempQinn021(N,M,MHL,i1,j1,i2,j2))+((eval_Q00(N,M,MHL,i1,j1))*(eval_Q21(N,M,MHL,i2,j2)));
		_flag_Qinn02(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qinn02(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qinn02 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qinn02(i1,j1,i2,j2);
}
double eval_Qinn10(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qinn10(i1,j1,i2,j2) == 'N' ) {
		_flag_Qinn10(i1,j1,i2,j2) = 'I';
	//Body for Qinn10
		Qinn10(i1,j1,i2,j2) = (eval_tempQinn101(N,M,MHL,i1,j1,i2,j2))+((eval_Q10(N,M,MHL,i1,j1))*(eval_Q01(N,M,MHL,i2,j2)));
		_flag_Qinn10(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qinn10(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qinn10 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qinn10(i1,j1,i2,j2);
}
double eval_Qinn11(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qinn11(i1,j1,i2,j2) == 'N' ) {
		_flag_Qinn11(i1,j1,i2,j2) = 'I';
	//Body for Qinn11
		Qinn11(i1,j1,i2,j2) = (eval_tempQinn111(N,M,MHL,i1,j1,i2,j2))+((eval_Q10(N,M,MHL,i1,j1))*(eval_Q11(N,M,MHL,i2,j2)));
		_flag_Qinn11(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qinn11(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qinn11 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qinn11(i1,j1,i2,j2);
}
double eval_Qinn12(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qinn12(i1,j1,i2,j2) == 'N' ) {
		_flag_Qinn12(i1,j1,i2,j2) = 'I';
	//Body for Qinn12
		Qinn12(i1,j1,i2,j2) = (eval_tempQinn121(N,M,MHL,i1,j1,i2,j2))+((eval_Q10(N,M,MHL,i1,j1))*(eval_Q21(N,M,MHL,i2,j2)));
		_flag_Qinn12(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qinn12(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qinn12 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qinn12(i1,j1,i2,j2);
}
double eval_Qinn20(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qinn20(i1,j1,i2,j2) == 'N' ) {
		_flag_Qinn20(i1,j1,i2,j2) = 'I';
	//Body for Qinn20
		Qinn20(i1,j1,i2,j2) = (eval_tempQinn201(N,M,MHL,i1,j1,i2,j2))+((eval_Q20(N,M,MHL,i1,j1))*(eval_Q01(N,M,MHL,i2,j2)));
		_flag_Qinn20(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qinn20(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qinn20 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qinn20(i1,j1,i2,j2);
}
double eval_Qinn21(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qinn21(i1,j1,i2,j2) == 'N' ) {
		_flag_Qinn21(i1,j1,i2,j2) = 'I';
	//Body for Qinn21
		Qinn21(i1,j1,i2,j2) = (eval_tempQinn211(N,M,MHL,i1,j1,i2,j2))+((eval_Q20(N,M,MHL,i1,j1))*(eval_Q11(N,M,MHL,i2,j2)));
		_flag_Qinn21(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qinn21(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qinn21 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qinn21(i1,j1,i2,j2);
}
double eval_Qinn22(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qinn22(i1,j1,i2,j2) == 'N' ) {
		_flag_Qinn22(i1,j1,i2,j2) = 'I';
	//Body for Qinn22
		Qinn22(i1,j1,i2,j2) = (eval_tempQinn221(N,M,MHL,i1,j1,i2,j2))+((eval_Q20(N,M,MHL,i1,j1))*(eval_Q21(N,M,MHL,i2,j2)));
		_flag_Qinn22(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qinn22(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qinn22 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qinn22(i1,j1,i2,j2);
}
double reduce_piRNAb2_Qind01_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((eval_Q00(N,M,MHL,i1,d-1))*(eval_Q11(N,M,MHL,i2,e-1)))*(eval_Qiand01(N,M,MHL,d,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=j1p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && e>=i2+1 && j2>=e && j1>=i1+1 && j2>=i2+1 && M>=e+1 && i1>=0 && N>=i1+1 && e>=0 && N>=d+1 && N>=j1+1 && M>=j2+1 && d>=0 && i2>=0 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	for(c6=i2p+1;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qind01_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,i2,e-1))*(eval_Qiand01(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && M>=j2p+1 && j1p>=i1p+1 && N>=i1p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && j2>=i2+1 && N>=i1+1 && i1>=0 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qind01_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,i1,d-1))*(eval_Qiand01(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && j2p>=i2p+1 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1+1 && j1>=d && j1>=i1+1 && M>=j2+1 && d>=0 && i1>=0 && N>=i1+1 && j2>=i2+1 && N>=d+1 && M>=i2+1 && i2>=0 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qind01_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,i2,e-1))*(eval_Qiand01(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=i1p+1 && M>=j2p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && i1>=0 && j2>=i2+1 && N>=i1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qind01_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,i1,d-1))*(eval_Qiand01(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && d>=0 && N>=j1+1 && i2>=0 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=d+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_Qind01(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qind01(i1,j1,i2,j2) == 'N' ) {
		_flag_Qind01(i1,j1,i2,j2) = 'I';
	//Body for Qind01
		Qind01(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_Qind01_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_Qind01_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_Qind01_3(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiand01(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_Qind01_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qiand01(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_Qind01_5(N,M,MHL,i1,j1,i2,j2))+(eval_Qiand01(N,M,MHL,i1,j1,i2,j2)):(eval_Qiand01(N,M,MHL,i1,j1,i2,j2)))));
		_flag_Qind01(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qind01(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qind01 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qind01(i1,j1,i2,j2);
}
double reduce_piRNAb2_Qind10_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((eval_Q10(N,M,MHL,i1,d-1))*(eval_Q01(N,M,MHL,i2,e-1)))*(eval_Qiand10(N,M,MHL,d,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=j1p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && e>=i2+1 && j2>=e && j1>=i1+1 && j2>=i2+1 && M>=e+1 && i1>=0 && N>=i1+1 && e>=0 && N>=d+1 && N>=j1+1 && M>=j2+1 && d>=0 && i2>=0 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	for(c6=i2p+1;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qind10_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,i2,e-1))*(eval_Qiand10(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && M>=j2p+1 && j1p>=i1p+1 && N>=i1p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && j2>=i2+1 && N>=i1+1 && i1>=0 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qind10_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,i1,d-1))*(eval_Qiand10(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && j2p>=i2p+1 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1+1 && j1>=d && j1>=i1+1 && M>=j2+1 && d>=0 && i1>=0 && N>=i1+1 && j2>=i2+1 && N>=d+1 && M>=i2+1 && i2>=0 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qind10_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,i2,e-1))*(eval_Qiand10(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=i1p+1 && M>=j2p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && i1>=0 && j2>=i2+1 && N>=i1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qind10_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,i1,d-1))*(eval_Qiand10(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && d>=0 && N>=j1+1 && i2>=0 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=d+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_Qind10(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qind10(i1,j1,i2,j2) == 'N' ) {
		_flag_Qind10(i1,j1,i2,j2) = 'I';
	//Body for Qind10
		Qind10(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_Qind10_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_Qind10_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_Qind10_3(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiand10(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_Qind10_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qiand10(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_Qind10_5(N,M,MHL,i1,j1,i2,j2))+(eval_Qiand10(N,M,MHL,i1,j1,i2,j2)):(eval_Qiand10(N,M,MHL,i1,j1,i2,j2)))));
		_flag_Qind10(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qind10(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qind10 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qind10(i1,j1,i2,j2);
}
double reduce_piRNAb2_Qind11_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((eval_Q10(N,M,MHL,i1,d-1))*(eval_Q11(N,M,MHL,i2,e-1)))*(eval_Qiand11(N,M,MHL,d,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=j1p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && e>=i2+1 && j2>=e && j1>=i1+1 && j2>=i2+1 && M>=e+1 && i1>=0 && N>=i1+1 && e>=0 && N>=d+1 && N>=j1+1 && M>=j2+1 && d>=0 && i2>=0 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	for(c6=i2p+1;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qind11_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,i2,e-1))*(eval_Qiand11(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && M>=j2p+1 && j1p>=i1p+1 && N>=i1p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && j2>=i2+1 && N>=i1+1 && i1>=0 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qind11_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,i1,d-1))*(eval_Qiand11(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && j2p>=i2p+1 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1+1 && j1>=d && j1>=i1+1 && M>=j2+1 && d>=0 && i1>=0 && N>=i1+1 && j2>=i2+1 && N>=d+1 && M>=i2+1 && i2>=0 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qind11_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,i2,e-1))*(eval_Qiand11(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=i1p+1 && M>=j2p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && i1>=0 && j2>=i2+1 && N>=i1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qind11_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,i1,d-1))*(eval_Qiand11(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && d>=0 && N>=j1+1 && i2>=0 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=d+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_Qind11(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qind11(i1,j1,i2,j2) == 'N' ) {
		_flag_Qind11(i1,j1,i2,j2) = 'I';
	//Body for Qind11
		Qind11(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_Qind11_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_Qind11_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_Qind11_3(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiand11(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_Qind11_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qiand11(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_Qind11_5(N,M,MHL,i1,j1,i2,j2))+(eval_Qiand11(N,M,MHL,i1,j1,i2,j2)):(eval_Qiand11(N,M,MHL,i1,j1,i2,j2)))));
		_flag_Qind11(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qind11(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qind11 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qind11(i1,j1,i2,j2);
}
double reduce_piRNAb2_Qind20_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((eval_Q20(N,M,MHL,i1,d-1))*(eval_Q01(N,M,MHL,i2,e-1)))*(eval_Qiand20(N,M,MHL,d,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=j1p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && e>=i2+1 && j2>=e && j1>=i1+1 && j2>=i2+1 && M>=e+1 && i1>=0 && N>=i1+1 && e>=0 && N>=d+1 && N>=j1+1 && M>=j2+1 && d>=0 && i2>=0 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	for(c6=i2p+1;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qind20_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,i2,e-1))*(eval_Qiand20(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && M>=j2p+1 && j1p>=i1p+1 && N>=i1p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && j2>=i2+1 && N>=i1+1 && i1>=0 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qind20_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q20(N,M,MHL,i1,d-1))*(eval_Qiand20(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && j2p>=i2p+1 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1+1 && j1>=d && j1>=i1+1 && M>=j2+1 && d>=0 && i1>=0 && N>=i1+1 && j2>=i2+1 && N>=d+1 && M>=i2+1 && i2>=0 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qind20_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,i2,e-1))*(eval_Qiand20(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=i1p+1 && M>=j2p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && i1>=0 && j2>=i2+1 && N>=i1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qind20_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q20(N,M,MHL,i1,d-1))*(eval_Qiand20(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && d>=0 && N>=j1+1 && i2>=0 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=d+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_Qind20(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qind20(i1,j1,i2,j2) == 'N' ) {
		_flag_Qind20(i1,j1,i2,j2) = 'I';
	//Body for Qind20
		Qind20(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_Qind20_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_Qind20_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_Qind20_3(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiand20(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_Qind20_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qiand20(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_Qind20_5(N,M,MHL,i1,j1,i2,j2))+(eval_Qiand20(N,M,MHL,i1,j1,i2,j2)):(eval_Qiand20(N,M,MHL,i1,j1,i2,j2)))));
		_flag_Qind20(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qind20(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qind20 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qind20(i1,j1,i2,j2);
}
double reduce_piRNAb2_Qind21_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((eval_Q20(N,M,MHL,i1,d-1))*(eval_Q11(N,M,MHL,i2,e-1)))*(eval_Qiand21(N,M,MHL,d,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=j1p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && e>=i2+1 && j2>=e && j1>=i1+1 && j2>=i2+1 && M>=e+1 && i1>=0 && N>=i1+1 && e>=0 && N>=d+1 && N>=j1+1 && M>=j2+1 && d>=0 && i2>=0 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	for(c6=i2p+1;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qind21_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,i2,e-1))*(eval_Qiand21(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && M>=j2p+1 && j1p>=i1p+1 && N>=i1p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && j2>=i2+1 && N>=i1+1 && i1>=0 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qind21_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q20(N,M,MHL,i1,d-1))*(eval_Qiand21(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && j2p>=i2p+1 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1+1 && j1>=d && j1>=i1+1 && M>=j2+1 && d>=0 && i1>=0 && N>=i1+1 && j2>=i2+1 && N>=d+1 && M>=i2+1 && i2>=0 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qind21_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,i2,e-1))*(eval_Qiand21(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=i1p+1 && M>=j2p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && i1>=0 && j2>=i2+1 && N>=i1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qind21_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q20(N,M,MHL,i1,d-1))*(eval_Qiand21(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && d>=0 && N>=j1+1 && i2>=0 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=d+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_Qind21(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qind21(i1,j1,i2,j2) == 'N' ) {
		_flag_Qind21(i1,j1,i2,j2) = 'I';
	//Body for Qind21
		Qind21(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_Qind21_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_Qind21_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_Qind21_3(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiand21(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_Qind21_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qiand21(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_Qind21_5(N,M,MHL,i1,j1,i2,j2))+(eval_Qiand21(N,M,MHL,i1,j1,i2,j2)):(eval_Qiand21(N,M,MHL,i1,j1,i2,j2)))));
		_flag_Qind21(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qind21(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qind21 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qind21(i1,j1,i2,j2);
}
double reduce_piRNAb2_Qidn01_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((eval_Q00(N,M,MHL,i1,d-1))*(eval_Q11(N,M,MHL,i2,e-1)))*(eval_Qiadn01(N,M,MHL,d,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=j1p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && e>=i2+1 && j2>=e && j1>=i1+1 && j2>=i2+1 && M>=e+1 && i1>=0 && N>=i1+1 && e>=0 && N>=d+1 && N>=j1+1 && M>=j2+1 && d>=0 && i2>=0 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	for(c6=i2p+1;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qidn01_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,i2,e-1))*(eval_Qiadn01(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && M>=j2p+1 && j1p>=i1p+1 && N>=i1p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && j2>=i2+1 && N>=i1+1 && i1>=0 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qidn01_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,i1,d-1))*(eval_Qiadn01(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && j2p>=i2p+1 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1+1 && j1>=d && j1>=i1+1 && M>=j2+1 && d>=0 && i1>=0 && N>=i1+1 && j2>=i2+1 && N>=d+1 && M>=i2+1 && i2>=0 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qidn01_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,i2,e-1))*(eval_Qiadn01(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=i1p+1 && M>=j2p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && i1>=0 && j2>=i2+1 && N>=i1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qidn01_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,i1,d-1))*(eval_Qiadn01(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && d>=0 && N>=j1+1 && i2>=0 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=d+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_Qidn01(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qidn01(i1,j1,i2,j2) == 'N' ) {
		_flag_Qidn01(i1,j1,i2,j2) = 'I';
	//Body for Qidn01
		Qidn01(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_Qidn01_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_Qidn01_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_Qidn01_3(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiadn01(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_Qidn01_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qiadn01(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_Qidn01_5(N,M,MHL,i1,j1,i2,j2))+(eval_Qiadn01(N,M,MHL,i1,j1,i2,j2)):(eval_Qiadn01(N,M,MHL,i1,j1,i2,j2)))));
		_flag_Qidn01(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qidn01(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qidn01 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qidn01(i1,j1,i2,j2);
}
double reduce_piRNAb2_Qidn02_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((eval_Q00(N,M,MHL,i1,d-1))*(eval_Q21(N,M,MHL,i2,e-1)))*(eval_Qiadn02(N,M,MHL,d,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=j1p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && e>=i2+1 && j2>=e && j1>=i1+1 && j2>=i2+1 && M>=e+1 && i1>=0 && N>=i1+1 && e>=0 && N>=d+1 && N>=j1+1 && M>=j2+1 && d>=0 && i2>=0 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	for(c6=i2p+1;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qidn02_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q21(N,M,MHL,i2,e-1))*(eval_Qiadn02(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && M>=j2p+1 && j1p>=i1p+1 && N>=i1p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && j2>=i2+1 && N>=i1+1 && i1>=0 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qidn02_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,i1,d-1))*(eval_Qiadn02(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && j2p>=i2p+1 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1+1 && j1>=d && j1>=i1+1 && M>=j2+1 && d>=0 && i1>=0 && N>=i1+1 && j2>=i2+1 && N>=d+1 && M>=i2+1 && i2>=0 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qidn02_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q21(N,M,MHL,i2,e-1))*(eval_Qiadn02(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=i1p+1 && M>=j2p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && i1>=0 && j2>=i2+1 && N>=i1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qidn02_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,i1,d-1))*(eval_Qiadn02(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && d>=0 && N>=j1+1 && i2>=0 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=d+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_Qidn02(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qidn02(i1,j1,i2,j2) == 'N' ) {
		_flag_Qidn02(i1,j1,i2,j2) = 'I';
	//Body for Qidn02
		Qidn02(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_Qidn02_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_Qidn02_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_Qidn02_3(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiadn02(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_Qidn02_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qiadn02(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_Qidn02_5(N,M,MHL,i1,j1,i2,j2))+(eval_Qiadn02(N,M,MHL,i1,j1,i2,j2)):(eval_Qiadn02(N,M,MHL,i1,j1,i2,j2)))));
		_flag_Qidn02(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qidn02(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qidn02 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qidn02(i1,j1,i2,j2);
}
double reduce_piRNAb2_Qidn10_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((eval_Q10(N,M,MHL,i1,d-1))*(eval_Q01(N,M,MHL,i2,e-1)))*(eval_Qiadn10(N,M,MHL,d,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=j1p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && e>=i2+1 && j2>=e && j1>=i1+1 && j2>=i2+1 && M>=e+1 && i1>=0 && N>=i1+1 && e>=0 && N>=d+1 && N>=j1+1 && M>=j2+1 && d>=0 && i2>=0 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	for(c6=i2p+1;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qidn10_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,i2,e-1))*(eval_Qiadn10(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && M>=j2p+1 && j1p>=i1p+1 && N>=i1p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && j2>=i2+1 && N>=i1+1 && i1>=0 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qidn10_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,i1,d-1))*(eval_Qiadn10(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && j2p>=i2p+1 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1+1 && j1>=d && j1>=i1+1 && M>=j2+1 && d>=0 && i1>=0 && N>=i1+1 && j2>=i2+1 && N>=d+1 && M>=i2+1 && i2>=0 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qidn10_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,i2,e-1))*(eval_Qiadn10(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=i1p+1 && M>=j2p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && i1>=0 && j2>=i2+1 && N>=i1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qidn10_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,i1,d-1))*(eval_Qiadn10(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && d>=0 && N>=j1+1 && i2>=0 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=d+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_Qidn10(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qidn10(i1,j1,i2,j2) == 'N' ) {
		_flag_Qidn10(i1,j1,i2,j2) = 'I';
	//Body for Qidn10
		Qidn10(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_Qidn10_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_Qidn10_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_Qidn10_3(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiadn10(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_Qidn10_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qiadn10(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_Qidn10_5(N,M,MHL,i1,j1,i2,j2))+(eval_Qiadn10(N,M,MHL,i1,j1,i2,j2)):(eval_Qiadn10(N,M,MHL,i1,j1,i2,j2)))));
		_flag_Qidn10(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qidn10(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qidn10 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qidn10(i1,j1,i2,j2);
}
double reduce_piRNAb2_Qidn11_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((eval_Q10(N,M,MHL,i1,d-1))*(eval_Q11(N,M,MHL,i2,e-1)))*(eval_Qiadn11(N,M,MHL,d,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=j1p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && e>=i2+1 && j2>=e && j1>=i1+1 && j2>=i2+1 && M>=e+1 && i1>=0 && N>=i1+1 && e>=0 && N>=d+1 && N>=j1+1 && M>=j2+1 && d>=0 && i2>=0 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	for(c6=i2p+1;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qidn11_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,i2,e-1))*(eval_Qiadn11(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && M>=j2p+1 && j1p>=i1p+1 && N>=i1p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && j2>=i2+1 && N>=i1+1 && i1>=0 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qidn11_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,i1,d-1))*(eval_Qiadn11(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && j2p>=i2p+1 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1+1 && j1>=d && j1>=i1+1 && M>=j2+1 && d>=0 && i1>=0 && N>=i1+1 && j2>=i2+1 && N>=d+1 && M>=i2+1 && i2>=0 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qidn11_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,i2,e-1))*(eval_Qiadn11(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=i1p+1 && M>=j2p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && i1>=0 && j2>=i2+1 && N>=i1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qidn11_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,i1,d-1))*(eval_Qiadn11(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && d>=0 && N>=j1+1 && i2>=0 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=d+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_Qidn11(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qidn11(i1,j1,i2,j2) == 'N' ) {
		_flag_Qidn11(i1,j1,i2,j2) = 'I';
	//Body for Qidn11
		Qidn11(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_Qidn11_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_Qidn11_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_Qidn11_3(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiadn11(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_Qidn11_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qiadn11(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_Qidn11_5(N,M,MHL,i1,j1,i2,j2))+(eval_Qiadn11(N,M,MHL,i1,j1,i2,j2)):(eval_Qiadn11(N,M,MHL,i1,j1,i2,j2)))));
		_flag_Qidn11(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qidn11(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qidn11 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qidn11(i1,j1,i2,j2);
}
double reduce_piRNAb2_Qidn12_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((eval_Q10(N,M,MHL,i1,d-1))*(eval_Q21(N,M,MHL,i2,e-1)))*(eval_Qiadn12(N,M,MHL,d,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=j1p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && e>=i2+1 && j2>=e && j1>=i1+1 && j2>=i2+1 && M>=e+1 && i1>=0 && N>=i1+1 && e>=0 && N>=d+1 && N>=j1+1 && M>=j2+1 && d>=0 && i2>=0 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	for(c6=i2p+1;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qidn12_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q21(N,M,MHL,i2,e-1))*(eval_Qiadn12(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && M>=j2p+1 && j1p>=i1p+1 && N>=i1p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && j2>=i2+1 && N>=i1+1 && i1>=0 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qidn12_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,i1,d-1))*(eval_Qiadn12(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && j2p>=i2p+1 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1+1 && j1>=d && j1>=i1+1 && M>=j2+1 && d>=0 && i1>=0 && N>=i1+1 && j2>=i2+1 && N>=d+1 && M>=i2+1 && i2>=0 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qidn12_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q21(N,M,MHL,i2,e-1))*(eval_Qiadn12(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=i1p+1 && M>=j2p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && i1>=0 && j2>=i2+1 && N>=i1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_Qidn12_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,i1,d-1))*(eval_Qiadn12(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && d>=0 && N>=j1+1 && i2>=0 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=d+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_Qidn12(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qidn12(i1,j1,i2,j2) == 'N' ) {
		_flag_Qidn12(i1,j1,i2,j2) = 'I';
	//Body for Qidn12
		Qidn12(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_Qidn12_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_Qidn12_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_Qidn12_3(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiadn12(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_Qidn12_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qiadn12(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_Qidn12_5(N,M,MHL,i1,j1,i2,j2))+(eval_Qiadn12(N,M,MHL,i1,j1,i2,j2)):(eval_Qiadn12(N,M,MHL,i1,j1,i2,j2)))));
		_flag_Qidn12(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qidn12(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qidn12 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qidn12(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQidd011_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((eval_Q00(N,M,MHL,i1,d-1))*(eval_Q11(N,M,MHL,i2,e-1)))*(eval_Qiadd01(N,M,MHL,d,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=j1p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && e>=i2+1 && j2>=e && j1>=i1+1 && j2>=i2+1 && M>=e+1 && i1>=0 && N>=i1+1 && e>=0 && N>=d+1 && N>=j1+1 && M>=j2+1 && d>=0 && i2>=0 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	for(c6=i2p+1;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQidd011_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,i2,e-1))*(eval_Qiadd01(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && M>=j2p+1 && j1p>=i1p+1 && N>=i1p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && j2>=i2+1 && N>=i1+1 && i1>=0 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQidd011_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,i1,d-1))*(eval_Qiadd01(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && j2p>=i2p+1 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1+1 && j1>=d && j1>=i1+1 && M>=j2+1 && d>=0 && i1>=0 && N>=i1+1 && j2>=i2+1 && N>=d+1 && M>=i2+1 && i2>=0 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQidd011_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,i2,e-1))*(eval_Qiadd01(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=i1p+1 && M>=j2p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && i1>=0 && j2>=i2+1 && N>=i1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQidd011_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,i1,d-1))*(eval_Qiadd01(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && d>=0 && N>=j1+1 && i2>=0 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=d+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQidd011(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQidd011(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQidd011(i1,j1,i2,j2) = 'I';
	//Body for tempQidd011
		tempQidd011(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_tempQidd011_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQidd011_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_tempQidd011_3(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiadd01(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQidd011_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qiadd01(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQidd011_5(N,M,MHL,i1,j1,i2,j2))+(eval_Qiadd01(N,M,MHL,i1,j1,i2,j2)):(eval_Qiadd01(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQidd011(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQidd011(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQidd011 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQidd011(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQidd101_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((eval_Q10(N,M,MHL,i1,d-1))*(eval_Q01(N,M,MHL,i2,e-1)))*(eval_Qiadd10(N,M,MHL,d,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=j1p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && e>=i2+1 && j2>=e && j1>=i1+1 && j2>=i2+1 && M>=e+1 && i1>=0 && N>=i1+1 && e>=0 && N>=d+1 && N>=j1+1 && M>=j2+1 && d>=0 && i2>=0 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	for(c6=i2p+1;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQidd101_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,i2,e-1))*(eval_Qiadd10(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && M>=j2p+1 && j1p>=i1p+1 && N>=i1p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && j2>=i2+1 && N>=i1+1 && i1>=0 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQidd101_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,i1,d-1))*(eval_Qiadd10(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && j2p>=i2p+1 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1+1 && j1>=d && j1>=i1+1 && M>=j2+1 && d>=0 && i1>=0 && N>=i1+1 && j2>=i2+1 && N>=d+1 && M>=i2+1 && i2>=0 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQidd101_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,i2,e-1))*(eval_Qiadd10(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=i1p+1 && M>=j2p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && i1>=0 && j2>=i2+1 && N>=i1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQidd101_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,i1,d-1))*(eval_Qiadd10(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && d>=0 && N>=j1+1 && i2>=0 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=d+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQidd101(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQidd101(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQidd101(i1,j1,i2,j2) = 'I';
	//Body for tempQidd101
		tempQidd101(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_tempQidd101_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQidd101_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_tempQidd101_3(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiadd10(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQidd101_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qiadd10(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQidd101_5(N,M,MHL,i1,j1,i2,j2))+(eval_Qiadd10(N,M,MHL,i1,j1,i2,j2)):(eval_Qiadd10(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQidd101(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQidd101(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQidd101 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQidd101(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQidd111_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((eval_Q10(N,M,MHL,i1,d-1))*(eval_Q11(N,M,MHL,i2,e-1)))*(eval_Qiadd11(N,M,MHL,d,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=j1p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && e>=i2+1 && j2>=e && j1>=i1+1 && j2>=i2+1 && M>=e+1 && i1>=0 && N>=i1+1 && e>=0 && N>=d+1 && N>=j1+1 && M>=j2+1 && d>=0 && i2>=0 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	for(c6=i2p+1;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQidd111_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,i2,e-1))*(eval_Qiadd11(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && M>=j2p+1 && j1p>=i1p+1 && N>=i1p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && j2>=i2+1 && N>=i1+1 && i1>=0 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQidd111_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,i1,d-1))*(eval_Qiadd11(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && j2p>=i2p+1 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1+1 && j1>=d && j1>=i1+1 && M>=j2+1 && d>=0 && i1>=0 && N>=i1+1 && j2>=i2+1 && N>=d+1 && M>=i2+1 && i2>=0 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQidd111_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,i2,e-1))*(eval_Qiadd11(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=i1p+1 && M>=j2p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && i1>=0 && j2>=i2+1 && N>=i1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQidd111_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,i1,d-1))*(eval_Qiadd11(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && d>=0 && N>=j1+1 && i2>=0 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=d+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQidd111(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQidd111(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQidd111(i1,j1,i2,j2) = 'I';
	//Body for tempQidd111
		tempQidd111(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_tempQidd111_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQidd111_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_tempQidd111_3(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiadd11(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQidd111_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qiadd11(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQidd111_5(N,M,MHL,i1,j1,i2,j2))+(eval_Qiadd11(N,M,MHL,i1,j1,i2,j2)):(eval_Qiadd11(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQidd111(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQidd111(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQidd111 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQidd111(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQidd012_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((eval_Q00(N,M,MHL,i1,d-1))*(eval_Q11(N,M,MHL,i2,e-1)))*(eval_Qib01(N,M,MHL,d,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=j1p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && e>=i2+1 && j2>=e && j1>=i1+1 && j2>=i2+1 && M>=e+1 && i1>=0 && N>=i1+1 && e>=0 && N>=d+1 && N>=j1+1 && M>=j2+1 && d>=0 && i2>=0 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	for(c6=i2p+1;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQidd012_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,i2,e-1))*(eval_Qib01(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && M>=j2p+1 && j1p>=i1p+1 && N>=i1p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && j2>=i2+1 && N>=i1+1 && i1>=0 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQidd012_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,i1,d-1))*(eval_Qib01(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && j2p>=i2p+1 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1+1 && j1>=d && j1>=i1+1 && M>=j2+1 && d>=0 && i1>=0 && N>=i1+1 && j2>=i2+1 && N>=d+1 && M>=i2+1 && i2>=0 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQidd012_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,i2,e-1))*(eval_Qib01(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=i1p+1 && M>=j2p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && i1>=0 && j2>=i2+1 && N>=i1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQidd012_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,i1,d-1))*(eval_Qib01(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && d>=0 && N>=j1+1 && i2>=0 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=d+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQidd012(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQidd012(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQidd012(i1,j1,i2,j2) = 'I';
	//Body for tempQidd012
		tempQidd012(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_tempQidd012_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQidd012_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_tempQidd012_3(N,M,MHL,i1,j1,i2,j2)))+(eval_Qib01(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQidd012_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qib01(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQidd012_5(N,M,MHL,i1,j1,i2,j2))+(eval_Qib01(N,M,MHL,i1,j1,i2,j2)):(eval_Qib01(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQidd012(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQidd012(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQidd012 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQidd012(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQidd102_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((eval_Q10(N,M,MHL,i1,d-1))*(eval_Q01(N,M,MHL,i2,e-1)))*(eval_Qib10(N,M,MHL,d,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=j1p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && e>=i2+1 && j2>=e && j1>=i1+1 && j2>=i2+1 && M>=e+1 && i1>=0 && N>=i1+1 && e>=0 && N>=d+1 && N>=j1+1 && M>=j2+1 && d>=0 && i2>=0 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	for(c6=i2p+1;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQidd102_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,i2,e-1))*(eval_Qib10(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && M>=j2p+1 && j1p>=i1p+1 && N>=i1p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && j2>=i2+1 && N>=i1+1 && i1>=0 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQidd102_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,i1,d-1))*(eval_Qib10(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && j2p>=i2p+1 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1+1 && j1>=d && j1>=i1+1 && M>=j2+1 && d>=0 && i1>=0 && N>=i1+1 && j2>=i2+1 && N>=d+1 && M>=i2+1 && i2>=0 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQidd102_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,i2,e-1))*(eval_Qib10(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=i1p+1 && M>=j2p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && i1>=0 && j2>=i2+1 && N>=i1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQidd102_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,i1,d-1))*(eval_Qib10(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && d>=0 && N>=j1+1 && i2>=0 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=d+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQidd102(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQidd102(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQidd102(i1,j1,i2,j2) = 'I';
	//Body for tempQidd102
		tempQidd102(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_tempQidd102_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQidd102_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_tempQidd102_3(N,M,MHL,i1,j1,i2,j2)))+(eval_Qib10(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQidd102_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qib10(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQidd102_5(N,M,MHL,i1,j1,i2,j2))+(eval_Qib10(N,M,MHL,i1,j1,i2,j2)):(eval_Qib10(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQidd102(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQidd102(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQidd102 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQidd102(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQidd112_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((eval_Q10(N,M,MHL,i1,d-1))*(eval_Q11(N,M,MHL,i2,e-1)))*(eval_Qib11(N,M,MHL,d,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=j1p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && e>=i2+1 && j2>=e && j1>=i1+1 && j2>=i2+1 && M>=e+1 && i1>=0 && N>=i1+1 && e>=0 && N>=d+1 && N>=j1+1 && M>=j2+1 && d>=0 && i2>=0 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	for(c6=i2p+1;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQidd112_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,i2,e-1))*(eval_Qib11(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && M>=j2p+1 && j1p>=i1p+1 && N>=i1p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && j2>=i2+1 && N>=i1+1 && i1>=0 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQidd112_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,i1,d-1))*(eval_Qib11(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && j2p>=i2p+1 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1+1 && j1>=d && j1>=i1+1 && M>=j2+1 && d>=0 && i1>=0 && N>=i1+1 && j2>=i2+1 && N>=d+1 && M>=i2+1 && i2>=0 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQidd112_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,i2,e-1))*(eval_Qib11(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=i1p+1 && M>=j2p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && i1>=0 && j2>=i2+1 && N>=i1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQidd112_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,i1,d-1))*(eval_Qib11(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && d>=0 && N>=j1+1 && i2>=0 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=d+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQidd112(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQidd112(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQidd112(i1,j1,i2,j2) = 'I';
	//Body for tempQidd112
		tempQidd112(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_tempQidd112_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQidd112_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_tempQidd112_3(N,M,MHL,i1,j1,i2,j2)))+(eval_Qib11(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQidd112_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qib11(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQidd112_5(N,M,MHL,i1,j1,i2,j2))+(eval_Qib11(N,M,MHL,i1,j1,i2,j2)):(eval_Qib11(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQidd112(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQidd112(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQidd112 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQidd112(i1,j1,i2,j2);
}
double eval_Qidd01(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qidd01(i1,j1,i2,j2) == 'N' ) {
		_flag_Qidd01(i1,j1,i2,j2) = 'I';
	//Body for Qidd01
		Qidd01(i1,j1,i2,j2) = (eval_tempQidd011(N,M,MHL,i1,j1,i2,j2))+(eval_tempQidd012(N,M,MHL,i1,j1,i2,j2));
		_flag_Qidd01(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qidd01(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qidd01 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qidd01(i1,j1,i2,j2);
}
double eval_Qidd10(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qidd10(i1,j1,i2,j2) == 'N' ) {
		_flag_Qidd10(i1,j1,i2,j2) = 'I';
	//Body for Qidd10
		Qidd10(i1,j1,i2,j2) = (eval_tempQidd101(N,M,MHL,i1,j1,i2,j2))+(eval_tempQidd102(N,M,MHL,i1,j1,i2,j2));
		_flag_Qidd10(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qidd10(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qidd10 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qidd10(i1,j1,i2,j2);
}
double eval_Qidd11(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qidd11(i1,j1,i2,j2) == 'N' ) {
		_flag_Qidd11(i1,j1,i2,j2) = 'I';
	//Body for Qidd11
		Qidd11(i1,j1,i2,j2) = (eval_tempQidd111(N,M,MHL,i1,j1,i2,j2))+(eval_tempQidd112(N,M,MHL,i1,j1,i2,j2));
		_flag_Qidd11(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qidd11(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qidd11 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qidd11(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann014_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,e+1,j2))*(eval_Qixm01(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann014_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,d+1,j1))*(eval_Qixm01(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann014_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,e+1,j2))*(eval_Qixm01(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann014_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,d+1,j1))*(eval_Qixm01(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann014(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann014(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann014(i1,j1,i2,j2) = 'I';
	//Body for tempQiann014
		tempQiann014(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiann014_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiann014_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qixm01(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiann014_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qixm01(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiann014_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qixm01(N,M,MHL,i1,j1,i2,j2)):(eval_Qixm01(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiann014(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann014(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann014 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann014(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann015_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,e+1,j2))*(eval_Qixm10(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann015_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,d+1,j1))*(eval_Qixm10(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann015_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,e+1,j2))*(eval_Qixm10(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann015_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,d+1,j1))*(eval_Qixm10(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann015(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann015(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann015(i1,j1,i2,j2) = 'I';
	//Body for tempQiann015
		tempQiann015(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiann015_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiann015_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qixm10(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiann015_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qixm10(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiann015_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qixm10(N,M,MHL,i1,j1,i2,j2)):(eval_Qixm10(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiann015(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann015(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann015 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann015(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann016_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,e+1,j2))*(eval_Qiy(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann016_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,d+1,j1))*(eval_Qiy(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann016_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,e+1,j2))*(eval_Qiy(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann016_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,d+1,j1))*(eval_Qiy(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann016(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann016(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann016(i1,j1,i2,j2) = 'I';
	//Body for tempQiann016
		tempQiann016(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiann016_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiann016_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiy(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiann016_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qiy(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiann016_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qiy(N,M,MHL,i1,j1,i2,j2)):(eval_Qiy(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiann016(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann016(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann016 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann016(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann024_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q21(N,M,MHL,e+1,j2))*(eval_Qixm02(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann024_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,d+1,j1))*(eval_Qixm02(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann024_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q21(N,M,MHL,e+1,j2))*(eval_Qixm02(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann024_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,d+1,j1))*(eval_Qixm02(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann024(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann024(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann024(i1,j1,i2,j2) = 'I';
	//Body for tempQiann024
		tempQiann024(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiann024_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiann024_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qixm02(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiann024_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qixm02(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiann024_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qixm02(N,M,MHL,i1,j1,i2,j2)):(eval_Qixm02(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiann024(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann024(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann024 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann024(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann025_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q21(N,M,MHL,e+1,j2))*(eval_Qixm10(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann025_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,d+1,j1))*(eval_Qixm10(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann025_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q21(N,M,MHL,e+1,j2))*(eval_Qixm10(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann025_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,d+1,j1))*(eval_Qixm10(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann025(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann025(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann025(i1,j1,i2,j2) = 'I';
	//Body for tempQiann025
		tempQiann025(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiann025_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiann025_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qixm10(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiann025_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qixm10(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiann025_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qixm10(N,M,MHL,i1,j1,i2,j2)):(eval_Qixm10(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiann025(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann025(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann025 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann025(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann026_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q21(N,M,MHL,e+1,j2))*(eval_Qiy(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann026_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,d+1,j1))*(eval_Qiy(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann026_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q21(N,M,MHL,e+1,j2))*(eval_Qiy(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann026_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,d+1,j1))*(eval_Qiy(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann026(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann026(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann026(i1,j1,i2,j2) = 'I';
	//Body for tempQiann026
		tempQiann026(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiann026_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiann026_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiy(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiann026_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qiy(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiann026_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qiy(N,M,MHL,i1,j1,i2,j2)):(eval_Qiy(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiann026(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann026(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann026 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann026(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann104_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,e+1,j2))*(eval_Qixm00(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann104_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,d+1,j1))*(eval_Qixm00(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann104_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,e+1,j2))*(eval_Qixm00(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann104_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,d+1,j1))*(eval_Qixm00(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann104(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann104(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann104(i1,j1,i2,j2) = 'I';
	//Body for tempQiann104
		tempQiann104(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiann104_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiann104_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qixm00(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiann104_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qixm00(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiann104_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qixm00(N,M,MHL,i1,j1,i2,j2)):(eval_Qixm00(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiann104(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann104(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann104 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann104(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann105_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,e+1,j2))*(eval_Qixm11(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann105_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,d+1,j1))*(eval_Qixm11(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann105_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,e+1,j2))*(eval_Qixm11(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann105_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,d+1,j1))*(eval_Qixm11(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann105(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann105(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann105(i1,j1,i2,j2) = 'I';
	//Body for tempQiann105
		tempQiann105(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiann105_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiann105_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qixm11(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiann105_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qixm11(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiann105_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qixm11(N,M,MHL,i1,j1,i2,j2)):(eval_Qixm11(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiann105(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann105(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann105 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann105(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann106_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,e+1,j2))*(eval_Qiy(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann106_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,d+1,j1))*(eval_Qiy(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann106_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,e+1,j2))*(eval_Qiy(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann106_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,d+1,j1))*(eval_Qiy(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann106(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann106(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann106(i1,j1,i2,j2) = 'I';
	//Body for tempQiann106
		tempQiann106(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiann106_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiann106_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiy(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiann106_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qiy(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiann106_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qiy(N,M,MHL,i1,j1,i2,j2)):(eval_Qiy(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiann106(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann106(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann106 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann106(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann114_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,e+1,j2))*(eval_Qixm01(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann114_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,d+1,j1))*(eval_Qixm01(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann114_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,e+1,j2))*(eval_Qixm01(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann114_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,d+1,j1))*(eval_Qixm01(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann114(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann114(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann114(i1,j1,i2,j2) = 'I';
	//Body for tempQiann114
		tempQiann114(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiann114_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiann114_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qixm01(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiann114_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qixm01(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiann114_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qixm01(N,M,MHL,i1,j1,i2,j2)):(eval_Qixm01(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiann114(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann114(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann114 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann114(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann115_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,e+1,j2))*(eval_Qixm11(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann115_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,d+1,j1))*(eval_Qixm11(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann115_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,e+1,j2))*(eval_Qixm11(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann115_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,d+1,j1))*(eval_Qixm11(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann115(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann115(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann115(i1,j1,i2,j2) = 'I';
	//Body for tempQiann115
		tempQiann115(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiann115_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiann115_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qixm11(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiann115_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qixm11(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiann115_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qixm11(N,M,MHL,i1,j1,i2,j2)):(eval_Qixm11(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiann115(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann115(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann115 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann115(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann116_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,e+1,j2))*(eval_Qiy(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann116_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,d+1,j1))*(eval_Qiy(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann116_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,e+1,j2))*(eval_Qiy(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann116_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,d+1,j1))*(eval_Qiy(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann116(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann116(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann116(i1,j1,i2,j2) = 'I';
	//Body for tempQiann116
		tempQiann116(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiann116_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiann116_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiy(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiann116_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qiy(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiann116_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qiy(N,M,MHL,i1,j1,i2,j2)):(eval_Qiy(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiann116(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann116(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann116 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann116(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann124_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q21(N,M,MHL,e+1,j2))*(eval_Qixm02(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann124_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,d+1,j1))*(eval_Qixm02(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann124_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q21(N,M,MHL,e+1,j2))*(eval_Qixm02(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann124_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,d+1,j1))*(eval_Qixm02(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann124(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann124(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann124(i1,j1,i2,j2) = 'I';
	//Body for tempQiann124
		tempQiann124(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiann124_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiann124_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qixm02(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiann124_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qixm02(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiann124_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qixm02(N,M,MHL,i1,j1,i2,j2)):(eval_Qixm02(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiann124(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann124(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann124 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann124(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann125_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q21(N,M,MHL,e+1,j2))*(eval_Qixm11(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann125_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,d+1,j1))*(eval_Qixm11(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann125_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q21(N,M,MHL,e+1,j2))*(eval_Qixm11(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann125_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,d+1,j1))*(eval_Qixm11(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann125(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann125(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann125(i1,j1,i2,j2) = 'I';
	//Body for tempQiann125
		tempQiann125(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiann125_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiann125_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qixm11(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiann125_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qixm11(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiann125_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qixm11(N,M,MHL,i1,j1,i2,j2)):(eval_Qixm11(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiann125(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann125(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann125 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann125(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann126_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q21(N,M,MHL,e+1,j2))*(eval_Qiy(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann126_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,d+1,j1))*(eval_Qiy(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann126_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q21(N,M,MHL,e+1,j2))*(eval_Qiy(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann126_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,d+1,j1))*(eval_Qiy(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann126(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann126(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann126(i1,j1,i2,j2) = 'I';
	//Body for tempQiann126
		tempQiann126(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiann126_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiann126_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiy(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiann126_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qiy(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiann126_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qiy(N,M,MHL,i1,j1,i2,j2)):(eval_Qiy(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiann126(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann126(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann126 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann126(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann204_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,e+1,j2))*(eval_Qixm00(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann204_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q20(N,M,MHL,d+1,j1))*(eval_Qixm00(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann204_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,e+1,j2))*(eval_Qixm00(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann204_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q20(N,M,MHL,d+1,j1))*(eval_Qixm00(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann204(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann204(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann204(i1,j1,i2,j2) = 'I';
	//Body for tempQiann204
		tempQiann204(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiann204_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiann204_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qixm00(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiann204_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qixm00(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiann204_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qixm00(N,M,MHL,i1,j1,i2,j2)):(eval_Qixm00(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiann204(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann204(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann204 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann204(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann205_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,e+1,j2))*(eval_Qixm12(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann205_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q20(N,M,MHL,d+1,j1))*(eval_Qixm12(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann205_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,e+1,j2))*(eval_Qixm12(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann205_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q20(N,M,MHL,d+1,j1))*(eval_Qixm12(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann205(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann205(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann205(i1,j1,i2,j2) = 'I';
	//Body for tempQiann205
		tempQiann205(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiann205_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiann205_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qixm12(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiann205_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qixm12(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiann205_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qixm12(N,M,MHL,i1,j1,i2,j2)):(eval_Qixm12(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiann205(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann205(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann205 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann205(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann206_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,e+1,j2))*(eval_Qiy(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann206_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q20(N,M,MHL,d+1,j1))*(eval_Qiy(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann206_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,e+1,j2))*(eval_Qiy(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann206_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q20(N,M,MHL,d+1,j1))*(eval_Qiy(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann206(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann206(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann206(i1,j1,i2,j2) = 'I';
	//Body for tempQiann206
		tempQiann206(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiann206_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiann206_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiy(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiann206_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qiy(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiann206_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qiy(N,M,MHL,i1,j1,i2,j2)):(eval_Qiy(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiann206(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann206(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann206 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann206(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann214_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,e+1,j2))*(eval_Qixm01(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann214_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q20(N,M,MHL,d+1,j1))*(eval_Qixm01(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann214_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,e+1,j2))*(eval_Qixm01(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann214_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q20(N,M,MHL,d+1,j1))*(eval_Qixm01(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann214(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann214(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann214(i1,j1,i2,j2) = 'I';
	//Body for tempQiann214
		tempQiann214(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiann214_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiann214_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qixm01(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiann214_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qixm01(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiann214_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qixm01(N,M,MHL,i1,j1,i2,j2)):(eval_Qixm01(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiann214(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann214(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann214 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann214(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann215_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,e+1,j2))*(eval_Qixm12(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann215_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q20(N,M,MHL,d+1,j1))*(eval_Qixm12(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann215_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,e+1,j2))*(eval_Qixm12(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann215_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q20(N,M,MHL,d+1,j1))*(eval_Qixm12(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann215(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann215(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann215(i1,j1,i2,j2) = 'I';
	//Body for tempQiann215
		tempQiann215(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiann215_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiann215_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qixm12(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiann215_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qixm12(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiann215_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qixm12(N,M,MHL,i1,j1,i2,j2)):(eval_Qixm12(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiann215(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann215(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann215 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann215(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann216_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,e+1,j2))*(eval_Qiy(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann216_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q20(N,M,MHL,d+1,j1))*(eval_Qiy(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann216_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,e+1,j2))*(eval_Qiy(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann216_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q20(N,M,MHL,d+1,j1))*(eval_Qiy(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann216(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann216(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann216(i1,j1,i2,j2) = 'I';
	//Body for tempQiann216
		tempQiann216(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiann216_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiann216_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiy(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiann216_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qiy(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiann216_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qiy(N,M,MHL,i1,j1,i2,j2)):(eval_Qiy(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiann216(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann216(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann216 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann216(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann224_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q21(N,M,MHL,e+1,j2))*(eval_Qixm02(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann224_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q20(N,M,MHL,d+1,j1))*(eval_Qixm02(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann224_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q21(N,M,MHL,e+1,j2))*(eval_Qixm02(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann224_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q20(N,M,MHL,d+1,j1))*(eval_Qixm02(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann224(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann224(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann224(i1,j1,i2,j2) = 'I';
	//Body for tempQiann224
		tempQiann224(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiann224_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiann224_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qixm02(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiann224_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qixm02(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiann224_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qixm02(N,M,MHL,i1,j1,i2,j2)):(eval_Qixm02(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiann224(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann224(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann224 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann224(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann225_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q21(N,M,MHL,e+1,j2))*(eval_Qixm12(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann225_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q20(N,M,MHL,d+1,j1))*(eval_Qixm12(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann225_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q21(N,M,MHL,e+1,j2))*(eval_Qixm12(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann225_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q20(N,M,MHL,d+1,j1))*(eval_Qixm12(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann225(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann225(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann225(i1,j1,i2,j2) = 'I';
	//Body for tempQiann225
		tempQiann225(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiann225_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiann225_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qixm12(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiann225_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qixm12(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiann225_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qixm12(N,M,MHL,i1,j1,i2,j2)):(eval_Qixm12(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiann225(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann225(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann225 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann225(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann226_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q21(N,M,MHL,e+1,j2))*(eval_Qiy(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann226_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q20(N,M,MHL,d+1,j1))*(eval_Qiy(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann226_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q21(N,M,MHL,e+1,j2))*(eval_Qiy(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiann226_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q20(N,M,MHL,d+1,j1))*(eval_Qiy(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann226(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann226(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann226(i1,j1,i2,j2) = 'I';
	//Body for tempQiann226
		tempQiann226(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiann226_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiann226_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiy(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiann226_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qiy(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiann226_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qiy(N,M,MHL,i1,j1,i2,j2)):(eval_Qiy(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiann226(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann226(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann226 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann226(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann011_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixm01(N,M,MHL,i1,d,i2,e))*(eval_Qinn01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann011(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann011(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann011(i1,j1,i2,j2) = 'I';
	//Body for tempQiann011
		tempQiann011(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiann011_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiann011(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann011(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann011 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann011(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann012_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixm10(N,M,MHL,i1,d,i2,e))*(eval_Qinn01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann012(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann012(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann012(i1,j1,i2,j2) = 'I';
	//Body for tempQiann012
		tempQiann012(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiann012_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiann012(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann012(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann012 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann012(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann013_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiy(N,M,MHL,i1,d,i2,e))*(eval_Qinn01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann013(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann013(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann013(i1,j1,i2,j2) = 'I';
	//Body for tempQiann013
		tempQiann013(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiann013_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiann013(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann013(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann013 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann013(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann021_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixm02(N,M,MHL,i1,d,i2,e))*(eval_Qinn02(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann021(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann021(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann021(i1,j1,i2,j2) = 'I';
	//Body for tempQiann021
		tempQiann021(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiann021_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiann021(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann021(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann021 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann021(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann022_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixm10(N,M,MHL,i1,d,i2,e))*(eval_Qinn02(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann022(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann022(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann022(i1,j1,i2,j2) = 'I';
	//Body for tempQiann022
		tempQiann022(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiann022_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiann022(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann022(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann022 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann022(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann023_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiy(N,M,MHL,i1,d,i2,e))*(eval_Qinn02(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann023(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann023(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann023(i1,j1,i2,j2) = 'I';
	//Body for tempQiann023
		tempQiann023(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiann023_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiann023(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann023(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann023 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann023(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann101_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixm00(N,M,MHL,i1,d,i2,e))*(eval_Qinn10(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann101(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann101(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann101(i1,j1,i2,j2) = 'I';
	//Body for tempQiann101
		tempQiann101(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiann101_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiann101(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann101(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann101 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann101(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann102_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixm11(N,M,MHL,i1,d,i2,e))*(eval_Qinn10(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann102(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann102(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann102(i1,j1,i2,j2) = 'I';
	//Body for tempQiann102
		tempQiann102(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiann102_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiann102(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann102(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann102 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann102(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann103_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiy(N,M,MHL,i1,d,i2,e))*(eval_Qinn10(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann103(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann103(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann103(i1,j1,i2,j2) = 'I';
	//Body for tempQiann103
		tempQiann103(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiann103_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiann103(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann103(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann103 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann103(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann111_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixm01(N,M,MHL,i1,d,i2,e))*(eval_Qinn11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann111(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann111(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann111(i1,j1,i2,j2) = 'I';
	//Body for tempQiann111
		tempQiann111(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiann111_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiann111(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann111(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann111 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann111(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann112_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixm11(N,M,MHL,i1,d,i2,e))*(eval_Qinn11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann112(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann112(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann112(i1,j1,i2,j2) = 'I';
	//Body for tempQiann112
		tempQiann112(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiann112_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiann112(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann112(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann112 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann112(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann113_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiy(N,M,MHL,i1,d,i2,e))*(eval_Qinn11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann113(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann113(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann113(i1,j1,i2,j2) = 'I';
	//Body for tempQiann113
		tempQiann113(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiann113_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiann113(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann113(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann113 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann113(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann121_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixm02(N,M,MHL,i1,d,i2,e))*(eval_Qinn12(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann121(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann121(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann121(i1,j1,i2,j2) = 'I';
	//Body for tempQiann121
		tempQiann121(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiann121_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiann121(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann121(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann121 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann121(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann122_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixm11(N,M,MHL,i1,d,i2,e))*(eval_Qinn12(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann122(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann122(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann122(i1,j1,i2,j2) = 'I';
	//Body for tempQiann122
		tempQiann122(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiann122_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiann122(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann122(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann122 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann122(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann123_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiy(N,M,MHL,i1,d,i2,e))*(eval_Qinn12(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann123(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann123(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann123(i1,j1,i2,j2) = 'I';
	//Body for tempQiann123
		tempQiann123(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiann123_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiann123(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann123(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann123 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann123(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann201_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixm00(N,M,MHL,i1,d,i2,e))*(eval_Qinn20(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann201(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann201(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann201(i1,j1,i2,j2) = 'I';
	//Body for tempQiann201
		tempQiann201(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiann201_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiann201(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann201(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann201 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann201(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann202_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixm12(N,M,MHL,i1,d,i2,e))*(eval_Qinn20(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann202(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann202(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann202(i1,j1,i2,j2) = 'I';
	//Body for tempQiann202
		tempQiann202(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiann202_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiann202(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann202(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann202 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann202(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann203_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiy(N,M,MHL,i1,d,i2,e))*(eval_Qinn20(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann203(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann203(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann203(i1,j1,i2,j2) = 'I';
	//Body for tempQiann203
		tempQiann203(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiann203_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiann203(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann203(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann203 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann203(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann211_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixm01(N,M,MHL,i1,d,i2,e))*(eval_Qinn21(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann211(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann211(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann211(i1,j1,i2,j2) = 'I';
	//Body for tempQiann211
		tempQiann211(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiann211_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiann211(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann211(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann211 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann211(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann212_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixm12(N,M,MHL,i1,d,i2,e))*(eval_Qinn21(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann212(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann212(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann212(i1,j1,i2,j2) = 'I';
	//Body for tempQiann212
		tempQiann212(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiann212_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiann212(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann212(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann212 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann212(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann213_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiy(N,M,MHL,i1,d,i2,e))*(eval_Qinn21(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann213(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann213(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann213(i1,j1,i2,j2) = 'I';
	//Body for tempQiann213
		tempQiann213(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiann213_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiann213(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann213(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann213 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann213(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann221_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixm02(N,M,MHL,i1,d,i2,e))*(eval_Qinn22(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann221(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann221(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann221(i1,j1,i2,j2) = 'I';
	//Body for tempQiann221
		tempQiann221(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiann221_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiann221(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann221(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann221 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann221(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann222_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixm12(N,M,MHL,i1,d,i2,e))*(eval_Qinn22(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann222(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann222(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann222(i1,j1,i2,j2) = 'I';
	//Body for tempQiann222
		tempQiann222(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiann222_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiann222(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann222(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann222 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann222(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiann223_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiy(N,M,MHL,i1,d,i2,e))*(eval_Qinn22(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiann223(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiann223(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiann223(i1,j1,i2,j2) = 'I';
	//Body for tempQiann223
		tempQiann223(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiann223_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiann223(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiann223(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiann223 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiann223(i1,j1,i2,j2);
}
double eval_Qiann01(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qiann01(i1,j1,i2,j2) == 'N' ) {
		_flag_Qiann01(i1,j1,i2,j2) = 'I';
	//Body for Qiann01
		Qiann01(i1,j1,i2,j2) = (((((eval_tempQiann011(N,M,MHL,i1,j1,i2,j2))+((eval_tempQiann012(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+((eval_tempQiann013(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+(eval_tempQiann014(N,M,MHL,i1,j1,i2,j2)))+((eval_tempQiann015(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+((eval_tempQiann016(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)));
		_flag_Qiann01(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qiann01(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qiann01 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qiann01(i1,j1,i2,j2);
}
double eval_Qiann02(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qiann02(i1,j1,i2,j2) == 'N' ) {
		_flag_Qiann02(i1,j1,i2,j2) = 'I';
	//Body for Qiann02
		Qiann02(i1,j1,i2,j2) = (((((eval_tempQiann021(N,M,MHL,i1,j1,i2,j2))+((eval_tempQiann022(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1))))+((eval_tempQiann023(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1))))+(eval_tempQiann024(N,M,MHL,i1,j1,i2,j2)))+((eval_tempQiann025(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1))))+((eval_tempQiann026(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)));
		_flag_Qiann02(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qiann02(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qiann02 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qiann02(i1,j1,i2,j2);
}
double eval_Qiann10(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qiann10(i1,j1,i2,j2) == 'N' ) {
		_flag_Qiann10(i1,j1,i2,j2) = 'I';
	//Body for Qiann10
		Qiann10(i1,j1,i2,j2) = ((((((eval_tempQiann101(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)))+(eval_tempQiann102(N,M,MHL,i1,j1,i2,j2)))+((eval_tempQiann103(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+((eval_tempQiann104(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+(eval_tempQiann105(N,M,MHL,i1,j1,i2,j2)))+((eval_tempQiann106(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)));
		_flag_Qiann10(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qiann10(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qiann10 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qiann10(i1,j1,i2,j2);
}
double eval_Qiann11(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qiann11(i1,j1,i2,j2) == 'N' ) {
		_flag_Qiann11(i1,j1,i2,j2) = 'I';
	//Body for Qiann11
		Qiann11(i1,j1,i2,j2) = ((((((eval_tempQiann111(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)))+((eval_tempQiann112(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+(((eval_tempQiann113(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)))*(ekissing(0,0,1))))+((eval_tempQiann114(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+((eval_tempQiann115(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+(((eval_tempQiann116(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)))*(ekissing(0,0,1)));
		_flag_Qiann11(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qiann11(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qiann11 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qiann11(i1,j1,i2,j2);
}
double eval_Qiann12(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qiann12(i1,j1,i2,j2) == 'N' ) {
		_flag_Qiann12(i1,j1,i2,j2) = 'I';
	//Body for Qiann12
		Qiann12(i1,j1,i2,j2) = ((((((eval_tempQiann121(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)))+((eval_tempQiann122(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1))))+(((eval_tempQiann123(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)))*(emulti(0,0,1))))+((eval_tempQiann124(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+((eval_tempQiann125(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1))))+(((eval_tempQiann126(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)))*(emulti(0,0,1)));
		_flag_Qiann12(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qiann12(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qiann12 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qiann12(i1,j1,i2,j2);
}
double eval_Qiann20(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qiann20(i1,j1,i2,j2) == 'N' ) {
		_flag_Qiann20(i1,j1,i2,j2) = 'I';
	//Body for Qiann20
		Qiann20(i1,j1,i2,j2) = ((((((eval_tempQiann201(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)))+(eval_tempQiann202(N,M,MHL,i1,j1,i2,j2)))+((eval_tempQiann203(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1))))+((eval_tempQiann204(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1))))+(eval_tempQiann205(N,M,MHL,i1,j1,i2,j2)))+((eval_tempQiann206(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)));
		_flag_Qiann20(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qiann20(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qiann20 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qiann20(i1,j1,i2,j2);
}
double eval_Qiann21(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qiann21(i1,j1,i2,j2) == 'N' ) {
		_flag_Qiann21(i1,j1,i2,j2) = 'I';
	//Body for Qiann21
		Qiann21(i1,j1,i2,j2) = ((((((eval_tempQiann211(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)))+((eval_tempQiann212(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+(((eval_tempQiann213(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)))*(ekissing(0,0,1))))+((eval_tempQiann214(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1))))+((eval_tempQiann215(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+(((eval_tempQiann216(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)))*(ekissing(0,0,1)));
		_flag_Qiann21(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qiann21(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qiann21 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qiann21(i1,j1,i2,j2);
}
double eval_Qiann22(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qiann22(i1,j1,i2,j2) == 'N' ) {
		_flag_Qiann22(i1,j1,i2,j2) = 'I';
	//Body for Qiann22
		Qiann22(i1,j1,i2,j2) = ((((((eval_tempQiann221(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)))+((eval_tempQiann222(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1))))+(((eval_tempQiann223(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)))*(emulti(0,0,1))))+((eval_tempQiann224(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1))))+((eval_tempQiann225(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1))))+(((eval_tempQiann226(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)))*(emulti(0,0,1)));
		_flag_Qiann22(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qiann22(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qiann22 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qiann22(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadn015_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,e+1,j2))*(eval_Qixk10(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiadn015_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,d+1,j1))*(eval_Qixk10(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiadn015_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,e+1,j2))*(eval_Qixk10(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiadn015_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,d+1,j1))*(eval_Qixk10(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadn015(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadn015(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadn015(i1,j1,i2,j2) = 'I';
	//Body for tempQiadn015
		tempQiadn015(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiadn015_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiadn015_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qixk10(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiadn015_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qixk10(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiadn015_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qixk10(N,M,MHL,i1,j1,i2,j2)):(eval_Qixk10(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiadn015(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadn015(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadn015 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadn015(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadn025_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q21(N,M,MHL,e+1,j2))*(eval_Qixk10(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiadn025_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,d+1,j1))*(eval_Qixk10(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiadn025_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q21(N,M,MHL,e+1,j2))*(eval_Qixk10(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiadn025_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,d+1,j1))*(eval_Qixk10(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadn025(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadn025(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadn025(i1,j1,i2,j2) = 'I';
	//Body for tempQiadn025
		tempQiadn025(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiadn025_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiadn025_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qixk10(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiadn025_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qixk10(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiadn025_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qixk10(N,M,MHL,i1,j1,i2,j2)):(eval_Qixk10(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiadn025(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadn025(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadn025 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadn025(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadn105_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,e+1,j2))*(eval_Qixk11(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiadn105_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,d+1,j1))*(eval_Qixk11(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiadn105_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,e+1,j2))*(eval_Qixk11(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiadn105_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,d+1,j1))*(eval_Qixk11(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadn105(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadn105(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadn105(i1,j1,i2,j2) = 'I';
	//Body for tempQiadn105
		tempQiadn105(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiadn105_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiadn105_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qixk11(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiadn105_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qixk11(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiadn105_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qixk11(N,M,MHL,i1,j1,i2,j2)):(eval_Qixk11(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiadn105(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadn105(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadn105 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadn105(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadn115_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,e+1,j2))*(eval_Qixk11(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiadn115_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,d+1,j1))*(eval_Qixk11(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiadn115_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,e+1,j2))*(eval_Qixk11(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiadn115_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,d+1,j1))*(eval_Qixk11(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadn115(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadn115(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadn115(i1,j1,i2,j2) = 'I';
	//Body for tempQiadn115
		tempQiadn115(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiadn115_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiadn115_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qixk11(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiadn115_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qixk11(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiadn115_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qixk11(N,M,MHL,i1,j1,i2,j2)):(eval_Qixk11(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiadn115(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadn115(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadn115 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadn115(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadn125_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q21(N,M,MHL,e+1,j2))*(eval_Qixk11(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiadn125_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,d+1,j1))*(eval_Qixk11(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiadn125_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q21(N,M,MHL,e+1,j2))*(eval_Qixk11(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiadn125_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,d+1,j1))*(eval_Qixk11(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadn125(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadn125(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadn125(i1,j1,i2,j2) = 'I';
	//Body for tempQiadn125
		tempQiadn125(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiadn125_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiadn125_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qixk11(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiadn125_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qixk11(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiadn125_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qixk11(N,M,MHL,i1,j1,i2,j2)):(eval_Qixk11(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiadn125(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadn125(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadn125 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadn125(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiand015_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,e+1,j2))*(eval_Qixk01(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiand015_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,d+1,j1))*(eval_Qixk01(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiand015_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,e+1,j2))*(eval_Qixk01(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiand015_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,d+1,j1))*(eval_Qixk01(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiand015(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiand015(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiand015(i1,j1,i2,j2) = 'I';
	//Body for tempQiand015
		tempQiand015(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiand015_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiand015_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qixk01(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiand015_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qixk01(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiand015_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qixk01(N,M,MHL,i1,j1,i2,j2)):(eval_Qixk01(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiand015(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiand015(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiand015 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiand015(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiand105_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,e+1,j2))*(eval_Qixk00(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiand105_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,d+1,j1))*(eval_Qixk00(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiand105_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,e+1,j2))*(eval_Qixk00(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiand105_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,d+1,j1))*(eval_Qixk00(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiand105(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiand105(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiand105(i1,j1,i2,j2) = 'I';
	//Body for tempQiand105
		tempQiand105(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiand105_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiand105_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qixk00(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiand105_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qixk00(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiand105_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qixk00(N,M,MHL,i1,j1,i2,j2)):(eval_Qixk00(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiand105(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiand105(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiand105 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiand105(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiand115_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,e+1,j2))*(eval_Qixk01(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiand115_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,d+1,j1))*(eval_Qixk01(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiand115_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,e+1,j2))*(eval_Qixk01(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiand115_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,d+1,j1))*(eval_Qixk01(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiand115(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiand115(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiand115(i1,j1,i2,j2) = 'I';
	//Body for tempQiand115
		tempQiand115(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiand115_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiand115_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qixk01(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiand115_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qixk01(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiand115_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qixk01(N,M,MHL,i1,j1,i2,j2)):(eval_Qixk01(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiand115(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiand115(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiand115 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiand115(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiand205_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,e+1,j2))*(eval_Qixk00(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiand205_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q20(N,M,MHL,d+1,j1))*(eval_Qixk00(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiand205_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,e+1,j2))*(eval_Qixk00(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiand205_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q20(N,M,MHL,d+1,j1))*(eval_Qixk00(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiand205(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiand205(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiand205(i1,j1,i2,j2) = 'I';
	//Body for tempQiand205
		tempQiand205(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiand205_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiand205_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qixk00(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiand205_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qixk00(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiand205_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qixk00(N,M,MHL,i1,j1,i2,j2)):(eval_Qixk00(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiand205(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiand205(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiand205 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiand205(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiand215_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,e+1,j2))*(eval_Qixk01(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=j1p+1 && j1p>=i1p+1 && i1p>=0 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && e>=i2 && j2>=e+1 && j2>=i2+1 && N>=i1+1 && i1>=0 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiand215_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q20(N,M,MHL,d+1,j1))*(eval_Qixk01(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|M>=j2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && j2p>=i2p+1 && N>=j1p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1 && j1>=d+1 && j1>=i1+1 && N>=i1+1 && i1>=0 && d>=-1 && N>=d+2 && j2>=i2+1 && N>=j1+1 && M>=i2+1 && i2>=0 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiand215_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,e+1,j2))*(eval_Qixk01(N,M,MHL,i1,j1,i2,e)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && N>=i1p+1 && M>=i2p+1 && i1p>=0 && M>=j2p+1 && e>=i2 && j2>=e+1 && i1>=0 && j2>=i2+1 && N>=i1+1 && e>=-1 && M>=e+2 && M>=i2+1 && M>=j2+1 && i2>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p;c5 <= j2p-1;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQiand215_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q20(N,M,MHL,d+1,j1))*(eval_Qixk01(N,M,MHL,i1,d,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && M>=i2p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && i1p>=0 && N>=i1p+1 && N>=j1p+1 && d>=i1 && j1>=d+1 && i1>=0 && N>=i1+1 && i2>=0 && d>=-1 && N>=d+2 && j1>=i1+1 && N>=j1+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiand215(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiand215(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiand215(i1,j1,i2,j2) = 'I';
	//Body for tempQiand215
		tempQiand215(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?((reduce_piRNAb2_tempQiand215_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQiand215_2(N,M,MHL,i1,j1,i2,j2)))+(eval_Qixk01(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQiand215_3(N,M,MHL,i1,j1,i2,j2))+(eval_Qixk01(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQiand215_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qixk01(N,M,MHL,i1,j1,i2,j2)):(eval_Qixk01(N,M,MHL,i1,j1,i2,j2)))));
		_flag_tempQiand215(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiand215(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiand215 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiand215(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiand011_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qix01(N,M,MHL,i1,d,i2,e))*(eval_Qind01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiand011(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiand011(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiand011(i1,j1,i2,j2) = 'I';
	//Body for tempQiand011
		tempQiand011(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiand011_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiand011(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiand011(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiand011 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiand011(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiand012_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixk01(N,M,MHL,i1,d,i2,e))*(eval_Qinn01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiand012(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiand012(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiand012(i1,j1,i2,j2) = 'I';
	//Body for tempQiand012
		tempQiand012(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiand012_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiand012(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiand012(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiand012 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiand012(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiand013_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixm10(N,M,MHL,i1,d,i2,e))*(eval_Qind01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiand013(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiand013(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiand013(i1,j1,i2,j2) = 'I';
	//Body for tempQiand013
		tempQiand013(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiand013_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiand013(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiand013(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiand013 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiand013(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiand014_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiy(N,M,MHL,i1,d,i2,e))*(eval_Qind01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiand014(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiand014(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiand014(i1,j1,i2,j2) = 'I';
	//Body for tempQiand014
		tempQiand014(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiand014_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiand014(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiand014(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiand014 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiand014(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiand101_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qix00(N,M,MHL,i1,d,i2,e))*(eval_Qind10(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiand101(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiand101(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiand101(i1,j1,i2,j2) = 'I';
	//Body for tempQiand101
		tempQiand101(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiand101_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiand101(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiand101(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiand101 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiand101(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiand102_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixk00(N,M,MHL,i1,d,i2,e))*(eval_Qinn10(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiand102(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiand102(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiand102(i1,j1,i2,j2) = 'I';
	//Body for tempQiand102
		tempQiand102(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiand102_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiand102(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiand102(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiand102 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiand102(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiand103_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixm11(N,M,MHL,i1,d,i2,e))*(eval_Qind10(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiand103(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiand103(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiand103(i1,j1,i2,j2) = 'I';
	//Body for tempQiand103
		tempQiand103(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiand103_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiand103(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiand103(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiand103 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiand103(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiand104_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiy(N,M,MHL,i1,d,i2,e))*(eval_Qind10(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiand104(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiand104(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiand104(i1,j1,i2,j2) = 'I';
	//Body for tempQiand104
		tempQiand104(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiand104_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiand104(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiand104(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiand104 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiand104(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiand111_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qix01(N,M,MHL,i1,d,i2,e))*(eval_Qind11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiand111(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiand111(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiand111(i1,j1,i2,j2) = 'I';
	//Body for tempQiand111
		tempQiand111(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiand111_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiand111(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiand111(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiand111 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiand111(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiand112_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixk01(N,M,MHL,i1,d,i2,e))*(eval_Qinn11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiand112(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiand112(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiand112(i1,j1,i2,j2) = 'I';
	//Body for tempQiand112
		tempQiand112(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiand112_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiand112(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiand112(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiand112 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiand112(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiand113_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixm11(N,M,MHL,i1,d,i2,e))*(eval_Qind11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiand113(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiand113(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiand113(i1,j1,i2,j2) = 'I';
	//Body for tempQiand113
		tempQiand113(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiand113_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiand113(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiand113(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiand113 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiand113(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiand114_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiy(N,M,MHL,i1,d,i2,e))*(eval_Qind11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiand114(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiand114(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiand114(i1,j1,i2,j2) = 'I';
	//Body for tempQiand114
		tempQiand114(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiand114_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiand114(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiand114(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiand114 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiand114(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiand201_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qix00(N,M,MHL,i1,d,i2,e))*(eval_Qind20(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiand201(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiand201(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiand201(i1,j1,i2,j2) = 'I';
	//Body for tempQiand201
		tempQiand201(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiand201_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiand201(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiand201(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiand201 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiand201(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiand202_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixk00(N,M,MHL,i1,d,i2,e))*(eval_Qinn20(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiand202(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiand202(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiand202(i1,j1,i2,j2) = 'I';
	//Body for tempQiand202
		tempQiand202(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiand202_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiand202(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiand202(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiand202 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiand202(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiand203_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixm12(N,M,MHL,i1,d,i2,e))*(eval_Qind20(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiand203(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiand203(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiand203(i1,j1,i2,j2) = 'I';
	//Body for tempQiand203
		tempQiand203(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiand203_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiand203(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiand203(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiand203 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiand203(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiand204_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiy(N,M,MHL,i1,d,i2,e))*(eval_Qind20(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiand204(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiand204(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiand204(i1,j1,i2,j2) = 'I';
	//Body for tempQiand204
		tempQiand204(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiand204_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiand204(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiand204(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiand204 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiand204(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiand211_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qix01(N,M,MHL,i1,d,i2,e))*(eval_Qind21(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiand211(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiand211(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiand211(i1,j1,i2,j2) = 'I';
	//Body for tempQiand211
		tempQiand211(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiand211_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiand211(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiand211(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiand211 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiand211(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiand212_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixk01(N,M,MHL,i1,d,i2,e))*(eval_Qinn21(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiand212(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiand212(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiand212(i1,j1,i2,j2) = 'I';
	//Body for tempQiand212
		tempQiand212(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiand212_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiand212(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiand212(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiand212 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiand212(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiand213_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixm12(N,M,MHL,i1,d,i2,e))*(eval_Qind21(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiand213(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiand213(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiand213(i1,j1,i2,j2) = 'I';
	//Body for tempQiand213
		tempQiand213(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiand213_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiand213(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiand213(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiand213 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiand213(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiand214_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiy(N,M,MHL,i1,d,i2,e))*(eval_Qind21(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiand214(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiand214(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiand214(i1,j1,i2,j2) = 'I';
	//Body for tempQiand214
		tempQiand214(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiand214_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiand214(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiand214(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiand214 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiand214(i1,j1,i2,j2);
}
double eval_Qiand01(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qiand01(i1,j1,i2,j2) == 'N' ) {
		_flag_Qiand01(i1,j1,i2,j2) = 'I';
	//Body for Qiand01
		Qiand01(i1,j1,i2,j2) = ((((eval_tempQiand011(N,M,MHL,i1,j1,i2,j2))+(eval_tempQiand012(N,M,MHL,i1,j1,i2,j2)))+((eval_tempQiand013(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+((eval_tempQiand014(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+(eval_tempQiand015(N,M,MHL,i1,j1,i2,j2));
		_flag_Qiand01(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qiand01(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qiand01 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qiand01(i1,j1,i2,j2);
}
double eval_Qiand10(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qiand10(i1,j1,i2,j2) == 'N' ) {
		_flag_Qiand10(i1,j1,i2,j2) = 'I';
	//Body for Qiand10
		Qiand10(i1,j1,i2,j2) = (((((eval_tempQiand101(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)))+((eval_tempQiand102(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+(eval_tempQiand103(N,M,MHL,i1,j1,i2,j2)))+((eval_tempQiand104(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+((eval_tempQiand105(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)));
		_flag_Qiand10(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qiand10(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qiand10 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qiand10(i1,j1,i2,j2);
}
double eval_Qiand11(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qiand11(i1,j1,i2,j2) == 'N' ) {
		_flag_Qiand11(i1,j1,i2,j2) = 'I';
	//Body for Qiand11
		Qiand11(i1,j1,i2,j2) = (((((eval_tempQiand111(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)))+((eval_tempQiand112(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+((eval_tempQiand113(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+(((eval_tempQiand114(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)))*(ekissing(0,0,1))))+((eval_tempQiand115(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)));
		_flag_Qiand11(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qiand11(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qiand11 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qiand11(i1,j1,i2,j2);
}
double eval_Qiand20(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qiand20(i1,j1,i2,j2) == 'N' ) {
		_flag_Qiand20(i1,j1,i2,j2) = 'I';
	//Body for Qiand20
		Qiand20(i1,j1,i2,j2) = (((((eval_tempQiand201(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)))+((eval_tempQiand202(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1))))+(eval_tempQiand203(N,M,MHL,i1,j1,i2,j2)))+((eval_tempQiand204(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1))))+((eval_tempQiand205(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)));
		_flag_Qiand20(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qiand20(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qiand20 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qiand20(i1,j1,i2,j2);
}
double eval_Qiand21(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qiand21(i1,j1,i2,j2) == 'N' ) {
		_flag_Qiand21(i1,j1,i2,j2) = 'I';
	//Body for Qiand21
		Qiand21(i1,j1,i2,j2) = (((((eval_tempQiand211(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)))+((eval_tempQiand212(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1))))+((eval_tempQiand213(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+(((eval_tempQiand214(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)))*(ekissing(0,0,1))))+((eval_tempQiand215(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)));
		_flag_Qiand21(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qiand21(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qiand21 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qiand21(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadn011_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixm01(N,M,MHL,i1,d,i2,e))*(eval_Qidn01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadn011(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadn011(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadn011(i1,j1,i2,j2) = 'I';
	//Body for tempQiadn011
		tempQiadn011(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadn011_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadn011(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadn011(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadn011 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadn011(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadn012_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qix10(N,M,MHL,i1,d,i2,e))*(eval_Qidn01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadn012(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadn012(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadn012(i1,j1,i2,j2) = 'I';
	//Body for tempQiadn012
		tempQiadn012(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadn012_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadn012(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadn012(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadn012 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadn012(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadn013_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixk10(N,M,MHL,i1,d,i2,e))*(eval_Qinn01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadn013(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadn013(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadn013(i1,j1,i2,j2) = 'I';
	//Body for tempQiadn013
		tempQiadn013(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadn013_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadn013(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadn013(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadn013 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadn013(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadn014_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiy(N,M,MHL,i1,d,i2,e))*(eval_Qidn01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadn014(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadn014(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadn014(i1,j1,i2,j2) = 'I';
	//Body for tempQiadn014
		tempQiadn014(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadn014_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadn014(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadn014(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadn014 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadn014(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadn021_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixm02(N,M,MHL,i1,d,i2,e))*(eval_Qidn02(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadn021(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadn021(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadn021(i1,j1,i2,j2) = 'I';
	//Body for tempQiadn021
		tempQiadn021(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadn021_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadn021(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadn021(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadn021 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadn021(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadn022_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qix10(N,M,MHL,i1,d,i2,e))*(eval_Qidn02(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadn022(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadn022(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadn022(i1,j1,i2,j2) = 'I';
	//Body for tempQiadn022
		tempQiadn022(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadn022_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadn022(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadn022(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadn022 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadn022(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadn023_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixk10(N,M,MHL,i1,d,i2,e))*(eval_Qinn02(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadn023(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadn023(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadn023(i1,j1,i2,j2) = 'I';
	//Body for tempQiadn023
		tempQiadn023(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadn023_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadn023(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadn023(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadn023 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadn023(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadn024_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiy(N,M,MHL,i1,d,i2,e))*(eval_Qidn02(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadn024(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadn024(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadn024(i1,j1,i2,j2) = 'I';
	//Body for tempQiadn024
		tempQiadn024(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadn024_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadn024(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadn024(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadn024 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadn024(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadn101_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixm00(N,M,MHL,i1,d,i2,e))*(eval_Qidn10(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadn101(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadn101(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadn101(i1,j1,i2,j2) = 'I';
	//Body for tempQiadn101
		tempQiadn101(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadn101_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadn101(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadn101(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadn101 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadn101(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadn102_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qix11(N,M,MHL,i1,d,i2,e))*(eval_Qidn10(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadn102(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadn102(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadn102(i1,j1,i2,j2) = 'I';
	//Body for tempQiadn102
		tempQiadn102(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadn102_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadn102(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadn102(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadn102 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadn102(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadn103_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixk11(N,M,MHL,i1,d,i2,e))*(eval_Qinn10(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadn103(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadn103(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadn103(i1,j1,i2,j2) = 'I';
	//Body for tempQiadn103
		tempQiadn103(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadn103_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadn103(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadn103(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadn103 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadn103(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadn104_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiy(N,M,MHL,i1,d,i2,e))*(eval_Qidn10(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadn104(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadn104(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadn104(i1,j1,i2,j2) = 'I';
	//Body for tempQiadn104
		tempQiadn104(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadn104_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadn104(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadn104(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadn104 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadn104(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadn111_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixm01(N,M,MHL,i1,d,i2,e))*(eval_Qidn11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadn111(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadn111(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadn111(i1,j1,i2,j2) = 'I';
	//Body for tempQiadn111
		tempQiadn111(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadn111_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadn111(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadn111(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadn111 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadn111(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadn112_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qix11(N,M,MHL,i1,d,i2,e))*(eval_Qidn11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadn112(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadn112(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadn112(i1,j1,i2,j2) = 'I';
	//Body for tempQiadn112
		tempQiadn112(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadn112_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadn112(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadn112(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadn112 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadn112(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadn113_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixk11(N,M,MHL,i1,d,i2,e))*(eval_Qinn11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadn113(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadn113(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadn113(i1,j1,i2,j2) = 'I';
	//Body for tempQiadn113
		tempQiadn113(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadn113_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadn113(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadn113(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadn113 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadn113(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadn114_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiy(N,M,MHL,i1,d,i2,e))*(eval_Qidn11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadn114(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadn114(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadn114(i1,j1,i2,j2) = 'I';
	//Body for tempQiadn114
		tempQiadn114(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadn114_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadn114(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadn114(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadn114 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadn114(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadn121_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixm02(N,M,MHL,i1,d,i2,e))*(eval_Qidn12(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadn121(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadn121(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadn121(i1,j1,i2,j2) = 'I';
	//Body for tempQiadn121
		tempQiadn121(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadn121_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadn121(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadn121(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadn121 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadn121(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadn122_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qix11(N,M,MHL,i1,d,i2,e))*(eval_Qidn12(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadn122(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadn122(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadn122(i1,j1,i2,j2) = 'I';
	//Body for tempQiadn122
		tempQiadn122(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadn122_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadn122(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadn122(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadn122 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadn122(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadn123_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixk11(N,M,MHL,i1,d,i2,e))*(eval_Qinn12(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadn123(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadn123(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadn123(i1,j1,i2,j2) = 'I';
	//Body for tempQiadn123
		tempQiadn123(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadn123_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadn123(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadn123(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadn123 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadn123(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadn124_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiy(N,M,MHL,i1,d,i2,e))*(eval_Qidn12(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadn124(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadn124(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadn124(i1,j1,i2,j2) = 'I';
	//Body for tempQiadn124
		tempQiadn124(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadn124_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadn124(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadn124(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadn124 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadn124(i1,j1,i2,j2);
}
double eval_Qiadn01(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qiadn01(i1,j1,i2,j2) == 'N' ) {
		_flag_Qiadn01(i1,j1,i2,j2) = 'I';
	//Body for Qiadn01
		Qiadn01(i1,j1,i2,j2) = ((((eval_tempQiadn011(N,M,MHL,i1,j1,i2,j2))+((eval_tempQiadn012(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+((eval_tempQiadn013(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+((eval_tempQiadn014(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+((eval_tempQiadn015(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)));
		_flag_Qiadn01(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qiadn01(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qiadn01 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qiadn01(i1,j1,i2,j2);
}
double eval_Qiadn02(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qiadn02(i1,j1,i2,j2) == 'N' ) {
		_flag_Qiadn02(i1,j1,i2,j2) = 'I';
	//Body for Qiadn02
		Qiadn02(i1,j1,i2,j2) = ((((eval_tempQiadn021(N,M,MHL,i1,j1,i2,j2))+((eval_tempQiadn022(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1))))+((eval_tempQiadn023(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1))))+((eval_tempQiadn024(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1))))+((eval_tempQiadn025(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)));
		_flag_Qiadn02(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qiadn02(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qiadn02 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qiadn02(i1,j1,i2,j2);
}
double eval_Qiadn10(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qiadn10(i1,j1,i2,j2) == 'N' ) {
		_flag_Qiadn10(i1,j1,i2,j2) = 'I';
	//Body for Qiadn10
		Qiadn10(i1,j1,i2,j2) = (((((eval_tempQiadn101(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)))+(eval_tempQiadn102(N,M,MHL,i1,j1,i2,j2)))+(eval_tempQiadn103(N,M,MHL,i1,j1,i2,j2)))+((eval_tempQiadn104(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+(eval_tempQiadn105(N,M,MHL,i1,j1,i2,j2));
		_flag_Qiadn10(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qiadn10(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qiadn10 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qiadn10(i1,j1,i2,j2);
}
double eval_Qiadn11(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qiadn11(i1,j1,i2,j2) == 'N' ) {
		_flag_Qiadn11(i1,j1,i2,j2) = 'I';
	//Body for Qiadn11
		Qiadn11(i1,j1,i2,j2) = (((((eval_tempQiadn111(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)))+((eval_tempQiadn112(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+((eval_tempQiadn113(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+(((eval_tempQiadn114(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)))*(ekissing(0,0,1))))+((eval_tempQiadn115(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)));
		_flag_Qiadn11(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qiadn11(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qiadn11 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qiadn11(i1,j1,i2,j2);
}
double eval_Qiadn12(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qiadn12(i1,j1,i2,j2) == 'N' ) {
		_flag_Qiadn12(i1,j1,i2,j2) = 'I';
	//Body for Qiadn12
		Qiadn12(i1,j1,i2,j2) = (((((eval_tempQiadn121(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)))+((eval_tempQiadn122(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1))))+((eval_tempQiadn123(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1))))+(((eval_tempQiadn124(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)))*(ekissing(0,0,1))))+((eval_tempQiadn125(N,M,MHL,i1,j1,i2,j2))*(emulti(0,0,1)));
		_flag_Qiadn12(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qiadn12(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qiadn12 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qiadn12(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadd011_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qix01(N,M,MHL,i1,d,i2,e))*(eval_Qidd01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadd011(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadd011(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadd011(i1,j1,i2,j2) = 'I';
	//Body for tempQiadd011
		tempQiadd011(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadd011_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadd011(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadd011(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadd011 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadd011(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadd012_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixk01(N,M,MHL,i1,d,i2,e))*(eval_Qidn01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadd012(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadd012(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadd012(i1,j1,i2,j2) = 'I';
	//Body for tempQiadd012
		tempQiadd012(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadd012_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadd012(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadd012(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadd012 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadd012(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadd013_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixk10(N,M,MHL,i1,d,i2,e))*(eval_Qind01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadd013(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadd013(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadd013(i1,j1,i2,j2) = 'I';
	//Body for tempQiadd013
		tempQiadd013(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadd013_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadd013(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadd013(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadd013 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadd013(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadd014_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qix10(N,M,MHL,i1,d,i2,e))*(eval_Qidd01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadd014(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadd014(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadd014(i1,j1,i2,j2) = 'I';
	//Body for tempQiadd014
		tempQiadd014(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadd014_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadd014(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadd014(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadd014 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadd014(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadd015_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiy(N,M,MHL,i1,d,i2,e))*(eval_Qidd01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadd015(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadd015(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadd015(i1,j1,i2,j2) = 'I';
	//Body for tempQiadd015
		tempQiadd015(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadd015_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadd015(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadd015(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadd015 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadd015(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadd101_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qix00(N,M,MHL,i1,d,i2,e))*(eval_Qidd10(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadd101(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadd101(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadd101(i1,j1,i2,j2) = 'I';
	//Body for tempQiadd101
		tempQiadd101(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadd101_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadd101(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadd101(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadd101 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadd101(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadd102_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixk00(N,M,MHL,i1,d,i2,e))*(eval_Qidn10(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadd102(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadd102(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadd102(i1,j1,i2,j2) = 'I';
	//Body for tempQiadd102
		tempQiadd102(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadd102_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadd102(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadd102(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadd102 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadd102(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadd103_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixk11(N,M,MHL,i1,d,i2,e))*(eval_Qind10(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadd103(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadd103(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadd103(i1,j1,i2,j2) = 'I';
	//Body for tempQiadd103
		tempQiadd103(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadd103_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadd103(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadd103(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadd103 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadd103(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadd104_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qix11(N,M,MHL,i1,d,i2,e))*(eval_Qidd10(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadd104(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadd104(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadd104(i1,j1,i2,j2) = 'I';
	//Body for tempQiadd104
		tempQiadd104(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadd104_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadd104(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadd104(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadd104 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadd104(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadd105_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiy(N,M,MHL,i1,d,i2,e))*(eval_Qidd10(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadd105(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadd105(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadd105(i1,j1,i2,j2) = 'I';
	//Body for tempQiadd105
		tempQiadd105(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadd105_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadd105(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadd105(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadd105 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadd105(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadd111_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qix01(N,M,MHL,i1,d,i2,e))*(eval_Qidd11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadd111(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadd111(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadd111(i1,j1,i2,j2) = 'I';
	//Body for tempQiadd111
		tempQiadd111(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadd111_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadd111(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadd111(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadd111 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadd111(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadd112_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixk01(N,M,MHL,i1,d,i2,e))*(eval_Qidn11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadd112(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadd112(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadd112(i1,j1,i2,j2) = 'I';
	//Body for tempQiadd112
		tempQiadd112(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadd112_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadd112(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadd112(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadd112 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadd112(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadd113_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qixk11(N,M,MHL,i1,d,i2,e))*(eval_Qind11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadd113(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadd113(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadd113(i1,j1,i2,j2) = 'I';
	//Body for tempQiadd113
		tempQiadd113(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadd113_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadd113(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadd113(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadd113 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadd113(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadd114_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qix11(N,M,MHL,i1,d,i2,e))*(eval_Qidd11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadd114(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadd114(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadd114(i1,j1,i2,j2) = 'I';
	//Body for tempQiadd114
		tempQiadd114(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadd114_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadd114(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadd114(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadd114 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadd114(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiadd115_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiy(N,M,MHL,i1,d,i2,e))*(eval_Qidd11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiadd115(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiadd115(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiadd115(i1,j1,i2,j2) = 'I';
	//Body for tempQiadd115
		tempQiadd115(i1,j1,i2,j2) = (((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiadd115_1(N,M,MHL,i1,j1,i2,j2):(0));
		_flag_tempQiadd115(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiadd115(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiadd115 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiadd115(i1,j1,i2,j2);
}
double eval_Qiadd01(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qiadd01(i1,j1,i2,j2) == 'N' ) {
		_flag_Qiadd01(i1,j1,i2,j2) = 'I';
	//Body for Qiadd01
		Qiadd01(i1,j1,i2,j2) = ((((eval_tempQiadd011(N,M,MHL,i1,j1,i2,j2))+(eval_tempQiadd012(N,M,MHL,i1,j1,i2,j2)))+((eval_tempQiadd013(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+((eval_tempQiadd014(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+((eval_tempQiadd015(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)));
		_flag_Qiadd01(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qiadd01(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qiadd01 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qiadd01(i1,j1,i2,j2);
}
double eval_Qiadd10(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qiadd10(i1,j1,i2,j2) == 'N' ) {
		_flag_Qiadd10(i1,j1,i2,j2) = 'I';
	//Body for Qiadd10
		Qiadd10(i1,j1,i2,j2) = (((((eval_tempQiadd101(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)))+((eval_tempQiadd102(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+(eval_tempQiadd103(N,M,MHL,i1,j1,i2,j2)))+(eval_tempQiadd104(N,M,MHL,i1,j1,i2,j2)))+((eval_tempQiadd105(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)));
		_flag_Qiadd10(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qiadd10(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qiadd10 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qiadd10(i1,j1,i2,j2);
}
double eval_Qiadd11(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qiadd11(i1,j1,i2,j2) == 'N' ) {
		_flag_Qiadd11(i1,j1,i2,j2) = 'I';
	//Body for Qiadd11
		Qiadd11(i1,j1,i2,j2) = (((((eval_tempQiadd111(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)))+((eval_tempQiadd112(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+((eval_tempQiadd113(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+((eval_tempQiadd114(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+(((eval_tempQiadd115(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)))*(ekissing(0,0,1)));
		_flag_Qiadd11(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qiadd11(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qiadd11 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qiadd11(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQir011_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((eval_Q00(N,M,MHL,i1,d-1))*(eval_Q11(N,M,MHL,i2,e-1)))*(eval_Qilr01(N,M,MHL,d,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=j1p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && e>=i2+1 && j2>=e && j1>=i1+1 && j2>=i2+1 && M>=e+1 && i1>=0 && N>=i1+1 && e>=0 && N>=d+1 && N>=j1+1 && M>=j2+1 && d>=0 && i2>=0 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	for(c6=i2p+1;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQir011_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,i2,e-1))*(eval_Qilr01(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && M>=j2p+1 && j1p>=i1p+1 && N>=i1p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && j2>=i2+1 && N>=i1+1 && i1>=0 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQir011_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,i1,d-1))*(eval_Qilr01(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && j2p>=i2p+1 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1+1 && j1>=d && j1>=i1+1 && M>=j2+1 && d>=0 && i1>=0 && N>=i1+1 && j2>=i2+1 && N>=d+1 && M>=i2+1 && i2>=0 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQir011_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,i2,e-1))*(eval_Qilr01(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=i1p+1 && M>=j2p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && i1>=0 && j2>=i2+1 && N>=i1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQir011_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,i1,d-1))*(eval_Qilr01(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && d>=0 && N>=j1+1 && i2>=0 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=d+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQir011(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQir011(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQir011(i1,j1,i2,j2) = 'I';
	//Body for tempQir011
		tempQir011(i1,j1,i2,j2) = ((base_pair(seq0(j1),eval_seq1(N,M,MHL,j2)))?((((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_tempQir011_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQir011_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_tempQir011_3(N,M,MHL,i1,j1,i2,j2)))+(eval_Qilr01(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQir011_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qilr01(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQir011_5(N,M,MHL,i1,j1,i2,j2))+(eval_Qilr01(N,M,MHL,i1,j1,i2,j2)):(eval_Qilr01(N,M,MHL,i1,j1,i2,j2)))))):(0));
		_flag_tempQir011(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQir011(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQir011 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQir011(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQir101_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((eval_Q10(N,M,MHL,i1,d-1))*(eval_Q01(N,M,MHL,i2,e-1)))*(eval_Qilr10(N,M,MHL,d,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=j1p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && e>=i2+1 && j2>=e && j1>=i1+1 && j2>=i2+1 && M>=e+1 && i1>=0 && N>=i1+1 && e>=0 && N>=d+1 && N>=j1+1 && M>=j2+1 && d>=0 && i2>=0 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	for(c6=i2p+1;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQir101_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,i2,e-1))*(eval_Qilr10(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && M>=j2p+1 && j1p>=i1p+1 && N>=i1p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && j2>=i2+1 && N>=i1+1 && i1>=0 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQir101_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,i1,d-1))*(eval_Qilr10(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && j2p>=i2p+1 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1+1 && j1>=d && j1>=i1+1 && M>=j2+1 && d>=0 && i1>=0 && N>=i1+1 && j2>=i2+1 && N>=d+1 && M>=i2+1 && i2>=0 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQir101_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,i2,e-1))*(eval_Qilr10(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=i1p+1 && M>=j2p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && i1>=0 && j2>=i2+1 && N>=i1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQir101_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,i1,d-1))*(eval_Qilr10(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && d>=0 && N>=j1+1 && i2>=0 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=d+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQir101(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQir101(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQir101(i1,j1,i2,j2) = 'I';
	//Body for tempQir101
		tempQir101(i1,j1,i2,j2) = ((base_pair(seq0(j1),eval_seq1(N,M,MHL,j2)))?((((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_tempQir101_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQir101_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_tempQir101_3(N,M,MHL,i1,j1,i2,j2)))+(eval_Qilr10(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQir101_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qilr10(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQir101_5(N,M,MHL,i1,j1,i2,j2))+(eval_Qilr10(N,M,MHL,i1,j1,i2,j2)):(eval_Qilr10(N,M,MHL,i1,j1,i2,j2)))))):(0));
		_flag_tempQir101(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQir101(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQir101 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQir101(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQir111_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((eval_Q10(N,M,MHL,i1,d-1))*(eval_Q11(N,M,MHL,i2,e-1)))*(eval_Qilr11(N,M,MHL,d,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=j1p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && e>=i2+1 && j2>=e && j1>=i1+1 && j2>=i2+1 && M>=e+1 && i1>=0 && N>=i1+1 && e>=0 && N>=d+1 && N>=j1+1 && M>=j2+1 && d>=0 && i2>=0 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	for(c6=i2p+1;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQir111_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,i2,e-1))*(eval_Qilr11(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && M>=j2p+1 && j1p>=i1p+1 && N>=i1p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && j2>=i2+1 && N>=i1+1 && i1>=0 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQir111_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,i1,d-1))*(eval_Qilr11(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && j2p>=i2p+1 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1+1 && j1>=d && j1>=i1+1 && M>=j2+1 && d>=0 && i1>=0 && N>=i1+1 && j2>=i2+1 && N>=d+1 && M>=i2+1 && i2>=0 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQir111_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,i2,e-1))*(eval_Qilr11(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=i1p+1 && M>=j2p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && i1>=0 && j2>=i2+1 && N>=i1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQir111_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,i1,d-1))*(eval_Qilr11(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && d>=0 && N>=j1+1 && i2>=0 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=d+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQir111(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQir111(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQir111(i1,j1,i2,j2) = 'I';
	//Body for tempQir111
		tempQir111(i1,j1,i2,j2) = ((base_pair(seq0(j1),eval_seq1(N,M,MHL,j2)))?((((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_tempQir111_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQir111_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_tempQir111_3(N,M,MHL,i1,j1,i2,j2)))+(eval_Qilr11(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQir111_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qilr11(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQir111_5(N,M,MHL,i1,j1,i2,j2))+(eval_Qilr11(N,M,MHL,i1,j1,i2,j2)):(eval_Qilr11(N,M,MHL,i1,j1,i2,j2)))))):(0));
		_flag_tempQir111(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQir111(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQir111 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQir111(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQir012_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((eval_Q00(N,M,MHL,i1,d-1))*(eval_Q11(N,M,MHL,i2,e-1)))*(eval_Qiar01(N,M,MHL,d,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=j1p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && e>=i2+1 && j2>=e && j1>=i1+1 && j2>=i2+1 && M>=e+1 && i1>=0 && N>=i1+1 && e>=0 && N>=d+1 && N>=j1+1 && M>=j2+1 && d>=0 && i2>=0 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	for(c6=i2p+1;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQir012_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,i2,e-1))*(eval_Qiar01(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && M>=j2p+1 && j1p>=i1p+1 && N>=i1p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && j2>=i2+1 && N>=i1+1 && i1>=0 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQir012_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,i1,d-1))*(eval_Qiar01(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && j2p>=i2p+1 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1+1 && j1>=d && j1>=i1+1 && M>=j2+1 && d>=0 && i1>=0 && N>=i1+1 && j2>=i2+1 && N>=d+1 && M>=i2+1 && i2>=0 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQir012_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,i2,e-1))*(eval_Qiar01(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=i1p+1 && M>=j2p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && i1>=0 && j2>=i2+1 && N>=i1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQir012_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q00(N,M,MHL,i1,d-1))*(eval_Qiar01(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && d>=0 && N>=j1+1 && i2>=0 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=d+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQir012(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQir012(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQir012(i1,j1,i2,j2) = 'I';
	//Body for tempQir012
		tempQir012(i1,j1,i2,j2) = ((base_pair(seq0(j1),eval_seq1(N,M,MHL,j2)))?((((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_tempQir012_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQir012_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_tempQir012_3(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiar01(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQir012_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qiar01(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQir012_5(N,M,MHL,i1,j1,i2,j2))+(eval_Qiar01(N,M,MHL,i1,j1,i2,j2)):(eval_Qiar01(N,M,MHL,i1,j1,i2,j2)))))):(0));
		_flag_tempQir012(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQir012(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQir012 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQir012(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQir102_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((eval_Q10(N,M,MHL,i1,d-1))*(eval_Q01(N,M,MHL,i2,e-1)))*(eval_Qiar10(N,M,MHL,d,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=j1p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && e>=i2+1 && j2>=e && j1>=i1+1 && j2>=i2+1 && M>=e+1 && i1>=0 && N>=i1+1 && e>=0 && N>=d+1 && N>=j1+1 && M>=j2+1 && d>=0 && i2>=0 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	for(c6=i2p+1;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQir102_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,i2,e-1))*(eval_Qiar10(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && M>=j2p+1 && j1p>=i1p+1 && N>=i1p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && j2>=i2+1 && N>=i1+1 && i1>=0 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQir102_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,i1,d-1))*(eval_Qiar10(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && j2p>=i2p+1 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1+1 && j1>=d && j1>=i1+1 && M>=j2+1 && d>=0 && i1>=0 && N>=i1+1 && j2>=i2+1 && N>=d+1 && M>=i2+1 && i2>=0 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQir102_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q01(N,M,MHL,i2,e-1))*(eval_Qiar10(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=i1p+1 && M>=j2p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && i1>=0 && j2>=i2+1 && N>=i1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQir102_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,i1,d-1))*(eval_Qiar10(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && d>=0 && N>=j1+1 && i2>=0 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=d+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQir102(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQir102(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQir102(i1,j1,i2,j2) = 'I';
	//Body for tempQir102
		tempQir102(i1,j1,i2,j2) = ((base_pair(seq0(j1),eval_seq1(N,M,MHL,j2)))?((((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_tempQir102_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQir102_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_tempQir102_3(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiar10(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQir102_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qiar10(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQir102_5(N,M,MHL,i1,j1,i2,j2))+(eval_Qiar10(N,M,MHL,i1,j1,i2,j2)):(eval_Qiar10(N,M,MHL,i1,j1,i2,j2)))))):(0));
		_flag_tempQir102(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQir102(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQir102 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQir102(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQir112_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+(((eval_Q10(N,M,MHL,i1,d-1))*(eval_Q11(N,M,MHL,i2,e-1)))*(eval_Qiar11(N,M,MHL,d,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && i2p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && N>=j1p+1 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && e>=i2+1 && j2>=e && j1>=i1+1 && j2>=i2+1 && M>=e+1 && i1>=0 && N>=i1+1 && e>=0 && N>=d+1 && N>=j1+1 && M>=j2+1 && d>=0 && i2>=0 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	for(c6=i2p+1;c6 <= j2p;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQir112_2(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,i2,e-1))*(eval_Qiar11(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=j1p+1 && M>=j2p+1 && j1p>=i1p+1 && N>=i1p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && j2>=i2+1 && N>=i1+1 && i1>=0 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && N>=j1+1 && j1>=i1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQir112_3(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,i1,d-1))*(eval_Qiar11(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && j2p>=i2p+1 && M>=j2p+1 && M>=i2p+1 && N>=i1p+1 && d>=i1+1 && j1>=d && j1>=i1+1 && M>=j2+1 && d>=0 && i1>=0 && N>=i1+1 && j2>=i2+1 && N>=d+1 && M>=i2+1 && i2>=0 && N>=j1+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQir112_4(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,e) reduceVar = (reduceVar)+((eval_Q11(N,M,MHL,i2,e-1))*(eval_Qiar11(N,M,MHL,i1,j1,e,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,e|j1==i1 && j1p==i1p && i1p>=0 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i2p>=0 && N>=i1p+1 && M>=j2p+1 && M>=i2p+1 && e>=i2+1 && j2>=e && i1>=0 && j2>=i2+1 && N>=i1+1 && i2>=0 && M>=i2+1 && M>=j2+1 && M>=e+1 && e>=0 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i2p+1;c5 <= j2p;c5+=1)
		 {
		 	S0((i1p),(i1p),(i2p),(j2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double reduce_piRNAb2_tempQir112_5(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d) reduceVar = (reduceVar)+((eval_Q10(N,M,MHL,i1,d-1))*(eval_Qiar11(N,M,MHL,d,j1,i2,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d|j2==i2 && j2p==i2p && N>=j1p+1 && j1p>=i1p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && N>=i1p+1 && M>=i2p+1 && d>=i1+1 && j1>=d && d>=0 && N>=j1+1 && i2>=0 && i1>=0 && N>=i1+1 && j1>=i1+1 && N>=d+1 && M>=i2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5;
		for(c5=i1p+1;c5 <= j1p;c5+=1)
		 {
		 	S0((i1p),(j1p),(i2p),(i2p),(c5));
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQir112(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQir112(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQir112(i1,j1,i2,j2) = 'I';
	//Body for tempQir112
		tempQir112(i1,j1,i2,j2) = ((base_pair(seq0(j1),eval_seq1(N,M,MHL,j2)))?((((j2 >= i2+1 && j1 >= i1+1))?(((reduce_piRNAb2_tempQir112_1(N,M,MHL,i1,j1,i2,j2))+(reduce_piRNAb2_tempQir112_2(N,M,MHL,i1,j1,i2,j2)))+(reduce_piRNAb2_tempQir112_3(N,M,MHL,i1,j1,i2,j2)))+(eval_Qiar11(N,M,MHL,i1,j1,i2,j2)):(((j1 == i1 && j2 >= i2+1))?(reduce_piRNAb2_tempQir112_4(N,M,MHL,i1,j1,i2,j2))+(eval_Qiar11(N,M,MHL,i1,j1,i2,j2)):(((j2 == i2 && j1 >= i1+1))?(reduce_piRNAb2_tempQir112_5(N,M,MHL,i1,j1,i2,j2))+(eval_Qiar11(N,M,MHL,i1,j1,i2,j2)):(eval_Qiar11(N,M,MHL,i1,j1,i2,j2)))))):(0));
		_flag_tempQir112(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQir112(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQir112 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQir112(i1,j1,i2,j2);
}
double eval_Qir01(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qir01(i1,j1,i2,j2) == 'N' ) {
		_flag_Qir01(i1,j1,i2,j2) = 'I';
	//Body for Qir01
		Qir01(i1,j1,i2,j2) = (eval_tempQir011(N,M,MHL,i1,j1,i2,j2))+(eval_tempQir012(N,M,MHL,i1,j1,i2,j2));
		_flag_Qir01(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qir01(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qir01 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qir01(i1,j1,i2,j2);
}
double eval_Qir10(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qir10(i1,j1,i2,j2) == 'N' ) {
		_flag_Qir10(i1,j1,i2,j2) = 'I';
	//Body for Qir10
		Qir10(i1,j1,i2,j2) = (eval_tempQir101(N,M,MHL,i1,j1,i2,j2))+(eval_tempQir102(N,M,MHL,i1,j1,i2,j2));
		_flag_Qir10(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qir10(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qir10 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qir10(i1,j1,i2,j2);
}
double eval_Qir11(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qir11(i1,j1,i2,j2) == 'N' ) {
		_flag_Qir11(i1,j1,i2,j2) = 'I';
	//Body for Qir11
		Qir11(i1,j1,i2,j2) = (eval_tempQir111(N,M,MHL,i1,j1,i2,j2))+(eval_tempQir112(N,M,MHL,i1,j1,i2,j2));
		_flag_Qir11(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qir11(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qir11 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qir11(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiar011_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qix01(N,M,MHL,i1,d,i2,e))*(eval_Qir01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiar011(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiar011(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiar011(i1,j1,i2,j2) = 'I';
	//Body for tempQiar011
		tempQiar011(i1,j1,i2,j2) = ((base_pair(seq0(j1),eval_seq1(N,M,MHL,j2)))?((((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiar011_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQiar011(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiar011(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiar011 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiar011(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiar012_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qix10(N,M,MHL,i1,d,i2,e))*(eval_Qir01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiar012(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiar012(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiar012(i1,j1,i2,j2) = 'I';
	//Body for tempQiar012
		tempQiar012(i1,j1,i2,j2) = ((base_pair(seq0(j1),eval_seq1(N,M,MHL,j2)))?((((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiar012_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQiar012(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiar012(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiar012 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiar012(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiar013_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiy(N,M,MHL,i1,d,i2,e))*(eval_Qir01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiar013(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiar013(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiar013(i1,j1,i2,j2) = 'I';
	//Body for tempQiar013
		tempQiar013(i1,j1,i2,j2) = ((base_pair(seq0(j1),eval_seq1(N,M,MHL,j2)))?((((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiar013_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQiar013(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiar013(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiar013 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiar013(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiar101_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qix00(N,M,MHL,i1,d,i2,e))*(eval_Qir10(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiar101(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiar101(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiar101(i1,j1,i2,j2) = 'I';
	//Body for tempQiar101
		tempQiar101(i1,j1,i2,j2) = ((base_pair(seq0(j1),eval_seq1(N,M,MHL,j2)))?((((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiar101_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQiar101(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiar101(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiar101 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiar101(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiar102_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qix11(N,M,MHL,i1,d,i2,e))*(eval_Qir10(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiar102(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiar102(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiar102(i1,j1,i2,j2) = 'I';
	//Body for tempQiar102
		tempQiar102(i1,j1,i2,j2) = ((base_pair(seq0(j1),eval_seq1(N,M,MHL,j2)))?((((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiar102_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQiar102(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiar102(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiar102 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiar102(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiar103_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiy(N,M,MHL,i1,d,i2,e))*(eval_Qir10(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiar103(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiar103(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiar103(i1,j1,i2,j2) = 'I';
	//Body for tempQiar103
		tempQiar103(i1,j1,i2,j2) = ((base_pair(seq0(j1),eval_seq1(N,M,MHL,j2)))?((((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiar103_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQiar103(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiar103(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiar103 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiar103(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiar111_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qix01(N,M,MHL,i1,d,i2,e))*(eval_Qir11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiar111(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiar111(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiar111(i1,j1,i2,j2) = 'I';
	//Body for tempQiar111
		tempQiar111(i1,j1,i2,j2) = ((base_pair(seq0(j1),eval_seq1(N,M,MHL,j2)))?((((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiar111_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQiar111(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiar111(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiar111 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiar111(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiar112_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qix11(N,M,MHL,i1,d,i2,e))*(eval_Qir11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiar112(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiar112(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiar112(i1,j1,i2,j2) = 'I';
	//Body for tempQiar112
		tempQiar112(i1,j1,i2,j2) = ((base_pair(seq0(j1),eval_seq1(N,M,MHL,j2)))?((((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiar112_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQiar112(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiar112(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiar112 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiar112(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQiar113_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qiy(N,M,MHL,i1,d,i2,e))*(eval_Qir11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQiar113(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQiar113(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQiar113(i1,j1,i2,j2) = 'I';
	//Body for tempQiar113
		tempQiar113(i1,j1,i2,j2) = ((base_pair(seq0(j1),eval_seq1(N,M,MHL,j2)))?((((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQiar113_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQiar113(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQiar113(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQiar113 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQiar113(i1,j1,i2,j2);
}
double eval_Qiar01(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qiar01(i1,j1,i2,j2) == 'N' ) {
		_flag_Qiar01(i1,j1,i2,j2) = 'I';
	//Body for Qiar01
		Qiar01(i1,j1,i2,j2) = ((eval_tempQiar011(N,M,MHL,i1,j1,i2,j2))+((eval_tempQiar012(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+((eval_tempQiar013(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)));
		_flag_Qiar01(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qiar01(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qiar01 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qiar01(i1,j1,i2,j2);
}
double eval_Qiar10(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qiar10(i1,j1,i2,j2) == 'N' ) {
		_flag_Qiar10(i1,j1,i2,j2) = 'I';
	//Body for Qiar10
		Qiar10(i1,j1,i2,j2) = (((eval_tempQiar101(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)))+(eval_tempQiar102(N,M,MHL,i1,j1,i2,j2)))+((eval_tempQiar103(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)));
		_flag_Qiar10(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qiar10(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qiar10 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qiar10(i1,j1,i2,j2);
}
double eval_Qiar11(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qiar11(i1,j1,i2,j2) == 'N' ) {
		_flag_Qiar11(i1,j1,i2,j2) = 'I';
	//Body for Qiar11
		Qiar11(i1,j1,i2,j2) = (((eval_tempQiar111(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)))+((eval_tempQiar112(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1))))+(((eval_tempQiar113(N,M,MHL,i1,j1,i2,j2))*(ekissing(0,0,1)))*(ekissing(0,0,1)));
		_flag_Qiar11(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qiar11(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qiar11 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qiar11(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQilr011_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qihm01(N,M,MHL,i1,d,i2,e))*(eval_Qilr01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQilr011(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQilr011(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQilr011(i1,j1,i2,j2) = 'I';
	//Body for tempQilr011
		tempQilr011(i1,j1,i2,j2) = ((base_pair(seq0(j1),eval_seq1(N,M,MHL,j2)))?((((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQilr011_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQilr011(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQilr011(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQilr011 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQilr011(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQilr012_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qihh01(N,M,MHL,i1,d,i2,e))*(eval_Qiar01(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQilr012(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQilr012(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQilr012(i1,j1,i2,j2) = 'I';
	//Body for tempQilr012
		tempQilr012(i1,j1,i2,j2) = ((base_pair(seq0(j1),eval_seq1(N,M,MHL,j2)))?((((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQilr012_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQilr012(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQilr012(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQilr012 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQilr012(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQilr101_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qihm10(N,M,MHL,i1,d,i2,e))*(eval_Qilr10(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQilr101(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQilr101(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQilr101(i1,j1,i2,j2) = 'I';
	//Body for tempQilr101
		tempQilr101(i1,j1,i2,j2) = ((base_pair(seq0(j1),eval_seq1(N,M,MHL,j2)))?((((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQilr101_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQilr101(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQilr101(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQilr101 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQilr101(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQilr102_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qihh10(N,M,MHL,i1,d,i2,e))*(eval_Qiar10(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQilr102(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQilr102(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQilr102(i1,j1,i2,j2) = 'I';
	//Body for tempQilr102
		tempQilr102(i1,j1,i2,j2) = ((base_pair(seq0(j1),eval_seq1(N,M,MHL,j2)))?((((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQilr102_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQilr102(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQilr102(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQilr102 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQilr102(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQilr111_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qihm11(N,M,MHL,i1,d,i2,e))*(eval_Qilr11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQilr111(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQilr111(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQilr111(i1,j1,i2,j2) = 'I';
	//Body for tempQilr111
		tempQilr111(i1,j1,i2,j2) = ((base_pair(seq0(j1),eval_seq1(N,M,MHL,j2)))?((((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQilr111_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQilr111(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQilr111(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQilr111 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQilr111(i1,j1,i2,j2);
}
double reduce_piRNAb2_tempQilr112_1(long N, long M, long MHL, int i1p, int j1p, int i2p, int j2p){
	double reduceVar = 0;
	#define S0(i1,j1,i2,j2,d,e) reduceVar = (reduceVar)+((eval_Qihh11(N,M,MHL,i1,d,i2,e))*(eval_Qiar11(N,M,MHL,d+1,j1,e+1,j2)))
	{
		//Domain
		//{i1,j1,i2,j2,d,e|M>=j2p+1 && j1p>=i1p+1 && N>=j1p+1 && j2p>=i2p+1 && N>=9 && M>=9 && MHL>=11 && i1p>=0 && i2p>=0 && d>=i1 && j1>=d+1 && e>=i2 && j2>=e+1 && j1>=i1+1 && j2>=i2+1 && d>=-1 && i1>=0 && N>=i1+1 && e>=-1 && N>=d+2 && i2>=0 && M>=i2+1 && N>=j1+1 && M>=e+2 && M>=j2+1 && i1p==i1 && j1p==j1 && i2p==i2 && j2p==j2}
		int c5,c6;
		for(c5=i1p;c5 <= j1p-1;c5+=1)
		 {
		 	for(c6=i2p;c6 <= j2p-1;c6+=1)
		 	 {
		 	 	S0((i1p),(j1p),(i2p),(j2p),(c5),(c6));
		 	 }
		 }
	}
	#undef S0
	return reduceVar;
}
double eval_tempQilr112(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_tempQilr112(i1,j1,i2,j2) == 'N' ) {
		_flag_tempQilr112(i1,j1,i2,j2) = 'I';
	//Body for tempQilr112
		tempQilr112(i1,j1,i2,j2) = ((base_pair(seq0(j1),eval_seq1(N,M,MHL,j2)))?((((j2 >= i2+1 && j1 >= i1+1))?reduce_piRNAb2_tempQilr112_1(N,M,MHL,i1,j1,i2,j2):(0))):(0));
		_flag_tempQilr112(i1,j1,i2,j2) = 'F';
	} else if ( _flag_tempQilr112(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on tempQilr112 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return tempQilr112(i1,j1,i2,j2);
}
double eval_Qilr01(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qilr01(i1,j1,i2,j2) == 'N' ) {
		_flag_Qilr01(i1,j1,i2,j2) = 'I';
	//Body for Qilr01
		Qilr01(i1,j1,i2,j2) = ((eval_tempQilr011(N,M,MHL,i1,j1,i2,j2))+(eval_tempQilr012(N,M,MHL,i1,j1,i2,j2)))+(((eval_Qih1(N,M,MHL,i1,j1,i2,j2))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,j1,j2)));
		_flag_Qilr01(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qilr01(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qilr01 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qilr01(i1,j1,i2,j2);
}
double eval_Qilr10(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qilr10(i1,j1,i2,j2) == 'N' ) {
		_flag_Qilr10(i1,j1,i2,j2) = 'I';
	//Body for Qilr10
		Qilr10(i1,j1,i2,j2) = ((eval_tempQilr101(N,M,MHL,i1,j1,i2,j2))+(eval_tempQilr102(N,M,MHL,i1,j1,i2,j2)))+(((eval_Qih1(N,M,MHL,i1,j1,i2,j2))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,j1,j2)));
		_flag_Qilr10(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qilr10(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qilr10 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qilr10(i1,j1,i2,j2);
}
double eval_Qilr11(long N, long M, long MHL, int i1, int j1, int i2, int j2){
	if ( _flag_Qilr11(i1,j1,i2,j2) == 'N' ) {
		_flag_Qilr11(i1,j1,i2,j2) = 'I';
	//Body for Qilr11
		Qilr11(i1,j1,i2,j2) = ((eval_tempQilr111(N,M,MHL,i1,j1,i2,j2))+(eval_tempQilr112(N,M,MHL,i1,j1,i2,j2)))+(((eval_Qih1(N,M,MHL,i1,j1,i2,j2))*(ekissing(1,0,0)))*(eaupenalty(i1,i2,j1,j2)));
		_flag_Qilr11(i1,j1,i2,j2) = 'F';
	} else if ( _flag_Qilr11(i1,j1,i2,j2) == 'I' ) {
		printf("There is a self dependence on Qilr11 at (%d,%d,%d,%d) \n",i1,j1,i2,j2);
		exit(-1);
	}
	return Qilr11(i1,j1,i2,j2);
}

//Memory Macros
#undef seq0
#undef seqr
#undef Qb0
#undef Qg0
#undef tempqg0
#undef tempqgk0
#undef tempqgm0
#undef Qbr
#undef Qgr
#undef tempqgr
#undef tempqgkr
#undef tempqgmr
#undef Qm00
#undef Qm10
#undef Q0r
#undef Q1r
#undef Qm0r
#undef Qm1r
#undef Qgk1
#undef Qgm1
#undef Q01
#undef Q11
#undef Qm01
#undef Qm11
#undef Qih0
#undef Qih1
#undef Qihh00
#undef Qihh01
#undef Qihh10
#undef Qihh11
#undef Qihm00
#undef Qihm01
#undef Qihm10
#undef Qihm11
#undef Qgkr
#undef Qgmr
#undef Qgk0
#undef Qgm0
#undef Q20
#undef Qm20
#undef Qm2r
#undef Q2r
#undef Q21
#undef tempQiy1
#undef tempQiy2
#undef tempQixm001
#undef tempQixm002
#undef tempQixm011
#undef tempQixm012
#undef tempQixm021
#undef tempQixm022
#undef tempQixm101
#undef tempQixm102
#undef tempQixm111
#undef tempQixm112
#undef tempQixm121
#undef tempQixm122
#undef tempQixk001
#undef tempQixk002
#undef tempQixk011
#undef tempQixk012
#undef tempQixk101
#undef tempQixk102
#undef tempQixk111
#undef tempQixk112
#undef tempQimm021
#undef tempQimm022
#undef tempQimm023
#undef tempQimm121
#undef tempQimm122
#undef tempQimm123
#undef tempQimm201
#undef tempQimm202
#undef tempQimm203
#undef tempQimm211
#undef tempQimm212
#undef tempQimm213
#undef tempQimm221
#undef tempQimm222
#undef tempQimm223
#undef tempQimk011
#undef tempQimk012
#undef tempQimk013
#undef tempQimk014
#undef tempQimk111
#undef tempQimk112
#undef tempQimk113
#undef tempQimk114
#undef tempQimk201
#undef tempQimk202
#undef tempQimk203
#undef tempQimk204
#undef tempQimk211
#undef tempQimk212
#undef tempQimk213
#undef tempQimk214
#undef tempQikm101
#undef tempQikm102
#undef tempQikm103
#undef tempQikm104
#undef tempQikm111
#undef tempQikm112
#undef tempQikm113
#undef tempQikm114
#undef tempQikm021
#undef tempQikm022
#undef tempQikm023
#undef tempQikm024
#undef tempQikm121
#undef tempQikm122
#undef tempQikm123
#undef tempQikm124
#undef tempQikk011
#undef tempQikk012
#undef tempQikk013
#undef tempQikk014
#undef tempQikk015
#undef tempQikk101
#undef tempQikk102
#undef tempQikk103
#undef tempQikk104
#undef tempQikk105
#undef tempQikk111
#undef tempQikk112
#undef tempQikk113
#undef tempQikk114
#undef tempQikk115
#undef tempQiann011
#undef tempQiann012
#undef tempQiann013
#undef tempQiann014
#undef tempQiann015
#undef tempQiann016
#undef tempQiann021
#undef tempQiann022
#undef tempQiann023
#undef tempQiann024
#undef tempQiann025
#undef tempQiann026
#undef tempQiann101
#undef tempQiann102
#undef tempQiann103
#undef tempQiann104
#undef tempQiann105
#undef tempQiann106
#undef tempQiann111
#undef tempQiann112
#undef tempQiann113
#undef tempQiann114
#undef tempQiann115
#undef tempQiann116
#undef tempQiann121
#undef tempQiann122
#undef tempQiann123
#undef tempQiann124
#undef tempQiann125
#undef tempQiann126
#undef tempQiann201
#undef tempQiann202
#undef tempQiann203
#undef tempQiann204
#undef tempQiann205
#undef tempQiann206
#undef tempQiann211
#undef tempQiann212
#undef tempQiann213
#undef tempQiann214
#undef tempQiann215
#undef tempQiann216
#undef tempQiann221
#undef tempQiann222
#undef tempQiann223
#undef tempQiann224
#undef tempQiann225
#undef tempQiann226
#undef tempQiand011
#undef tempQiand012
#undef tempQiand013
#undef tempQiand014
#undef tempQiand015
#undef tempQiand101
#undef tempQiand102
#undef tempQiand103
#undef tempQiand104
#undef tempQiand105
#undef tempQiand111
#undef tempQiand112
#undef tempQiand113
#undef tempQiand114
#undef tempQiand115
#undef tempQiand201
#undef tempQiand202
#undef tempQiand203
#undef tempQiand204
#undef tempQiand205
#undef tempQiand211
#undef tempQiand212
#undef tempQiand213
#undef tempQiand214
#undef tempQiand215
#undef tempQiadn011
#undef tempQiadn012
#undef tempQiadn013
#undef tempQiadn014
#undef tempQiadn015
#undef tempQiadn021
#undef tempQiadn022
#undef tempQiadn023
#undef tempQiadn024
#undef tempQiadn025
#undef tempQiadn101
#undef tempQiadn102
#undef tempQiadn103
#undef tempQiadn104
#undef tempQiadn105
#undef tempQiadn111
#undef tempQiadn112
#undef tempQiadn113
#undef tempQiadn114
#undef tempQiadn115
#undef tempQiadn121
#undef tempQiadn122
#undef tempQiadn123
#undef tempQiadn124
#undef tempQiadn125
#undef tempQiadd011
#undef tempQiadd012
#undef tempQiadd013
#undef tempQiadd014
#undef tempQiadd015
#undef tempQiadd101
#undef tempQiadd102
#undef tempQiadd103
#undef tempQiadd104
#undef tempQiadd105
#undef tempQiadd111
#undef tempQiadd112
#undef tempQiadd113
#undef tempQiadd114
#undef tempQiadd115
#undef tempQir011
#undef tempQir012
#undef tempQir101
#undef tempQir102
#undef tempQir111
#undef tempQir112
#undef tempQiar011
#undef tempQiar012
#undef tempQiar013
#undef tempQiar101
#undef tempQiar102
#undef tempQiar103
#undef tempQiar111
#undef tempQiar112
#undef tempQiar113
#undef tempQilr011
#undef tempQilr012
#undef tempQilr101
#undef tempQilr102
#undef tempQilr111
#undef tempQilr112
#undef tempQi1
#undef tempQi2
#undef tempQia1
#undef tempQia2
#undef tempQia3
#undef tempQia4
#undef tempQia5
#undef tempQia6
#undef tempQib001
#undef tempQib002
#undef tempQib011
#undef tempQib012
#undef tempQib101
#undef tempQib102
#undef tempQib111
#undef tempQib112
#undef tempQinn011
#undef tempQinn021
#undef tempQinn101
#undef tempQinn111
#undef tempQinn121
#undef tempQinn201
#undef tempQinn211
#undef tempQinn221
#undef tempQidd011
#undef tempQidd101
#undef tempQidd111
#undef tempQidd012
#undef tempQidd102
#undef tempQidd112
#undef seq1
#undef Q00
#undef Q10
#undef Qi
#undef Qiy
#undef Qixm00
#undef Qixm01
#undef Qixm02
#undef Qixm10
#undef Qixm11
#undef Qixm12
#undef Qixk00
#undef Qixk01
#undef Qixk10
#undef Qixk11
#undef Qimm02
#undef Qimm12
#undef Qimm20
#undef Qimm21
#undef Qimm22
#undef Qimk01
#undef Qimk11
#undef Qimk20
#undef Qimk21
#undef Qikm10
#undef Qikm11
#undef Qikm02
#undef Qikm12
#undef Qikk01
#undef Qikk10
#undef Qikk11
#undef Qiann01
#undef Qiann02
#undef Qiann10
#undef Qiann11
#undef Qiann12
#undef Qiann20
#undef Qiann21
#undef Qiann22
#undef Qiand01
#undef Qiand10
#undef Qiand11
#undef Qiand20
#undef Qiand21
#undef Qiadn01
#undef Qiadn02
#undef Qiadn10
#undef Qiadn11
#undef Qiadn12
#undef Qiadd01
#undef Qiadd10
#undef Qiadd11
#undef Qiar01
#undef Qiar10
#undef Qiar11
#undef Qilr01
#undef Qilr10
#undef Qilr11
#undef Qir01
#undef Qir10
#undef Qir11
#undef Qia
#undef Qib00
#undef Qib01
#undef Qib10
#undef Qib11
#undef Qinn01
#undef Qinn02
#undef Qinn10
#undef Qinn11
#undef Qinn12
#undef Qinn20
#undef Qinn21
#undef Qinn22
#undef Qind01
#undef Qind10
#undef Qind11
#undef Qind20
#undef Qind21
#undef Qidn01
#undef Qidn02
#undef Qidn10
#undef Qidn11
#undef Qidn12
#undef Qidd01
#undef Qidd10
#undef Qidd11
#undef Qix00
#undef Qix01
#undef Qix10
#undef Qix11
#undef auxqiadd01
#undef auxqiadd10
#undef auxqiadd11
#undef auxqia01
#undef auxqia10
#undef auxqia11
#undef _flag_seq1
#undef _flag_Q00
#undef _flag_Q10
#undef _flag_Qi
#undef _flag_Qiy
#undef _flag_Qixm00
#undef _flag_Qixm01
#undef _flag_Qixm02
#undef _flag_Qixm10
#undef _flag_Qixm11
#undef _flag_Qixm12
#undef _flag_Qixk00
#undef _flag_Qixk01
#undef _flag_Qixk10
#undef _flag_Qixk11
#undef _flag_Qimm02
#undef _flag_Qimm12
#undef _flag_Qimm20
#undef _flag_Qimm21
#undef _flag_Qimm22
#undef _flag_Qimk01
#undef _flag_Qimk11
#undef _flag_Qimk20
#undef _flag_Qimk21
#undef _flag_Qikm10
#undef _flag_Qikm11
#undef _flag_Qikm02
#undef _flag_Qikm12
#undef _flag_Qikk01
#undef _flag_Qikk10
#undef _flag_Qikk11
#undef _flag_Qiann01
#undef _flag_Qiann02
#undef _flag_Qiann10
#undef _flag_Qiann11
#undef _flag_Qiann12
#undef _flag_Qiann20
#undef _flag_Qiann21
#undef _flag_Qiann22
#undef _flag_Qiand01
#undef _flag_Qiand10
#undef _flag_Qiand11
#undef _flag_Qiand20
#undef _flag_Qiand21
#undef _flag_Qiadn01
#undef _flag_Qiadn02
#undef _flag_Qiadn10
#undef _flag_Qiadn11
#undef _flag_Qiadn12
#undef _flag_Qiadd01
#undef _flag_Qiadd10
#undef _flag_Qiadd11
#undef _flag_Qiar01
#undef _flag_Qiar10
#undef _flag_Qiar11
#undef _flag_Qilr01
#undef _flag_Qilr10
#undef _flag_Qilr11
#undef _flag_Qir01
#undef _flag_Qir10
#undef _flag_Qir11
#undef _flag_Qia
#undef _flag_Qib00
#undef _flag_Qib01
#undef _flag_Qib10
#undef _flag_Qib11
#undef _flag_Qinn01
#undef _flag_Qinn02
#undef _flag_Qinn10
#undef _flag_Qinn11
#undef _flag_Qinn12
#undef _flag_Qinn20
#undef _flag_Qinn21
#undef _flag_Qinn22
#undef _flag_Qind01
#undef _flag_Qind10
#undef _flag_Qind11
#undef _flag_Qind20
#undef _flag_Qind21
#undef _flag_Qidn01
#undef _flag_Qidn02
#undef _flag_Qidn10
#undef _flag_Qidn11
#undef _flag_Qidn12
#undef _flag_Qidd01
#undef _flag_Qidd10
#undef _flag_Qidd11
#undef _flag_Qix00
#undef _flag_Qix01
#undef _flag_Qix10
#undef _flag_Qix11
#undef _flag_auxqiadd01
#undef _flag_auxqiadd10
#undef _flag_auxqiadd11
#undef _flag_auxqia01
#undef _flag_auxqia10
#undef _flag_auxqia11
#undef _flag_Qb0
#undef _flag_Qg0
#undef _flag_tempqg0
#undef _flag_tempqgk0
#undef _flag_tempqgm0
#undef _flag_Qbr
#undef _flag_Qgr
#undef _flag_tempqgr
#undef _flag_tempqgkr
#undef _flag_tempqgmr
#undef _flag_Qm00
#undef _flag_Qm10
#undef _flag_Q0r
#undef _flag_Q1r
#undef _flag_Qm0r
#undef _flag_Qm1r
#undef _flag_Qgk1
#undef _flag_Qgm1
#undef _flag_Q01
#undef _flag_Q11
#undef _flag_Qm01
#undef _flag_Qm11
#undef _flag_Qih0
#undef _flag_Qih1
#undef _flag_Qihh00
#undef _flag_Qihh01
#undef _flag_Qihh10
#undef _flag_Qihh11
#undef _flag_Qihm00
#undef _flag_Qihm01
#undef _flag_Qihm10
#undef _flag_Qihm11
#undef _flag_Qgkr
#undef _flag_Qgmr
#undef _flag_Qgk0
#undef _flag_Qgm0
#undef _flag_Q20
#undef _flag_Qm20
#undef _flag_Qm2r
#undef _flag_Q2r
#undef _flag_Q21
#undef _flag_tempQiy1
#undef _flag_tempQiy2
#undef _flag_tempQixm001
#undef _flag_tempQixm002
#undef _flag_tempQixm011
#undef _flag_tempQixm012
#undef _flag_tempQixm021
#undef _flag_tempQixm022
#undef _flag_tempQixm101
#undef _flag_tempQixm102
#undef _flag_tempQixm111
#undef _flag_tempQixm112
#undef _flag_tempQixm121
#undef _flag_tempQixm122
#undef _flag_tempQixk001
#undef _flag_tempQixk002
#undef _flag_tempQixk011
#undef _flag_tempQixk012
#undef _flag_tempQixk101
#undef _flag_tempQixk102
#undef _flag_tempQixk111
#undef _flag_tempQixk112
#undef _flag_tempQimm021
#undef _flag_tempQimm022
#undef _flag_tempQimm023
#undef _flag_tempQimm121
#undef _flag_tempQimm122
#undef _flag_tempQimm123
#undef _flag_tempQimm201
#undef _flag_tempQimm202
#undef _flag_tempQimm203
#undef _flag_tempQimm211
#undef _flag_tempQimm212
#undef _flag_tempQimm213
#undef _flag_tempQimm221
#undef _flag_tempQimm222
#undef _flag_tempQimm223
#undef _flag_tempQimk011
#undef _flag_tempQimk012
#undef _flag_tempQimk013
#undef _flag_tempQimk014
#undef _flag_tempQimk111
#undef _flag_tempQimk112
#undef _flag_tempQimk113
#undef _flag_tempQimk114
#undef _flag_tempQimk201
#undef _flag_tempQimk202
#undef _flag_tempQimk203
#undef _flag_tempQimk204
#undef _flag_tempQimk211
#undef _flag_tempQimk212
#undef _flag_tempQimk213
#undef _flag_tempQimk214
#undef _flag_tempQikm101
#undef _flag_tempQikm102
#undef _flag_tempQikm103
#undef _flag_tempQikm104
#undef _flag_tempQikm111
#undef _flag_tempQikm112
#undef _flag_tempQikm113
#undef _flag_tempQikm114
#undef _flag_tempQikm021
#undef _flag_tempQikm022
#undef _flag_tempQikm023
#undef _flag_tempQikm024
#undef _flag_tempQikm121
#undef _flag_tempQikm122
#undef _flag_tempQikm123
#undef _flag_tempQikm124
#undef _flag_tempQikk011
#undef _flag_tempQikk012
#undef _flag_tempQikk013
#undef _flag_tempQikk014
#undef _flag_tempQikk015
#undef _flag_tempQikk101
#undef _flag_tempQikk102
#undef _flag_tempQikk103
#undef _flag_tempQikk104
#undef _flag_tempQikk105
#undef _flag_tempQikk111
#undef _flag_tempQikk112
#undef _flag_tempQikk113
#undef _flag_tempQikk114
#undef _flag_tempQikk115
#undef _flag_tempQiann011
#undef _flag_tempQiann012
#undef _flag_tempQiann013
#undef _flag_tempQiann014
#undef _flag_tempQiann015
#undef _flag_tempQiann016
#undef _flag_tempQiann021
#undef _flag_tempQiann022
#undef _flag_tempQiann023
#undef _flag_tempQiann024
#undef _flag_tempQiann025
#undef _flag_tempQiann026
#undef _flag_tempQiann101
#undef _flag_tempQiann102
#undef _flag_tempQiann103
#undef _flag_tempQiann104
#undef _flag_tempQiann105
#undef _flag_tempQiann106
#undef _flag_tempQiann111
#undef _flag_tempQiann112
#undef _flag_tempQiann113
#undef _flag_tempQiann114
#undef _flag_tempQiann115
#undef _flag_tempQiann116
#undef _flag_tempQiann121
#undef _flag_tempQiann122
#undef _flag_tempQiann123
#undef _flag_tempQiann124
#undef _flag_tempQiann125
#undef _flag_tempQiann126
#undef _flag_tempQiann201
#undef _flag_tempQiann202
#undef _flag_tempQiann203
#undef _flag_tempQiann204
#undef _flag_tempQiann205
#undef _flag_tempQiann206
#undef _flag_tempQiann211
#undef _flag_tempQiann212
#undef _flag_tempQiann213
#undef _flag_tempQiann214
#undef _flag_tempQiann215
#undef _flag_tempQiann216
#undef _flag_tempQiann221
#undef _flag_tempQiann222
#undef _flag_tempQiann223
#undef _flag_tempQiann224
#undef _flag_tempQiann225
#undef _flag_tempQiann226
#undef _flag_tempQiand011
#undef _flag_tempQiand012
#undef _flag_tempQiand013
#undef _flag_tempQiand014
#undef _flag_tempQiand015
#undef _flag_tempQiand101
#undef _flag_tempQiand102
#undef _flag_tempQiand103
#undef _flag_tempQiand104
#undef _flag_tempQiand105
#undef _flag_tempQiand111
#undef _flag_tempQiand112
#undef _flag_tempQiand113
#undef _flag_tempQiand114
#undef _flag_tempQiand115
#undef _flag_tempQiand201
#undef _flag_tempQiand202
#undef _flag_tempQiand203
#undef _flag_tempQiand204
#undef _flag_tempQiand205
#undef _flag_tempQiand211
#undef _flag_tempQiand212
#undef _flag_tempQiand213
#undef _flag_tempQiand214
#undef _flag_tempQiand215
#undef _flag_tempQiadn011
#undef _flag_tempQiadn012
#undef _flag_tempQiadn013
#undef _flag_tempQiadn014
#undef _flag_tempQiadn015
#undef _flag_tempQiadn021
#undef _flag_tempQiadn022
#undef _flag_tempQiadn023
#undef _flag_tempQiadn024
#undef _flag_tempQiadn025
#undef _flag_tempQiadn101
#undef _flag_tempQiadn102
#undef _flag_tempQiadn103
#undef _flag_tempQiadn104
#undef _flag_tempQiadn105
#undef _flag_tempQiadn111
#undef _flag_tempQiadn112
#undef _flag_tempQiadn113
#undef _flag_tempQiadn114
#undef _flag_tempQiadn115
#undef _flag_tempQiadn121
#undef _flag_tempQiadn122
#undef _flag_tempQiadn123
#undef _flag_tempQiadn124
#undef _flag_tempQiadn125
#undef _flag_tempQiadd011
#undef _flag_tempQiadd012
#undef _flag_tempQiadd013
#undef _flag_tempQiadd014
#undef _flag_tempQiadd015
#undef _flag_tempQiadd101
#undef _flag_tempQiadd102
#undef _flag_tempQiadd103
#undef _flag_tempQiadd104
#undef _flag_tempQiadd105
#undef _flag_tempQiadd111
#undef _flag_tempQiadd112
#undef _flag_tempQiadd113
#undef _flag_tempQiadd114
#undef _flag_tempQiadd115
#undef _flag_tempQir011
#undef _flag_tempQir012
#undef _flag_tempQir101
#undef _flag_tempQir102
#undef _flag_tempQir111
#undef _flag_tempQir112
#undef _flag_tempQiar011
#undef _flag_tempQiar012
#undef _flag_tempQiar013
#undef _flag_tempQiar101
#undef _flag_tempQiar102
#undef _flag_tempQiar103
#undef _flag_tempQiar111
#undef _flag_tempQiar112
#undef _flag_tempQiar113
#undef _flag_tempQilr011
#undef _flag_tempQilr012
#undef _flag_tempQilr101
#undef _flag_tempQilr102
#undef _flag_tempQilr111
#undef _flag_tempQilr112
#undef _flag_tempQi1
#undef _flag_tempQi2
#undef _flag_tempQia1
#undef _flag_tempQia2
#undef _flag_tempQia3
#undef _flag_tempQia4
#undef _flag_tempQia5
#undef _flag_tempQia6
#undef _flag_tempQib001
#undef _flag_tempQib002
#undef _flag_tempQib011
#undef _flag_tempQib012
#undef _flag_tempQib101
#undef _flag_tempQib102
#undef _flag_tempQib111
#undef _flag_tempQib112
#undef _flag_tempQinn011
#undef _flag_tempQinn021
#undef _flag_tempQinn101
#undef _flag_tempQinn111
#undef _flag_tempQinn121
#undef _flag_tempQinn201
#undef _flag_tempQinn211
#undef _flag_tempQinn221
#undef _flag_tempQidd011
#undef _flag_tempQidd101
#undef _flag_tempQidd111
#undef _flag_tempQidd012
#undef _flag_tempQidd102
#undef _flag_tempQidd112


//Common Macro undefs
#undef max
#undef MAX
#undef min
#undef MIN
#undef CEILD
#undef ceild
#undef FLOORD
#undef floord
#undef CDIV
#undef FDIV
#undef LB_SHIFT
#undef MOD
